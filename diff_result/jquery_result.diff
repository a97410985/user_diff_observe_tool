diff --git a/a.js b/b.js
index 687b3215..7514c9a7 100644
--- a/a.js
+++ b/b.js
@@ -22,7 +22,6 @@ module.exports = function( grunt ) {
 	var fs = require( "fs" ),
 		gzip = require( "gzip-js" ),
 		oldNode = /^v10\./.test( process.version ),
-		nodeV17OrNewer = !/^v1[0246]\./.test( process.version ),
 		isCi = process.env.GITHUB_ACTION,
 		ciBrowsers = process.env.BROWSERS && process.env.BROWSERS.split( "," );
 
@@ -363,10 +362,6 @@ require( "load-grunt-tasks" )( grunt, {
 		grunt.log.writeln( "Old Node.js detected, running the task \"" + task + "\" skipped..." );
 	} );
 
-	grunt.registerTask( "print_jsdom_message", () => {
-		grunt.log.writeln( "Node.js 17 or newer detected, skipping jsdom tests..." );
-	} );
-
 	grunt.registerTask( "lint", [
 		"jsonlint",
 
@@ -386,14 +381,10 @@ require( "load-grunt-tasks" )( grunt, {
 		runIfNewNode( "newer:eslint:dist" )
 	] );
 
-	grunt.registerTask( "test:fast", runIfNewNode( "node_smoke_tests" ) );
+	grunt.registerTask( "test:fast", "node_smoke_tests" );
 	grunt.registerTask( "test:slow", [
-		runIfNewNode( "promises_aplus_tests" ),
-
-		// Support: Node.js 17+
-		// jsdom fails to connect to the Karma server in Node 17+.
-		// Until we figure out a fix, skip jsdom tests there.
-		nodeV17OrNewer ? "print_jsdom_message" : runIfNewNode( "karma:jsdom" )
+		"promises_aplus_tests",
+		"karma:jsdom"
 	] );
 
 	grunt.registerTask( "test:prepare", [
diff --git a/a.js b/b.js
index 50b1a6ef..49b0bf67 100644
--- a/a.js
+++ b/b.js
@@ -27,7 +27,7 @@ function schedule() {
 		if ( document.hidden === false && window.requestAnimationFrame ) {
 			window.requestAnimationFrame( schedule );
 		} else {
-			window.setTimeout( schedule, jQuery.fx.interval );
+			window.setTimeout( schedule, 13 );
 		}
 
 		jQuery.fx.tick();
@@ -663,7 +663,6 @@ jQuery.fx.timer = function( timer ) {
 	jQuery.fx.start();
 };
 
-jQuery.fx.interval = 13;
 jQuery.fx.start = function() {
 	if ( inProgress ) {
 		return;
diff --git a/a.js b/b.js
index 4af1f7f9..d57a21b7 100644
--- a/a.js
+++ b/b.js
@@ -5,7 +5,8 @@
 	return;
 }
 
-var oldRaf = window.requestAnimationFrame,
+var fxInterval = 13,
+	oldRaf = window.requestAnimationFrame,
 	defaultPrefilter = jQuery.Animation.prefilters[ 0 ],
 	defaultTweener = jQuery.Animation.tweeners[ "*" ][ 0 ],
 	startTime = 505877050;
@@ -15,17 +16,14 @@
 	beforeEach: function() {
 		this.sandbox = sinon.createSandbox();
 		this.clock = this.sandbox.useFakeTimers( startTime );
-		this._oldInterval = jQuery.fx.interval;
 		window.requestAnimationFrame = null;
 		jQuery.fx.step = {};
-		jQuery.fx.interval = 10;
 		jQuery.Animation.prefilters = [ defaultPrefilter ];
 		jQuery.Animation.tweeners = { "*": [ defaultTweener ] };
 	},
 	afterEach: function() {
 		this.sandbox.restore();
 		jQuery.fx.stop();
-		jQuery.fx.interval = this._oldInterval;
 		window.requestAnimationFrame = oldRaf;
 		return moduleTeardown.apply( this, arguments );
 	}
@@ -36,7 +34,7 @@ QUnit.test( "Animation( subject, props, opts ) - shape", function( assert ) {
 
 	var subject = { test: 0 },
 		props = { test: 1 },
-		opts = { queue: "fx", duration: 100 },
+		opts = { queue: "fx", duration: fxInterval * 10 },
 		animation = jQuery.Animation( subject, props, opts );
 
 	assert.equal(
@@ -59,14 +57,14 @@ QUnit.test( "Animation( subject, props, opts ) - shape", function( assert ) {
 	assert.deepEqual( animation.props, props, ".props is a copy of the original" );
 
 	assert.deepEqual( animation.opts, {
-		duration: 100,
+		duration: fxInterval * 10,
 		queue: "fx",
 		specialEasing: { test: undefined },
 		easing: jQuery.easing._default
 	}, ".options is filled with default easing and specialEasing" );
 
 	assert.equal( animation.startTime, startTime, "startTime was set" );
-	assert.equal( animation.duration, 100, ".duration is set" );
+	assert.equal( animation.duration, fxInterval * 10, ".duration is set" );
 
 	assert.equal( animation.tweens.length, 1, ".tweens has one Tween" );
 	assert.equal( typeof animation.tweens[ 0 ].run, "function", "which has a .run function" );
@@ -85,7 +83,7 @@ QUnit.test( "Animation( subject, props, opts ) - shape", function( assert ) {
 	assert.equal( jQuery.timers[ 0 ].queue, opts.queue, "...with .queue" );
 
 	// Cleanup after ourselves by ticking to the end
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "Animation.prefilter( fn ) - calls prefilter after defaultPrefilter",
diff --git a/a.js b/b.js
index f75ff481..245e75d4 100644
--- a/a.js
+++ b/b.js
@@ -5,7 +5,8 @@
 	return;
 }
 
-var oldRaf = window.requestAnimationFrame,
+var fxInterval = 13,
+	oldRaf = window.requestAnimationFrame,
 	hideOptions = {
 		inline: function() { jQuery.style( this, "display", "none" ); },
 		cascade: function() { this.className = "hidden"; }
@@ -15,15 +16,12 @@
 	beforeEach: function() {
 		this.sandbox = sinon.createSandbox();
 		this.clock = this.sandbox.useFakeTimers( 505877050 );
-		this._oldInterval = jQuery.fx.interval;
 		window.requestAnimationFrame = null;
 		jQuery.fx.step = {};
-		jQuery.fx.interval = 10;
 	},
 	afterEach: function() {
 		this.sandbox.restore();
 		jQuery.fx.stop();
-		jQuery.fx.interval = this._oldInterval;
 		window.requestAnimationFrame = oldRaf;
 		return moduleTeardown.apply( this, arguments );
 	}
@@ -160,9 +158,9 @@ QUnit.test( "show(Number) - " + type + " hidden", function( assert ) {
 		};
 
 		jQuery.each( test, function( selector ) {
-			jQuery( selector, "#show-tests" ).show( 100 );
+			jQuery( selector, "#show-tests" ).show( fxInterval * 10 );
 		} );
-		this.clock.tick( 50 );
+		this.clock.tick( fxInterval * 5 );
 		jQuery.each( test, function( selector, expected ) {
 			jQuery( selector, "#show-tests" ).each( function() {
 				assert.equal(
@@ -172,7 +170,7 @@ QUnit.test( "show(Number) - " + type + " hidden", function( assert ) {
 				);
 			} );
 		} );
-		this.clock.tick( 50 );
+		this.clock.tick( fxInterval * 5 );
 		jQuery.each( test, function( selector, expected ) {
 			jQuery( selector, "#show-tests" ).each( function() {
 				assert.equal( jQuery( this ).css( "display" ), expected,
@@ -203,17 +201,17 @@ QUnit.test( "Persist correct display value - " + type + " hidden", function( ass
 
 		$span.hide();
 
-		$span.fadeIn( 100, function() {
+		$span.fadeIn( fxInterval * 10, function() {
 			assert.equal( $span.css( "display" ), display, "Expecting display: " + display );
-			$span.fadeOut( 100, function() {
+			$span.fadeOut( fxInterval * 10, function() {
 				assert.equal( $span.css( "display" ), displayNone, "Expecting display: " + displayNone );
-				$span.fadeIn( 100, function() {
+				$span.fadeIn( fxInterval * 10, function() {
 					assert.equal( $span.css( "display" ), display, "Expecting display: " + display );
 				} );
 			} );
 		} );
 
-		clock.tick( 300 );
+		clock.tick( fxInterval * 30 );
 	} );
 
 	// Support: IE 11+
@@ -235,17 +233,17 @@ QUnit.test( "Persist correct display value - " + type + " hidden", function( ass
 		var display = "inline";
 		var clock = this.clock;
 
-		$shadowChild.fadeIn( 100, function() {
+		$shadowChild.fadeIn( fxInterval * 10, function() {
 			assert.equal( $shadowChild.css( "display" ), display, "Expecting shadow display: " + display );
-			$shadowChild.fadeOut( 100, function() {
+			$shadowChild.fadeOut( fxInterval * 10, function() {
 				assert.equal( $shadowChild.css( "display" ), displayNone, "Expecting shadow display: " + displayNone );
-				$shadowChild.fadeIn( 100, function() {
+				$shadowChild.fadeIn( fxInterval * 10, function() {
 					assert.equal( $shadowChild.css( "display" ), display, "Expecting shadow display: " + display );
 				} );
 			} );
 		} );
 
-		clock.tick( 300 );
+		clock.tick( fxInterval * 30 );
 	} );
 } );
 
@@ -284,7 +282,7 @@ QUnit.test( "animate relative values", function( assert ) {
 				baseScale = elem[ 0 ].offsetHeight / value,
 				adjustScale = elem[ 0 ].offsetWidth / value;
 
-			elem.css( "width", base ).animate( adjust, 100, function() {
+			elem.css( "width", base ).animate( adjust, fxInterval * 10, function() {
 				assert.equal( this.offsetHeight, value * baseScale + 2 * adjustScale,
 					baseUnit + "+=" + adjustUnit );
 				assert.equal( this.offsetWidth, value * baseScale - 2 * adjustScale,
@@ -292,52 +290,52 @@ QUnit.test( "animate relative values", function( assert ) {
 
 			} );
 
-			clock.tick( 100 );
+			clock.tick( fxInterval * 10 );
 		} );
 	} );
 } );
 
 QUnit.test( "animate negative height", function( assert ) {
 	assert.expect( 1 );
-	jQuery( "#foo" ).animate( { height: -100 }, 100, function() {
+	jQuery( "#foo" ).animate( { height: -100 }, fxInterval * 10, function() {
 		assert.equal( this.offsetHeight, 0, "Verify height." );
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "animate negative margin", function( assert ) {
 	assert.expect( 1 );
-	jQuery( "#foo" ).animate( { "marginTop": -100 }, 100, function() {
+	jQuery( "#foo" ).animate( { "marginTop": -100 }, fxInterval * 10, function() {
 		assert.equal( jQuery( this ).css( "marginTop" ), "-100px", "Verify margin." );
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "animate negative margin with px", function( assert ) {
 	assert.expect( 1 );
-	jQuery( "#foo" ).animate( { marginTop: "-100px" }, 100, function() {
+	jQuery( "#foo" ).animate( { marginTop: "-100px" }, fxInterval * 10, function() {
 		assert.equal( jQuery( this ).css( "marginTop" ), "-100px", "Verify margin." );
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "animate negative padding", function( assert ) {
 	assert.expect( 1 );
-	jQuery( "#foo" ).animate( { "paddingBottom": -100 }, 100, function() {
+	jQuery( "#foo" ).animate( { "paddingBottom": -100 }, fxInterval * 10, function() {
 		assert.equal( jQuery( this ).css( "paddingBottom" ), "0px", "Verify paddingBottom." );
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "animate block as inline width/height", function( assert ) {
 	assert.expect( 3 );
 
-	jQuery( "#foo" ).css( { display: "inline", width: "", height: "" } ).animate( { width: 42, height: 42 }, 100, function() {
+	jQuery( "#foo" ).css( { display: "inline", width: "", height: "" } ).animate( { width: 42, height: 42 }, fxInterval * 10, function() {
 		assert.equal( jQuery( this ).css( "display" ), "inline-block", "inline-block was set on non-floated inline element when animating width/height" );
 		assert.equal( this.offsetWidth, 42, "width was animated" );
 		assert.equal( this.offsetHeight, 42, "height was animated" );
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "animate native inline width/height", function( assert ) {
@@ -346,12 +344,12 @@ QUnit.test( "animate native inline width/height", function( assert ) {
 	jQuery( "#foo" ).css( { display: "", width: "", height: "" } )
 		.append( "<span>text</span>" )
 		.children( "span" )
-			.animate( { width: 42, height: 42 }, 100, function() {
+			.animate( { width: 42, height: 42 }, fxInterval * 10, function() {
 				assert.equal( jQuery( this ).css( "display" ), "inline-block", "inline-block was set on non-floated inline element when animating width/height" );
 				assert.equal( this.offsetWidth, 42, "width was animated" );
 				assert.equal( this.offsetHeight, 42, "height was animated" );
 			} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "animate block width/height", function( assert ) {
@@ -366,7 +364,7 @@ jQuery( "<div>" ).appendTo( "#qunit-fixture" ).css( {
 		width: 42,
 		height: 42
 	}, {
-		duration: 100,
+		duration: fxInterval * 10,
 		step: function() {
 			if ( jQuery( this ).width() > 42 ) {
 				assert.ok( false, "width was incorrectly augmented during animation" );
@@ -378,16 +376,16 @@ jQuery( "<div>" ).appendTo( "#qunit-fixture" ).css( {
 			assert.equal( jQuery( this ).height(), 42, "height was animated" );
 		}
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "animate table width/height", function( assert ) {
 	assert.expect( 1 );
 
-	jQuery( "#table" ).animate( { width: 42, height: 42 }, 100, function() {
+	jQuery( "#table" ).animate( { width: 42, height: 42 }, fxInterval * 10, function() {
 		assert.equal( jQuery( this ).css( "display" ), "table", "display mode is correct" );
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "animate table-row width/height", function( assert ) {
@@ -397,12 +395,12 @@ QUnit.test( "animate table-row width/height", function( assert ) {
 			.html( "<tr style='height:42px;'><td style='padding:0;'><div style='width:20px;height:20px;'></div></td></tr>" )
 			.find( "tr" );
 
-	tr.animate( { width: 10, height: 10 }, 100, function() {
+	tr.animate( { width: 10, height: 10 }, fxInterval * 10, function() {
 		assert.equal( jQuery( this ).css( "display" ), "table-row", "display mode is correct" );
 		assert.equal( this.offsetWidth, 20, "width animated to shrink wrap point" );
 		assert.equal( this.offsetHeight, 20, "height animated to shrink wrap point" );
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "animate table-cell width/height", function( assert ) {
@@ -413,12 +411,12 @@ QUnit.test( "animate table-cell width/height", function( assert ) {
 			.html( "<tr><td style='width:42px;height:42px;padding:0;'><div style='width:20px;height:20px;'></div></td></tr>" )
 			.find( "td" );
 
-	td.animate( { width: 10, height: 10 }, 100, function() {
+	td.animate( { width: 10, height: 10 }, fxInterval * 10, function() {
 		assert.equal( jQuery( this ).css( "display" ), "table-cell", "display mode is correct" );
 		assert.equal( this.offsetWidth, 20, "width animated to shrink wrap point" );
 		assert.equal( this.offsetHeight, 20, "height animated to shrink wrap point" );
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "animate percentage(%) on width/height", function( assert ) {
@@ -427,46 +425,25 @@ QUnit.test( "animate percentage(%) on width/height", function( assert ) {
 	var $div = jQuery( "<div style='position:absolute;top:-999px;left:-999px;width:60px;height:60px;'><div style='width:50%;height:50%;'></div></div>" )
 		.appendTo( "#qunit-fixture" ).children( "div" );
 
-	$div.animate( { width: "25%", height: "25%" }, 13, function() {
+	$div.animate( { width: "25%", height: "25%" }, fxInterval, function() {
 		var $this = jQuery( this );
 		assert.equal( $this.css( "width" ), "15px", "Width was animated to 15px rather than 25px" );
 		assert.equal( $this.css( "height" ), "15px", "Height was animated to 15px rather than 25px" );
 	} );
-	this.clock.tick( 20 );
+	this.clock.tick( fxInterval * 1.5 );
 } );
 
 QUnit.test( "animate resets overflow-x and overflow-y when finished", function( assert ) {
 	assert.expect( 2 );
 	jQuery( "#foo" )
 		.css( { display: "block", width: 20, height: 20, overflowX: "visible", overflowY: "auto" } )
-		.animate( { width: 42, height: 42 }, 100, function() {
+		.animate( { width: 42, height: 42 }, fxInterval * 10, function() {
 			assert.equal( this.style.overflowX, "visible", "overflow-x is visible" );
 			assert.equal( this.style.overflowY, "auto", "overflow-y is auto" );
 		} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
-/* // This test ends up being flaky depending upon the CPU load
-QUnit.test("animate option (queue === false)", function( assert ) {
-	var done = assert.async();
-	assert.expect(1);
-
-	var order = [];
-
-	var $foo = jQuery("#foo");
-	$foo.animate({width:"100px"}, 3000, function () {
-		// should finish after unqueued animation so second
-		order.push(2);
-		assert.deepEqual( order, [ 1, 2 ], "Animations finished in the correct order" );
-		done();
-	});
-	$foo.animate({fontSize:"2em"}, {queue:false, duration:10, complete:function () {
-		// short duration and out of queue so should finish first
-		order.push(1);
-	}});
-});
-*/
-
 QUnit.test( "animate option { queue: false }", function( assert ) {
 	assert.expect( 2 );
 	var foo = jQuery( "#foo" );
@@ -475,12 +452,12 @@ QUnit.test( "animate option { queue: false }", function( assert ) {
 		fontSize: "2em"
 	}, {
 		queue: false,
-		duration: 10,
+		duration: fxInterval,
 		complete: function() {
 			assert.ok( true, "Animation Completed" );
 		}
 	} );
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 
 	assert.equal( foo.queue().length, 0, "Queue is empty" );
 } );
@@ -493,7 +470,7 @@ QUnit.test( "animate option { queue: true }", function( assert ) {
 		fontSize: "2em"
 	}, {
 		queue: true,
-		duration: 10,
+		duration: fxInterval,
 		complete: function() {
 			assert.ok( true, "Animation Completed" );
 		}
@@ -502,7 +479,7 @@ QUnit.test( "animate option { queue: true }", function( assert ) {
 	assert.notEqual( foo.queue().length, 0, "Default queue is not empty" );
 
 	//clear out existing timers before next test
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 } );
 
 QUnit.test( "animate option { queue: 'name' }", function( assert ) {
@@ -533,7 +510,7 @@ QUnit.test( "animate option { queue: 'name' }", function( assert ) {
 	assert.equal( foo.queue( "name" ).length, 2, "Queue length of 'name' queue" );
 
 	foo.dequeue( "name" );
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 
 } );
 
@@ -553,10 +530,10 @@ QUnit.test( "animate with no properties", function( assert ) {
 	foo = jQuery( "#foo" );
 
 	foo.animate( {} );
-	foo.animate( { top: 10 }, 100, function() {
+	foo.animate( { top: 10 }, fxInterval * 10, function() {
 		assert.ok( true, "Animation was properly dequeued." );
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "animate duration 0", function( assert ) {
@@ -589,13 +566,13 @@ QUnit.test( "animate duration 0", function( assert ) {
 		assert.ok( true, "Animate a third simple property." );
 		counter++;
 	} );
-	$elems.eq( 1 ).animate( { a:3 }, 200, function() {
+	$elems.eq( 1 ).animate( { a:3 }, fxInterval * 20, function() {
 		counter++;
 
 		// Failed until [6115]
 		assert.equal( counter, 5, "One synchronic and one asynchronic" );
 	} );
-	this.clock.tick( 200 );
+	this.clock.tick( fxInterval * 20 );
 
 	$elem = jQuery( "<div></div>" );
 	$elem.show( 0, function() {
@@ -614,12 +591,12 @@ QUnit.test( "animate hyphenated properties", function( assert ) {
 
 	jQuery( "#foo" )
 		.css( "font-size", 10 )
-		.animate( { "font-size": 20 }, 200, function() {
+		.animate( { "font-size": 20 }, fxInterval * 20, function() {
 			assert.equal( this.style.fontSize, "20px", "The font-size property was animated." );
 		} );
 
 	// FIXME why is this double only when run with other tests
-	this.clock.tick( 400 );
+	this.clock.tick( fxInterval * 40 );
 
 } );
 
@@ -628,10 +605,10 @@ QUnit.test( "animate non-element", function( assert ) {
 
 	var obj = { test: 0 };
 
-	jQuery( obj ).animate( { test: 200 }, 200, function() {
+	jQuery( obj ).animate( { test: 200 }, fxInterval * 20, function() {
 		assert.equal( obj.test, 200, "The custom property should be modified." );
 	} );
-	this.clock.tick( 200 );
+	this.clock.tick( fxInterval * 20 );
 } );
 
 QUnit.test( "animate non-element's zIndex without appending \"px\"", function( assert ) {
@@ -639,10 +616,10 @@ QUnit.test( "animate non-element's zIndex without appending \"px\"", function( a
 
 	var obj = { zIndex: 0 };
 
-	jQuery( obj ).animate( { zIndex: 200 }, 200, function() {
+	jQuery( obj ).animate( { zIndex: 200 }, fxInterval * 20, function() {
 		assert.equal( obj.zIndex, 200, "The custom property should be modified without appending \"px\"." );
 	} );
-	this.clock.tick( 200 );
+	this.clock.tick( fxInterval * 20 );
 } );
 
 QUnit.test( "stop()", function( assert ) {
@@ -654,9 +631,9 @@ QUnit.test( "stop()", function( assert ) {
 		nw;
 
 	$foo.hide().css( "width", 200 )
-		.animate( { "width": "show" }, 1500 );
+		.animate( { "width": "show" }, fxInterval * 150 );
 
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 	nw = $foo.css( "width" );
 	assert.notEqual( parseFloat( nw ), w, "An animation occurred " + nw + " " + w + "px" );
 	$foo.stop();
@@ -664,7 +641,7 @@ QUnit.test( "stop()", function( assert ) {
 	nw = $foo.css( "width" );
 	assert.notEqual( parseFloat( nw ), w, "Stop didn't reset the animation " + nw + " " + w + "px" );
 
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 
 	$foo.removeData();
 	$foo.removeData( undefined, true );
@@ -672,17 +649,17 @@ QUnit.test( "stop()", function( assert ) {
 
 	$one = jQuery( "#fadein" );
 	$two = jQuery( "#show" );
-	$one.fadeTo( 100, 0, function() {
+	$one.fadeTo( fxInterval * 10, 0, function() {
 		$one.stop();
 	} );
-	this.clock.tick( 100 );
-	$two.fadeTo( 100, 0, function() {
+	this.clock.tick( fxInterval * 10 );
+	$two.fadeTo( fxInterval * 10, 0, function() {
 		assert.equal( $two.css( "opacity" ), "0", "Stop does not interfere with animations on other elements (trac-6641)" );
 
 		// Reset styles
 		$one.add( $two ).css( "opacity", "" );
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "stop() - several in queue", function( assert ) {
@@ -721,12 +698,12 @@ QUnit.test( "stop(clearQueue)", function( assert ) {
 	var $foo = jQuery( "#foo" ),
 		w = 0,
 		nw;
-	$foo.hide().css( "width", 200 ).css( "width" );
+	$foo.hide().css( "width", fxInterval * 20 ).css( "width" );
 
-	$foo.animate( { "width": "show" }, 1000 );
-	$foo.animate( { "width": "hide" }, 1000 );
-	$foo.animate( { "width": "show" }, 1000 );
-	this.clock.tick( 100 );
+	$foo.animate( { "width": "show" }, fxInterval * 100 );
+	$foo.animate( { "width": "hide" }, fxInterval * 100 );
+	$foo.animate( { "width": "show" }, fxInterval * 100 );
+	this.clock.tick( fxInterval * 10 );
 	nw = $foo.css( "width" );
 	assert.ok( parseFloat( nw ) !== w, "An animation occurred " + nw + " " + w + "px" );
 	$foo.stop( true );
@@ -735,7 +712,7 @@ QUnit.test( "stop(clearQueue)", function( assert ) {
 	assert.ok( parseFloat( nw ) !== w, "Stop didn't reset the animation " + nw + " " + w + "px" );
 
 	assert.equal( $foo.queue().length, 0, "The animation queue was cleared" );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 	assert.equal( nw, $foo.css( "width" ), "The animation didn't continue" );
 } );
 
@@ -745,13 +722,13 @@ QUnit.test( "stop(clearQueue, gotoEnd)", function( assert ) {
 	var $foo = jQuery( "#foo" ),
 		w = 0,
 		nw;
-	$foo.hide().css( "width", 200 ).css( "width" );
+	$foo.hide().css( "width", fxInterval * 20 ).css( "width" );
 
-	$foo.animate( { width: "show" }, 1000 );
-	$foo.animate( { width: "hide" }, 1000 );
-	$foo.animate( { width: "show" }, 1000 );
-	$foo.animate( { width: "hide" }, 1000 );
-	this.clock.tick( 100 );
+	$foo.animate( { width: "show" }, fxInterval * 100 );
+	$foo.animate( { width: "hide" }, fxInterval * 100 );
+	$foo.animate( { width: "show" }, fxInterval * 100 );
+	$foo.animate( { width: "hide" }, fxInterval * 100 );
+	this.clock.tick( fxInterval * 10 );
 	nw = $foo.css( "width" );
 	assert.ok( parseFloat( nw ) !== w, "An animation occurred " + nw + " " + w + "px" );
 	$foo.stop( false, true );
@@ -761,7 +738,7 @@ QUnit.test( "stop(clearQueue, gotoEnd)", function( assert ) {
 	// Disabled, being flaky
 	//equal( nw, 1, "Stop() reset the animation" );
 
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 
 	// Disabled, being flaky
 	//equal( $foo.queue().length, 2, "The next animation continued" );
@@ -776,7 +753,7 @@ QUnit.test( "stop( queue, ..., ... ) - Stop single queues", function( assert ) {
 	foo.animate( {
 		width: 400
 	}, {
-		duration: 500,
+		duration: fxInterval * 50,
 		complete: function() {
 			assert.equal( parseFloat( foo.css( "width" ) ), 400, "Animation completed for standard queue" );
 			assert.equal( parseFloat( foo.css( "height" ) ), saved, "Height was not changed after the second stop" );
@@ -786,7 +763,7 @@ QUnit.test( "stop( queue, ..., ... ) - Stop single queues", function( assert ) {
 	foo.animate( {
 		height: 400
 	}, {
-		duration: 1000,
+		duration: fxInterval * 100,
 		queue: "height"
 	} ).dequeue( "height" ).stop( "height", false, true );
 
@@ -795,11 +772,11 @@ QUnit.test( "stop( queue, ..., ... ) - Stop single queues", function( assert ) {
 	foo.animate( {
 		height: 200
 	}, {
-		duration: 1000,
+		duration: fxInterval * 100,
 		queue: "height"
 	} ).dequeue( "height" ).stop( "height", false, false );
 	saved = parseFloat( foo.css( "height" ) );
-        this.clock.tick( 500 );
+	this.clock.tick( fxInterval * 50 );
 } );
 
 QUnit[ QUnit.jQuerySelectors ? "test" : "skip" ]( "toggle()", function( assert ) {
@@ -894,7 +871,7 @@ QUnit.test( "Overflow and Display", function( assert ) {
 		.before( "text before" )
 		.after( "text after" )
 		.animate( { opacity: 0.5 }, "slow", done );
-	this.clock.tick( 600 );
+	this.clock.tick( 600 + fxInterval );
 } );
 
 jQuery.each( {
@@ -985,7 +962,7 @@ QUnit.test( fn + " to " + tn, function( assert ) {
 
 			anim = { width: t_w, height: t_h, opacity: t_o };
 
-			elem.animate( anim, 50 );
+			elem.animate( anim, fxInterval * 5 );
 
 			jQuery.when( elem ).done( function( $elem ) {
 				var cur_o, cur_w, cur_h, old_h,
@@ -1055,7 +1032,7 @@ QUnit.test( fn + " to " + tn, function( assert ) {
 				jQuery( elem ).remove();
 
 			} );
-			this.clock.tick( 100 );
+			this.clock.tick( fxInterval * 10 );
 		} );
 	} );
 } );
@@ -1103,7 +1080,7 @@ 		getProps = function( el ) {
 	setup( ".fadeToggle().fadeToggle() - out", "#fadetoggleout div" ).fadeToggle( "fast" ).fadeToggle( "fast", check );
 	setup( ".fadeTo(0.5).fadeTo(1.0, easing)", "#fadeto div" ).fadeTo( "fast", 0.5 ).fadeTo( "fast", 1.0, "linear", check );
 
-    this.clock.tick( 400 );
+    this.clock.tick( 400 + fxInterval * 2 );
 } );
 
 jQuery.makeTest = function( text ) {
@@ -1131,15 +1108,14 @@ QUnit.test( "jQuery.show('fast') doesn't clear radio buttons (bug trac-1095)", f
 		assert.ok( jQuery( "input[type='checkbox']", $checkedtest ).first().attr( "checked" ), "Check first checkbox still checked." );
 		assert.ok( !jQuery( "input[type='checkbox']", $checkedtest ).last().attr( "checked" ), "Check last checkbox still NOT checked." );
 	} );
-	this.clock.tick( 200 );
+	this.clock.tick( 200 + fxInterval );
 } );
 
 QUnit.test( "interrupt toggle", function( assert ) {
 	assert.expect( 24 );
 
-	var env = this,
-		longDuration = 2000,
-		shortDuration = 500,
+	var longDuration = fxInterval * 200,
+		shortDuration = fxInterval * 50,
 		remaining = 0,
 		$elems = jQuery( ".chain-test" ),
 		clock = this.clock,
@@ -1222,7 +1198,7 @@ 	jQuery.easing._defaultTest = function( p ) {
 		return p;
 	};
 
-	jQuery( data ).animate( props, 400, "_defaultTest", function() {
+	jQuery( data ).animate( props, fxInterval * 40, "_defaultTest", function() {
 		assert.ok( test1Called, "Easing function (_test1) called" );
 		assert.ok( test2Called, "Easing function (_test2) called" );
 		assert.ok( defaultTestCalled, "Easing function (_default) called" );
@@ -1230,7 +1206,7 @@ jQuery( data ).animate( props, 400, "_defaultTest", function() {
 		assert.equal( props.b[ 1 ], "_test2", "animate does not change original props (per-property easing would be lost)" );
 	} );
 
-	this.clock.tick( 400 );
+	this.clock.tick( fxInterval * 40 );
 } );
 
 QUnit.test( "animate with CSS shorthand properties", function( assert ) {
@@ -1256,7 +1232,8 @@ 	jQuery.easing.propertyScope = function( p ) {
 	};
 
 	jQuery( "#foo" )
-		.animate( propsBasic, 200, "animationScope", function() {
+		.animate( propsBasic, fxInterval * 20,
+				"animationScope", function() {
 			assert.equal( this.style.paddingTop, "10px", "padding-top was animated" );
 			assert.equal( this.style.paddingLeft, "20px", "padding-left was animated" );
 			assert.equal( this.style.paddingRight, "20px", "padding-right was animated" );
@@ -1264,7 +1241,8 @@ jQuery( "#foo" )
 			assert.equal( easeAnimation_count, 4, "per-animation default easing called for each property" );
 			easeAnimation_count = 0;
 		} )
-		.animate( propsSpecial, 200, "animationScope", function() {
+		.animate( propsSpecial, fxInterval * 20,
+				"animationScope", function() {
 			assert.equal( this.style.paddingTop, "1px", "padding-top was animated again" );
 			assert.equal( this.style.paddingLeft, "2px", "padding-left was animated again" );
 			assert.equal( this.style.paddingRight, "2px", "padding-right was animated again" );
@@ -1276,7 +1254,7 @@ jQuery( "#foo" )
 			delete jQuery.easing.animationScope;
 			delete jQuery.easing.propertyScope;
 		} );
-		this.clock.tick( 400 );
+		this.clock.tick( fxInterval * 40 );
 } );
 
 QUnit.test( "hide hidden elements, with animation (bug trac-7141)", function( assert ) {
@@ -1302,7 +1280,7 @@ QUnit.test( "animate unit-less properties (trac-4966)", function( assert ) {
 	div.animate( { zIndex: 2 }, function() {
 		assert.equal( div.css( "z-index" ), "2", "z-index is 2" );
 	} );
-	this.clock.tick( 400 );
+	this.clock.tick( 400 + fxInterval );
 } );
 
 QUnit.test( "animate properties missing px w/ opacity as last (trac-9074)", function( assert ) {
@@ -1320,9 +1298,9 @@ QUnit.test( "animate properties missing px w/ opacity as last (trac-9074)", func
 		left: 200,
 		marginLeft: 200,
 		opacity: 0
-	}, 2000 );
+	}, fxInterval * 200 );
 
-	this.clock.tick( 500 );
+	this.clock.tick( fxInterval * 50 );
 
 	ml = cssInt( "marginLeft" );
 	l = cssInt( "left" );
@@ -1342,14 +1320,14 @@ QUnit.test( "callbacks should fire in correct order (trac-9100)", function( asse
 	jQuery( "<p data-operation='*2'></p><p data-operation='^2'></p>" ).appendTo( "#qunit-fixture" )
 
 		// The test will always pass if no properties are animated or if the duration is 0
-		.animate( { fontSize: 12 }, 13, function() {
+		.animate( { fontSize: 12 }, fxInterval, function() {
 			a *= jQuery( this ).data( "operation" ) === "*2" ? 2 : a;
 			cb++;
 			if ( cb === 2 ) {
 				assert.equal( a, 4, "test value has been *2 and _then_ ^2" );
 			}
 		} );
-	this.clock.tick( 20 );
+	this.clock.tick( fxInterval * 1.5 );
 } );
 
 QUnit.test( "callbacks that throw exceptions will be removed (trac-5684)", function( assert ) {
@@ -1421,8 +1399,8 @@ QUnit.test( "line-height animates correctly (trac-13855)", function( assert ) {
 
 	var t0,
 		clock = this.clock,
-		longDuration = 2000,
-		shortDuration = 500,
+		longDuration = fxInterval * 200,
+		shortDuration = fxInterval * 50,
 		animated = jQuery(
 			"<p style='line-height: 100;'>unitless</p>" +
 			"<p style='line-height: 5000px;'>px</p>" +
@@ -1472,11 +1450,11 @@ setTimeout( function() {
 
 				animated.stop( true, true );
 			}, shortDuration );
-clock.tick( shortDuration );
+			clock.tick( shortDuration );
 		}, shortDuration );
-clock.tick( shortDuration );
-	}, 50 );
-clock.tick( 50 );
+		clock.tick( shortDuration );
+	}, fxInterval * 5 );
+	clock.tick( fxInterval * 5 );
 } );
 
 // Start 1.8 Animation tests
@@ -1504,7 +1482,7 @@ QUnit.test( "jQuery.Animation( object, props, opts )", function( assert ) {
 			assert.deepEqual( testObject, testDest, "No unexpected properties" );
 		} );
 	} );
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 } );
 
 QUnit.test( "Animate Option: step: function( percent, tween )", function( assert ) {
@@ -1532,7 +1510,7 @@ jQuery( "#foo" ).animate( {
 		}, "Step function was called once at 0% and once at 100% for each property" );
 		next();
 	} );
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 } );
 
 QUnit.test( "Animate callbacks have correct context", function( assert ) {
@@ -1541,15 +1519,15 @@ QUnit.test( "Animate callbacks have correct context", function( assert ) {
 	var foo = jQuery( "#foo" );
 	foo.animate( {
 		height: 10
-	}, 10, function() {
+	}, fxInterval, function() {
 		assert.equal( foo[ 0 ], this, "Complete callback after stop(true) `this` is element" );
 	} ).stop( true, true );
 	foo.animate( {
 		height: 100
-	}, 10, function() {
+	}, fxInterval, function() {
 		assert.equal( foo[ 0 ], this, "Complete callback `this` is element" );
 	} );
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 } );
 
 QUnit.test( "User supplied callback called after show when fx off (trac-8892)", function( assert ) {
@@ -1571,8 +1549,7 @@ QUnit.test( "User supplied callback called after show when fx off (trac-8892)",
 QUnit.test( "animate should set display for disconnected nodes", function( assert ) {
 	assert.expect( 20 );
 
-	var env = this,
-		showMethods = {
+	var showMethods = {
 			fadeIn: [],
 			fadeTo: [ "fast", 0.5 ],
 			slideDown: [ "fast" ],
@@ -1625,7 +1602,7 @@ QUnit.test( "animate should set display for disconnected nodes", function( asser
 				"." + name + " block under fragment" );
 		} ] ) );
 	} );
-	clock.tick( 400 );
+	clock.tick( 400 + fxInterval );
 } );
 
 QUnit[ QUnit.jQuerySelectors ? "test" : "skip" ]( "Animation callback should not show animated element as :animated (trac-7157)", function( assert ) {
@@ -1635,10 +1612,10 @@ QUnit.test( "animate should set display for disconnected nodes", function( asser
 
 	foo.animate( {
 		opacity: 0
-	}, 100, function() {
+	}, fxInterval * 10, function() {
 		assert.ok( !foo.is( ":animated" ), "The element is not animated" );
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit[ QUnit.jQuerySelectors ? "test" : "skip" ]( "Initial step callback should show element as :animated (trac-14623)", function( assert ) {
@@ -1677,7 +1654,7 @@ QUnit.test( "hide called on element within hidden parent should set display to n
 
 		elems.remove();
 	} );
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 } );
 
 QUnit.test( "hide, fadeOut and slideUp called on element width height and width = 0 should set display to none", function( assert ) {
@@ -1708,7 +1685,7 @@ QUnit.test( "hide, fadeOut and slideUp called on element width height and width
 		assert.strictEqual( elems.get( 4 ).style.display, "none", "slideUp() called on element width height and width = 0 should set display to none" );
 
 	} );
-	this.clock.tick( 400 );
+	this.clock.tick( 400 + fxInterval );
 } );
 
 QUnit.test( "hide should not leave hidden inline elements visible (trac-14848)", function( assert ) {
@@ -1735,7 +1712,7 @@ QUnit.test( "Handle queue:false promises", function( assert ) {
 	foo.animate( {
 		top: 1
 	}, {
-		duration: 10,
+		duration: fxInterval,
 		queue: false,
 		complete: function() {
 			assert.ok( step++ <= 2, "Step one or two" );
@@ -1743,21 +1720,21 @@ QUnit.test( "Handle queue:false promises", function( assert ) {
 	} ).animate( {
 		bottom: 1
 	}, {
-		duration: 10,
+		duration: fxInterval,
 		complete: function() {
 			assert.ok( step > 2 && step < 5, "Step three or four" );
 			step++;
 		}
 	} );
 
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 
 	foo.promise().done( function() {
 		assert.equal( step++, 5, "steps 1-5: queue:false then queue:fx done" );
 		foo.animate( {
 			top: 10
 		}, {
-			duration: 10,
+			duration: fxInterval,
 			complete: function() {
 				assert.ok( step > 5 && step < 8, "Step six or seven" );
 				step++;
@@ -1765,7 +1742,7 @@ QUnit.test( "Handle queue:false promises", function( assert ) {
 		} ).animate( {
 			bottom: 10
 		}, {
-			duration: 10,
+			duration: fxInterval,
 			queue: false,
 			complete: function() {
 				assert.ok( step > 7 && step < 10, "Step eight or nine" );
@@ -1776,7 +1753,7 @@ QUnit.test( "Handle queue:false promises", function( assert ) {
 		} );
 
 	} );
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 } );
 
 QUnit.test( "multiple unqueued and promise", function( assert ) {
@@ -1811,7 +1788,7 @@ QUnit.test( "multiple unqueued and promise", function( assert ) {
 	} ).promise().done( function() {
 		assert.strictEqual( step++, 4, "Step 4" );
 	} );
-	this.clock.tick( 1000 );
+	this.clock.tick( 1000 + fxInterval );
 } );
 
 QUnit.test( "animate does not change start value for non-px animation (trac-7109)", function( assert ) {
@@ -1834,7 +1811,7 @@ QUnit.test( "animate does not change start value for non-px animation (trac-7109
 		next();
 		parent.remove();
 	} );
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 } );
 
 QUnit.test( "non-px animation handles non-numeric start (trac-11971)", function( assert ) {
@@ -1866,7 +1843,7 @@ QUnit.test( "non-px animation handles non-numeric start (trac-11971)", function(
 			assert.equal( jQuery.style( this, "backgroundPositionX" ), "42%", "End reached" );
 		}
 	} );
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 } );
 
 QUnit.test( "Animation callbacks (trac-11797)", function( assert ) {
@@ -1946,7 +1923,7 @@ QUnit.test( "Animation callbacks (trac-11797)", function( assert ) {
 			assert.ok( true, "async: always" );
 		}
 	} );
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 } );
 
 QUnit.test( "Animation callbacks in order (gh-2283)", function( assert ) {
@@ -1986,7 +1963,7 @@ jQuery( "#foo" ).animate( {
 		}
 	} ).finish();
 
-	this.clock.tick( dur + 10 );
+	this.clock.tick( dur + fxInterval );
 } );
 
 QUnit.test( "Animate properly sets overflow hidden when animating width/height (trac-12117)", function( assert ) {
@@ -2096,8 +2073,8 @@ QUnit.test( "toggle state tests: " + method + " (trac-8685)", function( assert )
 			always: secondToggle
 		} );
 
-                //FIXME figure out why 470
-		this.clock.tick( 470 );
+		// FIXME figure out why 470
+		this.clock.tick( 470 + fxInterval * 2 );
 	} );
 } );
 
@@ -2291,7 +2268,10 @@ QUnit.test( ".finish() is applied correctly when multiple elements were animated
 
 	var elems = jQuery( "<a>0</a><a>1</a><a>2</a>" );
 
-	elems.animate( { opacity: 0 }, 1500 ).animate( { opacity: 1 }, 1500 );
+	elems
+		.animate( { opacity: 0 }, fxInterval * 150 )
+		.animate( { opacity: 1 }, fxInterval * 150 );
+
 	setTimeout( function() {
 		elems.eq( 1 ).finish();
 		assert.ok( !elems.eq( 1 ).queue().length, "empty queue for .finish()ed element" );
@@ -2300,7 +2280,7 @@ setTimeout( function() {
 		elems.stop( true );
 
 	}, 100 );
-	this.clock.tick( 1500 );
+	this.clock.tick( fxInterval * 150 );
 } );
 
 QUnit.test( "slideDown() after stop() (trac-13483)", function( assert ) {
@@ -2312,28 +2292,28 @@ QUnit.test( "slideDown() after stop() (trac-13483)", function( assert ) {
 			clock = this.clock;
 
         // First test. slideUp() -> stop() in the middle -> slideDown() until the end
-		ul.slideUp( 1000 );
-		clock.tick( 500 );
+		ul.slideUp( fxInterval * 100 );
+		clock.tick( fxInterval * 50 );
 		ul.stop( true );
 		ul.slideDown( 1, function() {
 				assert.equal( ul.height(), origHeight, "slideDown() after interrupting slideUp() with stop(). Height must be in original value" );
 
 				// Second test. slideDown() -> stop() in the middle -> slideDown() until the end
 				ul.slideUp( 1 );
-				clock.tick( 10 );
-				ul.slideDown( 1000 );
-				clock.tick( 500 );
+				clock.tick( fxInterval );
+				ul.slideDown( fxInterval * 100 );
+				clock.tick( fxInterval * 50 );
 				ul.stop( true );
 				ul.slideDown( 1 );
 				assert.equal( ul.height(), origHeight, "slideDown() after interrupting slideDown() with stop(). Height must be in original value" );
 
 				// Cleanup
 				ul.remove();
-				clock.tick( 10 );
+				clock.tick( fxInterval );
 
 		} );
 
-		clock.tick( 10 );
+		clock.tick( fxInterval );
 } );
 
 QUnit.test( "Respect display value on inline elements (trac-14824)", function( assert ) {
@@ -2359,7 +2339,7 @@ QUnit.test( "Respect display value on inline elements (trac-14824)", function( a
 		} );
 	} );
 
-	clock.tick( 800 );
+	clock.tick( 800 + fxInterval * 2 );
 } );
 
 QUnit.test( "jQuery.easing._default (gh-2218)", function( assert ) {
@@ -2383,7 +2363,7 @@ jQuery( "#foo" )
 		} )
 		.stop();
 
-	this.clock.tick( 25 );
+	this.clock.tick( 10 + fxInterval );
 } );
 
 QUnit.test( "jQuery.easing._default in Animation (gh-2218", function( assert ) {
@@ -2411,7 +2391,7 @@ 	jQuery.easing.custom = function( p ) {
 		delete jQuery.easing.custom;
 	} );
 
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 } );
 
 QUnit.test( "jQuery.easing._default in Tween (gh-2218)", function( assert ) {
@@ -2464,7 +2444,7 @@ QUnit.test( "Show/hide/toggle and display: inline", function( assert ) {
 
 	jQuery( "<span></span><div style='display:inline' title='inline div'></div>" ).each( function() {
 		var completed, interrupted,
-			N = 100,
+			N = fxInterval * 10,
 			fixture = jQuery( "#qunit-fixture" ),
 			$el = jQuery( this ),
 			kind = this.title || this.nodeName.toLowerCase();
@@ -2530,7 +2510,7 @@ function testEasing( assert, speed, easing, complete ) {
 	assert.expect( 4 );
 	var options = jQuery.speed( speed, easing, complete );
 
-	assert.equal( options.duration, 10, "Duration set properly" );
+	assert.equal( options.duration, fxInterval, "Duration set properly" );
 	assert.equal(
 		typeof options.easing === "function" ? options.easing() : options.easing,
 		"linear",
@@ -2541,7 +2521,7 @@ function testEasing( assert, speed, easing, complete ) {
 }
 
 QUnit.test( "jQuery.speed( speed, easing, complete )", function( assert ) {
-	testEasing( assert, 10, "linear", function() {
+	testEasing( assert, fxInterval, "linear", function() {
 		assert.ok( true, "Complete called" );
 	} );
 } );
@@ -2549,7 +2529,7 @@ testEasing( assert, 10, "linear", function() {
 QUnit.test( "jQuery.speed( speed, easing, complete ) - with easing function", function( assert ) {
 	testEasing(
 		assert,
-		10,
+		fxInterval,
 		function() {
 			return "linear";
 		},
@@ -2561,7 +2541,7 @@ testEasing(
 
 QUnit.test( "jQuery.speed( options )", function( assert ) {
 	testEasing( assert, {
-		duration: 10,
+		duration: fxInterval,
 		easing: "linear",
 		complete: function() {
 			assert.ok( true, "Complete called" );
@@ -2571,7 +2551,7 @@ testEasing( assert, {
 
 QUnit.test( "jQuery.speed( options ) - with easing function", function( assert ) {
 	testEasing( assert, {
-		duration: 10,
+		duration: fxInterval,
 		easing: function() {
 			return "linear";
 		},
diff --git a/a.js b/b.js
index 93679787..1c5bdc7c 100644
--- a/a.js
+++ b/b.js
@@ -11,15 +11,12 @@
 	beforeEach: function() {
 		this.sandbox = sinon.createSandbox();
 		this.clock = this.sandbox.useFakeTimers( 505877050 );
-		this._oldInterval = jQuery.fx.interval;
 		window.requestAnimationFrame = null;
 		jQuery.fx.step = {};
-		jQuery.fx.interval = 10;
 	},
 	afterEach: function() {
 		this.sandbox.restore();
 		jQuery.fx.stop();
-		jQuery.fx.interval = this._oldInterval;
 		window.requestAnimationFrame = oldRaf;
 		return moduleTeardown.apply( this, arguments );
 	}
diff --git a/a.js b/b.js
index 115d3117..d7e935a3 100644
--- a/a.js
+++ b/b.js
@@ -1456,7 +1456,13 @@ QUnit.test( "jQuery.parseXML", function( assert ) {
 	column = columnMatch && columnMatch[ 1 ];
 
 	assert.strictEqual( line, "1", "reports error line" );
-	assert.strictEqual( column, "11", "reports error column" );
+
+	// Support: Firefox 96-97+
+	// Newer Firefox may report the column number smaller by 2 than it should.
+	// Accept both values until the issue is fixed.
+	// See https://bugzilla.mozilla.org/show_bug.cgi?id=1751796
+	assert.ok( [ "9", "11" ].indexOf( column ) > -1, "reports error column" );
+	// assert.strictEqual( column, "11", "reports error column" );
 } );
 
 testIframe(
diff --git a/a.js b/b.js
index 796fbcc8..5e64ea2a 100644
--- a/a.js
+++ b/b.js
@@ -20,8 +20,7 @@ function classesToArray( value ) {
 
 jQuery.fn.extend( {
 	addClass: function( value ) {
-		var classes, elem, cur, curValue, clazz, j, finalValue,
-			i = 0;
+		var classNames, cur, curValue, className, i, finalValue;
 
 		if ( typeof value === "function" ) {
 			return this.each( function( j ) {
@@ -29,36 +28,35 @@ addClass: function( value ) {
 			} );
 		}
 
-		classes = classesToArray( value );
+		classNames = classesToArray( value );
 
-		if ( classes.length ) {
-			while ( ( elem = this[ i++ ] ) ) {
-				curValue = getClass( elem );
-				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );
+		if ( classNames.length ) {
+			return this.each( function() {
+				curValue = getClass( this );
+				cur = this.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );
 
 				if ( cur ) {
-					j = 0;
-					while ( ( clazz = classes[ j++ ] ) ) {
-						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
-							cur += clazz + " ";
+					for ( i = 0; i < classNames.length; i++ ) {
+						className = classNames[ i ];
+						if ( cur.indexOf( " " + className + " " ) < 0 ) {
+							cur += className + " ";
 						}
 					}
 
 					// Only assign if different to avoid unneeded rendering.
 					finalValue = stripAndCollapse( cur );
 					if ( curValue !== finalValue ) {
-						elem.setAttribute( "class", finalValue );
+						this.setAttribute( "class", finalValue );
 					}
 				}
-			}
+			} );
 		}
 
 		return this;
 	},
 
 	removeClass: function( value ) {
-		var classes, elem, cur, curValue, clazz, j, finalValue,
-			i = 0;
+		var classNames, cur, curValue, className, i, finalValue;
 
 		if ( typeof value === "function" ) {
 			return this.each( function( j ) {
@@ -70,38 +68,40 @@ removeClass: function( value ) {
 			return this.attr( "class", "" );
 		}
 
-		classes = classesToArray( value );
+		classNames = classesToArray( value );
 
-		if ( classes.length ) {
-			while ( ( elem = this[ i++ ] ) ) {
-				curValue = getClass( elem );
+		if ( classNames.length ) {
+			return this.each( function() {
+				curValue = getClass( this );
 
 				// This expression is here for better compressibility (see addClass)
-				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );
+				cur = this.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );
 
 				if ( cur ) {
-					j = 0;
-					while ( ( clazz = classes[ j++ ] ) ) {
+					for ( i = 0; i < classNames.length; i++ ) {
+						className = classNames[ i ];
 
 						// Remove *all* instances
-						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
-							cur = cur.replace( " " + clazz + " ", " " );
+						while ( cur.indexOf( " " + className + " " ) > -1 ) {
+							cur = cur.replace( " " + className + " ", " " );
 						}
 					}
 
 					// Only assign if different to avoid unneeded rendering.
 					finalValue = stripAndCollapse( cur );
 					if ( curValue !== finalValue ) {
-						elem.setAttribute( "class", finalValue );
+						this.setAttribute( "class", finalValue );
 					}
 				}
-			}
+			} );
 		}
 
 		return this;
 	},
 
 	toggleClass: function( value, stateVal ) {
+		var classNames, className, i, self;
+
 		if ( typeof value === "function" ) {
 			return this.each( function( i ) {
 				jQuery( this ).toggleClass(
@@ -115,24 +115,28 @@ toggleClass: function( value, stateVal ) {
 			return stateVal ? this.addClass( value ) : this.removeClass( value );
 		}
 
-		return this.each( function() {
-			var className, i, self, classNames;
+		classNames = classesToArray( value );
 
-			// Toggle individual class names
-			i = 0;
-			self = jQuery( this );
-			classNames = classesToArray( value );
+		if ( classNames.length ) {
+			return this.each( function() {
 
-			while ( ( className = classNames[ i++ ] ) ) {
+				// Toggle individual class names
+				self = jQuery( this );
 
-				// Check each className given, space separated list
-				if ( self.hasClass( className ) ) {
-					self.removeClass( className );
-				} else {
-					self.addClass( className );
+				for ( i = 0; i < classNames.length; i++ ) {
+					className = classNames[ i ];
+
+					// Check each className given, space separated list
+					if ( self.hasClass( className ) ) {
+						self.removeClass( className );
+					} else {
+						self.addClass( className );
+					}
 				}
-			}
-		} );
+			} );
+		}
+
+		return this;
 	},
 
 	hasClass: function( selector ) {
diff --git a/a.js b/b.js
index 98fae06c..5f2418c7 100644
--- a/a.js
+++ b/b.js
@@ -1644,6 +1644,44 @@ QUnit.test( "addClass, removeClass, hasClass on elements with classes with non-H
 	testMatches();
 } );
 
+( function() {
+	var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;
+
+	function expectClasses( assert, elem, classes ) {
+		var actualClassesSorted = ( elem.attr( "class" ).match( rnothtmlwhite ) || [] )
+			.sort().join( " " );
+		var classesSorted = classes.slice()
+			.sort().join( " " );
+		assert.equal( actualClassesSorted, classesSorted, "Expected classes present" );
+	}
+
+	QUnit.test( "addClass on arrays with falsy elements (gh-4998)", function( assert ) {
+		assert.expect( 3 );
+
+		var elem = jQuery( "<div class='a'></div>" );
+
+		elem.addClass( [ "b", "", "c" ] );
+		expectClasses( assert, elem, [ "a", "b", "c" ] );
+		elem.addClass( [ "", "d" ] );
+		expectClasses( assert, elem, [ "a", "b", "c", "d" ] );
+		elem.addClass( [ "e", "" ] );
+		expectClasses( assert, elem, [ "a", "b", "c", "d", "e" ] );
+	} );
+
+	QUnit.test( "removeClass on arrays with falsy elements (gh-4998)", function( assert ) {
+		assert.expect( 3 );
+
+		var elem = jQuery( "<div class='a b c d e'></div>" );
+
+		elem.removeClass( [ "e", "" ] );
+		expectClasses( assert, elem, [ "a", "b", "c", "d" ] );
+		elem.removeClass( [ "", "d" ] );
+		expectClasses( assert, elem, [ "a", "b", "c" ] );
+		elem.removeClass( [ "b", "", "c" ] );
+		expectClasses( assert, elem, [ "a" ] );
+	} );
+} )();
+
 QUnit.test( "contents().hasClass() returns correct values", function( assert ) {
 	assert.expect( 2 );
 
diff --git a/a.js b/b.js
index 127cc706..e9438485 100644
--- a/a.js
+++ b/b.js
@@ -1,6 +1,7 @@
 import jQuery from "../core.js";
 import document from "../var/document.js";
 import sort from "../var/sort.js";
+import splice from "../var/splice.js";
 
 var hasDuplicate;
 
@@ -80,7 +81,7 @@ jQuery.uniqueSort = function( results ) {
 			}
 		}
 		while ( j-- ) {
-			results.splice( duplicates[ j ], 1 );
+			splice.call( results, duplicates[ j ], 1 );
 		}
 	}
 
diff --git a/a.js b/b.js
index 6cf288c1..2b0c251c 100644
--- a/a.js
+++ b/b.js
@@ -1895,9 +1895,7 @@ QUnit.test( "jQuery.uniqueSort", function( assert ) {
 		}
 	}
 	Arrayish.prototype = {
-		slice: [].slice,
-		sort: [].sort,
-		splice: [].splice
+		sliceForTestOnly: [].slice
 	};
 
 	var i, tests,
@@ -1959,8 +1957,12 @@ QUnit.test( "jQuery.uniqueSort", function( assert ) {
 
 	jQuery.each( tests, function( label, test ) {
 		var length = test.length || test.input.length;
-		assert.deepEqual( jQuery.uniqueSort( test.input ).slice( 0, length ), test.expected, label + " (array)" );
-		assert.deepEqual( jQuery.uniqueSort( new Arrayish( test.input ) ).slice( 0, length ), test.expected, label + " (quasi-array)" );
+		// We duplicate `test.input` because otherwise it is modified by `uniqueSort`
+		// and the second test becomes worthless.
+		assert.deepEqual( jQuery.uniqueSort( test.input.slice( 0 ) ).slice( 0, length ),
+			test.expected, label + " (array)" );
+		assert.deepEqual( jQuery.uniqueSort( new Arrayish( test.input ) ).sliceForTestOnly( 0, length ),
+			test.expected, label + " (quasi-array)" );
 	} );
 } );
 
diff --git a/a.js b/b.js
index 39fb95be..d06ce997 100644
--- a/a.js
+++ b/b.js
@@ -2770,8 +2770,8 @@ QUnit.test( "jQuery.fn.load( URL_SELECTOR with spaces )", function( assert ) {
 	} );
 
 	// Selector should be trimmed to avoid leading spaces (trac-14773)
-	// Selector should include any valid non-HTML whitespace (trac-3003)
-	QUnit.test( "jQuery.fn.load( URL_SELECTOR with non-HTML whitespace(trac-3003) )", function( assert ) {
+	// Selector should include any valid non-HTML whitespace (gh-3003)
+	QUnit.test( "jQuery.fn.load( URL_SELECTOR with non-HTML whitespace(gh-3003) )", function( assert ) {
 		assert.expect( 1 );
 		var done = assert.async();
 		jQuery( "#first" ).load( baseURL + "test3.html   #whitespace\\\\xA0 ", function() {
diff --git a/a.js b/b.js
index fc40dd95..d7e935a3 100644
--- a/a.js
+++ b/b.js
@@ -817,7 +817,7 @@ 	callback = function( v, k ) {
 		result = jQuery.map( Array( 300000 ), function( v, k ) {
 			return k;
 		} );
-		assert.equal( result.length, 300000, "Able to map 300000 records without any problems (trac-4320)" );
+		assert.equal( result.length, 300000, "Able to map 300000 records without any problems (gh-4320)" );
 	} else {
 		assert.ok( "skip", "Array#flat isn't supported in IE" );
 	}
@@ -1456,7 +1456,13 @@ QUnit.test( "jQuery.parseXML", function( assert ) {
 	column = columnMatch && columnMatch[ 1 ];
 
 	assert.strictEqual( line, "1", "reports error line" );
-	assert.strictEqual( column, "11", "reports error column" );
+
+	// Support: Firefox 96-97+
+	// Newer Firefox may report the column number smaller by 2 than it should.
+	// Accept both values until the issue is fixed.
+	// See https://bugzilla.mozilla.org/show_bug.cgi?id=1751796
+	assert.ok( [ "9", "11" ].indexOf( column ) > -1, "reports error column" );
+	// assert.strictEqual( column, "11", "reports error column" );
 } );
 
 testIframe(
diff --git a/a.js b/b.js
index 0c1e43de..1c207e9f 100644
--- a/a.js
+++ b/b.js
@@ -1182,7 +1182,7 @@ QUnit.test( "percentage properties for left and top should be transformed to pix
 	} );
 }
 
-QUnit.test( "Do not append px (trac-9548, trac-12990, trac-2792)", function( assert ) {
+QUnit.test( "Do not append px (trac-9548, trac-12990, gh-2792)", function( assert ) {
 	assert.expect( 4 );
 
 	var $div = jQuery( "<div>" ).appendTo( "#qunit-fixture" );
diff --git a/a.js b/b.js
index 49a3500a..2a7db814 100644
--- a/a.js
+++ b/b.js
@@ -290,7 +290,7 @@ QUnit.test( "data-* attributes", function( assert ) {
 
 	child.appendTo( "#qunit-fixture" );
 	assert.equal( child.data( "myobj" ), "old data", "Value accessed from data-* attribute" );
-	assert.equal( child.data( "foo-42" ), "boosh", "camelCasing does not affect numbers (trac-1751)" );
+	assert.equal( child.data( "foo-42" ), "boosh", "camelCasing does not affect numbers (gh-1751)" );
 
 	child.data( "myobj", "replaced" );
 	assert.equal( child.data( "myobj" ), "replaced", "Original data overwritten" );
diff --git a/a.js b/b.js
index a4c91b33..245e75d4 100644
--- a/a.js
+++ b/b.js
@@ -5,7 +5,8 @@
 	return;
 }
 
-var oldRaf = window.requestAnimationFrame,
+var fxInterval = 13,
+	oldRaf = window.requestAnimationFrame,
 	hideOptions = {
 		inline: function() { jQuery.style( this, "display", "none" ); },
 		cascade: function() { this.className = "hidden"; }
@@ -15,15 +16,12 @@
 	beforeEach: function() {
 		this.sandbox = sinon.createSandbox();
 		this.clock = this.sandbox.useFakeTimers( 505877050 );
-		this._oldInterval = jQuery.fx.interval;
 		window.requestAnimationFrame = null;
 		jQuery.fx.step = {};
-		jQuery.fx.interval = 10;
 	},
 	afterEach: function() {
 		this.sandbox.restore();
 		jQuery.fx.stop();
-		jQuery.fx.interval = this._oldInterval;
 		window.requestAnimationFrame = oldRaf;
 		return moduleTeardown.apply( this, arguments );
 	}
@@ -160,9 +158,9 @@ QUnit.test( "show(Number) - " + type + " hidden", function( assert ) {
 		};
 
 		jQuery.each( test, function( selector ) {
-			jQuery( selector, "#show-tests" ).show( 100 );
+			jQuery( selector, "#show-tests" ).show( fxInterval * 10 );
 		} );
-		this.clock.tick( 50 );
+		this.clock.tick( fxInterval * 5 );
 		jQuery.each( test, function( selector, expected ) {
 			jQuery( selector, "#show-tests" ).each( function() {
 				assert.equal(
@@ -172,7 +170,7 @@ QUnit.test( "show(Number) - " + type + " hidden", function( assert ) {
 				);
 			} );
 		} );
-		this.clock.tick( 50 );
+		this.clock.tick( fxInterval * 5 );
 		jQuery.each( test, function( selector, expected ) {
 			jQuery( selector, "#show-tests" ).each( function() {
 				assert.equal( jQuery( this ).css( "display" ), expected,
@@ -203,17 +201,17 @@ QUnit.test( "Persist correct display value - " + type + " hidden", function( ass
 
 		$span.hide();
 
-		$span.fadeIn( 100, function() {
+		$span.fadeIn( fxInterval * 10, function() {
 			assert.equal( $span.css( "display" ), display, "Expecting display: " + display );
-			$span.fadeOut( 100, function() {
+			$span.fadeOut( fxInterval * 10, function() {
 				assert.equal( $span.css( "display" ), displayNone, "Expecting display: " + displayNone );
-				$span.fadeIn( 100, function() {
+				$span.fadeIn( fxInterval * 10, function() {
 					assert.equal( $span.css( "display" ), display, "Expecting display: " + display );
 				} );
 			} );
 		} );
 
-		clock.tick( 300 );
+		clock.tick( fxInterval * 30 );
 	} );
 
 	// Support: IE 11+
@@ -235,17 +233,17 @@ QUnit.test( "Persist correct display value - " + type + " hidden", function( ass
 		var display = "inline";
 		var clock = this.clock;
 
-		$shadowChild.fadeIn( 100, function() {
+		$shadowChild.fadeIn( fxInterval * 10, function() {
 			assert.equal( $shadowChild.css( "display" ), display, "Expecting shadow display: " + display );
-			$shadowChild.fadeOut( 100, function() {
+			$shadowChild.fadeOut( fxInterval * 10, function() {
 				assert.equal( $shadowChild.css( "display" ), displayNone, "Expecting shadow display: " + displayNone );
-				$shadowChild.fadeIn( 100, function() {
+				$shadowChild.fadeIn( fxInterval * 10, function() {
 					assert.equal( $shadowChild.css( "display" ), display, "Expecting shadow display: " + display );
 				} );
 			} );
 		} );
 
-		clock.tick( 300 );
+		clock.tick( fxInterval * 30 );
 	} );
 } );
 
@@ -284,7 +282,7 @@ QUnit.test( "animate relative values", function( assert ) {
 				baseScale = elem[ 0 ].offsetHeight / value,
 				adjustScale = elem[ 0 ].offsetWidth / value;
 
-			elem.css( "width", base ).animate( adjust, 100, function() {
+			elem.css( "width", base ).animate( adjust, fxInterval * 10, function() {
 				assert.equal( this.offsetHeight, value * baseScale + 2 * adjustScale,
 					baseUnit + "+=" + adjustUnit );
 				assert.equal( this.offsetWidth, value * baseScale - 2 * adjustScale,
@@ -292,52 +290,52 @@ QUnit.test( "animate relative values", function( assert ) {
 
 			} );
 
-			clock.tick( 100 );
+			clock.tick( fxInterval * 10 );
 		} );
 	} );
 } );
 
 QUnit.test( "animate negative height", function( assert ) {
 	assert.expect( 1 );
-	jQuery( "#foo" ).animate( { height: -100 }, 100, function() {
+	jQuery( "#foo" ).animate( { height: -100 }, fxInterval * 10, function() {
 		assert.equal( this.offsetHeight, 0, "Verify height." );
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "animate negative margin", function( assert ) {
 	assert.expect( 1 );
-	jQuery( "#foo" ).animate( { "marginTop": -100 }, 100, function() {
+	jQuery( "#foo" ).animate( { "marginTop": -100 }, fxInterval * 10, function() {
 		assert.equal( jQuery( this ).css( "marginTop" ), "-100px", "Verify margin." );
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "animate negative margin with px", function( assert ) {
 	assert.expect( 1 );
-	jQuery( "#foo" ).animate( { marginTop: "-100px" }, 100, function() {
+	jQuery( "#foo" ).animate( { marginTop: "-100px" }, fxInterval * 10, function() {
 		assert.equal( jQuery( this ).css( "marginTop" ), "-100px", "Verify margin." );
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "animate negative padding", function( assert ) {
 	assert.expect( 1 );
-	jQuery( "#foo" ).animate( { "paddingBottom": -100 }, 100, function() {
+	jQuery( "#foo" ).animate( { "paddingBottom": -100 }, fxInterval * 10, function() {
 		assert.equal( jQuery( this ).css( "paddingBottom" ), "0px", "Verify paddingBottom." );
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "animate block as inline width/height", function( assert ) {
 	assert.expect( 3 );
 
-	jQuery( "#foo" ).css( { display: "inline", width: "", height: "" } ).animate( { width: 42, height: 42 }, 100, function() {
+	jQuery( "#foo" ).css( { display: "inline", width: "", height: "" } ).animate( { width: 42, height: 42 }, fxInterval * 10, function() {
 		assert.equal( jQuery( this ).css( "display" ), "inline-block", "inline-block was set on non-floated inline element when animating width/height" );
 		assert.equal( this.offsetWidth, 42, "width was animated" );
 		assert.equal( this.offsetHeight, 42, "height was animated" );
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "animate native inline width/height", function( assert ) {
@@ -346,12 +344,12 @@ QUnit.test( "animate native inline width/height", function( assert ) {
 	jQuery( "#foo" ).css( { display: "", width: "", height: "" } )
 		.append( "<span>text</span>" )
 		.children( "span" )
-			.animate( { width: 42, height: 42 }, 100, function() {
+			.animate( { width: 42, height: 42 }, fxInterval * 10, function() {
 				assert.equal( jQuery( this ).css( "display" ), "inline-block", "inline-block was set on non-floated inline element when animating width/height" );
 				assert.equal( this.offsetWidth, 42, "width was animated" );
 				assert.equal( this.offsetHeight, 42, "height was animated" );
 			} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "animate block width/height", function( assert ) {
@@ -366,7 +364,7 @@ jQuery( "<div>" ).appendTo( "#qunit-fixture" ).css( {
 		width: 42,
 		height: 42
 	}, {
-		duration: 100,
+		duration: fxInterval * 10,
 		step: function() {
 			if ( jQuery( this ).width() > 42 ) {
 				assert.ok( false, "width was incorrectly augmented during animation" );
@@ -378,16 +376,16 @@ jQuery( "<div>" ).appendTo( "#qunit-fixture" ).css( {
 			assert.equal( jQuery( this ).height(), 42, "height was animated" );
 		}
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "animate table width/height", function( assert ) {
 	assert.expect( 1 );
 
-	jQuery( "#table" ).animate( { width: 42, height: 42 }, 100, function() {
+	jQuery( "#table" ).animate( { width: 42, height: 42 }, fxInterval * 10, function() {
 		assert.equal( jQuery( this ).css( "display" ), "table", "display mode is correct" );
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "animate table-row width/height", function( assert ) {
@@ -397,12 +395,12 @@ QUnit.test( "animate table-row width/height", function( assert ) {
 			.html( "<tr style='height:42px;'><td style='padding:0;'><div style='width:20px;height:20px;'></div></td></tr>" )
 			.find( "tr" );
 
-	tr.animate( { width: 10, height: 10 }, 100, function() {
+	tr.animate( { width: 10, height: 10 }, fxInterval * 10, function() {
 		assert.equal( jQuery( this ).css( "display" ), "table-row", "display mode is correct" );
 		assert.equal( this.offsetWidth, 20, "width animated to shrink wrap point" );
 		assert.equal( this.offsetHeight, 20, "height animated to shrink wrap point" );
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "animate table-cell width/height", function( assert ) {
@@ -413,12 +411,12 @@ QUnit.test( "animate table-cell width/height", function( assert ) {
 			.html( "<tr><td style='width:42px;height:42px;padding:0;'><div style='width:20px;height:20px;'></div></td></tr>" )
 			.find( "td" );
 
-	td.animate( { width: 10, height: 10 }, 100, function() {
+	td.animate( { width: 10, height: 10 }, fxInterval * 10, function() {
 		assert.equal( jQuery( this ).css( "display" ), "table-cell", "display mode is correct" );
 		assert.equal( this.offsetWidth, 20, "width animated to shrink wrap point" );
 		assert.equal( this.offsetHeight, 20, "height animated to shrink wrap point" );
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "animate percentage(%) on width/height", function( assert ) {
@@ -427,46 +425,25 @@ QUnit.test( "animate percentage(%) on width/height", function( assert ) {
 	var $div = jQuery( "<div style='position:absolute;top:-999px;left:-999px;width:60px;height:60px;'><div style='width:50%;height:50%;'></div></div>" )
 		.appendTo( "#qunit-fixture" ).children( "div" );
 
-	$div.animate( { width: "25%", height: "25%" }, 13, function() {
+	$div.animate( { width: "25%", height: "25%" }, fxInterval, function() {
 		var $this = jQuery( this );
 		assert.equal( $this.css( "width" ), "15px", "Width was animated to 15px rather than 25px" );
 		assert.equal( $this.css( "height" ), "15px", "Height was animated to 15px rather than 25px" );
 	} );
-	this.clock.tick( 20 );
+	this.clock.tick( fxInterval * 1.5 );
 } );
 
 QUnit.test( "animate resets overflow-x and overflow-y when finished", function( assert ) {
 	assert.expect( 2 );
 	jQuery( "#foo" )
 		.css( { display: "block", width: 20, height: 20, overflowX: "visible", overflowY: "auto" } )
-		.animate( { width: 42, height: 42 }, 100, function() {
+		.animate( { width: 42, height: 42 }, fxInterval * 10, function() {
 			assert.equal( this.style.overflowX, "visible", "overflow-x is visible" );
 			assert.equal( this.style.overflowY, "auto", "overflow-y is auto" );
 		} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
-/* // This test ends up being flaky depending upon the CPU load
-QUnit.test("animate option (queue === false)", function( assert ) {
-	var done = assert.async();
-	assert.expect(1);
-
-	var order = [];
-
-	var $foo = jQuery("#foo");
-	$foo.animate({width:"100px"}, 3000, function () {
-		// should finish after unqueued animation so second
-		order.push(2);
-		assert.deepEqual( order, [ 1, 2 ], "Animations finished in the correct order" );
-		done();
-	});
-	$foo.animate({fontSize:"2em"}, {queue:false, duration:10, complete:function () {
-		// short duration and out of queue so should finish first
-		order.push(1);
-	}});
-});
-*/
-
 QUnit.test( "animate option { queue: false }", function( assert ) {
 	assert.expect( 2 );
 	var foo = jQuery( "#foo" );
@@ -475,12 +452,12 @@ QUnit.test( "animate option { queue: false }", function( assert ) {
 		fontSize: "2em"
 	}, {
 		queue: false,
-		duration: 10,
+		duration: fxInterval,
 		complete: function() {
 			assert.ok( true, "Animation Completed" );
 		}
 	} );
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 
 	assert.equal( foo.queue().length, 0, "Queue is empty" );
 } );
@@ -493,7 +470,7 @@ QUnit.test( "animate option { queue: true }", function( assert ) {
 		fontSize: "2em"
 	}, {
 		queue: true,
-		duration: 10,
+		duration: fxInterval,
 		complete: function() {
 			assert.ok( true, "Animation Completed" );
 		}
@@ -502,7 +479,7 @@ QUnit.test( "animate option { queue: true }", function( assert ) {
 	assert.notEqual( foo.queue().length, 0, "Default queue is not empty" );
 
 	//clear out existing timers before next test
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 } );
 
 QUnit.test( "animate option { queue: 'name' }", function( assert ) {
@@ -533,7 +510,7 @@ QUnit.test( "animate option { queue: 'name' }", function( assert ) {
 	assert.equal( foo.queue( "name" ).length, 2, "Queue length of 'name' queue" );
 
 	foo.dequeue( "name" );
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 
 } );
 
@@ -553,10 +530,10 @@ QUnit.test( "animate with no properties", function( assert ) {
 	foo = jQuery( "#foo" );
 
 	foo.animate( {} );
-	foo.animate( { top: 10 }, 100, function() {
+	foo.animate( { top: 10 }, fxInterval * 10, function() {
 		assert.ok( true, "Animation was properly dequeued." );
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "animate duration 0", function( assert ) {
@@ -589,13 +566,13 @@ QUnit.test( "animate duration 0", function( assert ) {
 		assert.ok( true, "Animate a third simple property." );
 		counter++;
 	} );
-	$elems.eq( 1 ).animate( { a:3 }, 200, function() {
+	$elems.eq( 1 ).animate( { a:3 }, fxInterval * 20, function() {
 		counter++;
 
 		// Failed until [6115]
 		assert.equal( counter, 5, "One synchronic and one asynchronic" );
 	} );
-	this.clock.tick( 200 );
+	this.clock.tick( fxInterval * 20 );
 
 	$elem = jQuery( "<div></div>" );
 	$elem.show( 0, function() {
@@ -614,12 +591,12 @@ QUnit.test( "animate hyphenated properties", function( assert ) {
 
 	jQuery( "#foo" )
 		.css( "font-size", 10 )
-		.animate( { "font-size": 20 }, 200, function() {
+		.animate( { "font-size": 20 }, fxInterval * 20, function() {
 			assert.equal( this.style.fontSize, "20px", "The font-size property was animated." );
 		} );
 
 	// FIXME why is this double only when run with other tests
-	this.clock.tick( 400 );
+	this.clock.tick( fxInterval * 40 );
 
 } );
 
@@ -628,10 +605,10 @@ QUnit.test( "animate non-element", function( assert ) {
 
 	var obj = { test: 0 };
 
-	jQuery( obj ).animate( { test: 200 }, 200, function() {
+	jQuery( obj ).animate( { test: 200 }, fxInterval * 20, function() {
 		assert.equal( obj.test, 200, "The custom property should be modified." );
 	} );
-	this.clock.tick( 200 );
+	this.clock.tick( fxInterval * 20 );
 } );
 
 QUnit.test( "animate non-element's zIndex without appending \"px\"", function( assert ) {
@@ -639,10 +616,10 @@ QUnit.test( "animate non-element's zIndex without appending \"px\"", function( a
 
 	var obj = { zIndex: 0 };
 
-	jQuery( obj ).animate( { zIndex: 200 }, 200, function() {
+	jQuery( obj ).animate( { zIndex: 200 }, fxInterval * 20, function() {
 		assert.equal( obj.zIndex, 200, "The custom property should be modified without appending \"px\"." );
 	} );
-	this.clock.tick( 200 );
+	this.clock.tick( fxInterval * 20 );
 } );
 
 QUnit.test( "stop()", function( assert ) {
@@ -654,9 +631,9 @@ QUnit.test( "stop()", function( assert ) {
 		nw;
 
 	$foo.hide().css( "width", 200 )
-		.animate( { "width": "show" }, 1500 );
+		.animate( { "width": "show" }, fxInterval * 150 );
 
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 	nw = $foo.css( "width" );
 	assert.notEqual( parseFloat( nw ), w, "An animation occurred " + nw + " " + w + "px" );
 	$foo.stop();
@@ -664,7 +641,7 @@ QUnit.test( "stop()", function( assert ) {
 	nw = $foo.css( "width" );
 	assert.notEqual( parseFloat( nw ), w, "Stop didn't reset the animation " + nw + " " + w + "px" );
 
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 
 	$foo.removeData();
 	$foo.removeData( undefined, true );
@@ -672,17 +649,17 @@ QUnit.test( "stop()", function( assert ) {
 
 	$one = jQuery( "#fadein" );
 	$two = jQuery( "#show" );
-	$one.fadeTo( 100, 0, function() {
+	$one.fadeTo( fxInterval * 10, 0, function() {
 		$one.stop();
 	} );
-	this.clock.tick( 100 );
-	$two.fadeTo( 100, 0, function() {
+	this.clock.tick( fxInterval * 10 );
+	$two.fadeTo( fxInterval * 10, 0, function() {
 		assert.equal( $two.css( "opacity" ), "0", "Stop does not interfere with animations on other elements (trac-6641)" );
 
 		// Reset styles
 		$one.add( $two ).css( "opacity", "" );
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "stop() - several in queue", function( assert ) {
@@ -721,12 +698,12 @@ QUnit.test( "stop(clearQueue)", function( assert ) {
 	var $foo = jQuery( "#foo" ),
 		w = 0,
 		nw;
-	$foo.hide().css( "width", 200 ).css( "width" );
+	$foo.hide().css( "width", fxInterval * 20 ).css( "width" );
 
-	$foo.animate( { "width": "show" }, 1000 );
-	$foo.animate( { "width": "hide" }, 1000 );
-	$foo.animate( { "width": "show" }, 1000 );
-	this.clock.tick( 100 );
+	$foo.animate( { "width": "show" }, fxInterval * 100 );
+	$foo.animate( { "width": "hide" }, fxInterval * 100 );
+	$foo.animate( { "width": "show" }, fxInterval * 100 );
+	this.clock.tick( fxInterval * 10 );
 	nw = $foo.css( "width" );
 	assert.ok( parseFloat( nw ) !== w, "An animation occurred " + nw + " " + w + "px" );
 	$foo.stop( true );
@@ -735,7 +712,7 @@ QUnit.test( "stop(clearQueue)", function( assert ) {
 	assert.ok( parseFloat( nw ) !== w, "Stop didn't reset the animation " + nw + " " + w + "px" );
 
 	assert.equal( $foo.queue().length, 0, "The animation queue was cleared" );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 	assert.equal( nw, $foo.css( "width" ), "The animation didn't continue" );
 } );
 
@@ -745,13 +722,13 @@ QUnit.test( "stop(clearQueue, gotoEnd)", function( assert ) {
 	var $foo = jQuery( "#foo" ),
 		w = 0,
 		nw;
-	$foo.hide().css( "width", 200 ).css( "width" );
+	$foo.hide().css( "width", fxInterval * 20 ).css( "width" );
 
-	$foo.animate( { width: "show" }, 1000 );
-	$foo.animate( { width: "hide" }, 1000 );
-	$foo.animate( { width: "show" }, 1000 );
-	$foo.animate( { width: "hide" }, 1000 );
-	this.clock.tick( 100 );
+	$foo.animate( { width: "show" }, fxInterval * 100 );
+	$foo.animate( { width: "hide" }, fxInterval * 100 );
+	$foo.animate( { width: "show" }, fxInterval * 100 );
+	$foo.animate( { width: "hide" }, fxInterval * 100 );
+	this.clock.tick( fxInterval * 10 );
 	nw = $foo.css( "width" );
 	assert.ok( parseFloat( nw ) !== w, "An animation occurred " + nw + " " + w + "px" );
 	$foo.stop( false, true );
@@ -761,7 +738,7 @@ QUnit.test( "stop(clearQueue, gotoEnd)", function( assert ) {
 	// Disabled, being flaky
 	//equal( nw, 1, "Stop() reset the animation" );
 
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 
 	// Disabled, being flaky
 	//equal( $foo.queue().length, 2, "The next animation continued" );
@@ -776,7 +753,7 @@ QUnit.test( "stop( queue, ..., ... ) - Stop single queues", function( assert ) {
 	foo.animate( {
 		width: 400
 	}, {
-		duration: 500,
+		duration: fxInterval * 50,
 		complete: function() {
 			assert.equal( parseFloat( foo.css( "width" ) ), 400, "Animation completed for standard queue" );
 			assert.equal( parseFloat( foo.css( "height" ) ), saved, "Height was not changed after the second stop" );
@@ -786,7 +763,7 @@ QUnit.test( "stop( queue, ..., ... ) - Stop single queues", function( assert ) {
 	foo.animate( {
 		height: 400
 	}, {
-		duration: 1000,
+		duration: fxInterval * 100,
 		queue: "height"
 	} ).dequeue( "height" ).stop( "height", false, true );
 
@@ -795,11 +772,11 @@ QUnit.test( "stop( queue, ..., ... ) - Stop single queues", function( assert ) {
 	foo.animate( {
 		height: 200
 	}, {
-		duration: 1000,
+		duration: fxInterval * 100,
 		queue: "height"
 	} ).dequeue( "height" ).stop( "height", false, false );
 	saved = parseFloat( foo.css( "height" ) );
-        this.clock.tick( 500 );
+	this.clock.tick( fxInterval * 50 );
 } );
 
 QUnit[ QUnit.jQuerySelectors ? "test" : "skip" ]( "toggle()", function( assert ) {
@@ -894,7 +871,7 @@ QUnit.test( "Overflow and Display", function( assert ) {
 		.before( "text before" )
 		.after( "text after" )
 		.animate( { opacity: 0.5 }, "slow", done );
-	this.clock.tick( 600 );
+	this.clock.tick( 600 + fxInterval );
 } );
 
 jQuery.each( {
@@ -985,7 +962,7 @@ QUnit.test( fn + " to " + tn, function( assert ) {
 
 			anim = { width: t_w, height: t_h, opacity: t_o };
 
-			elem.animate( anim, 50 );
+			elem.animate( anim, fxInterval * 5 );
 
 			jQuery.when( elem ).done( function( $elem ) {
 				var cur_o, cur_w, cur_h, old_h,
@@ -1055,7 +1032,7 @@ QUnit.test( fn + " to " + tn, function( assert ) {
 				jQuery( elem ).remove();
 
 			} );
-			this.clock.tick( 100 );
+			this.clock.tick( fxInterval * 10 );
 		} );
 	} );
 } );
@@ -1103,7 +1080,7 @@ 		getProps = function( el ) {
 	setup( ".fadeToggle().fadeToggle() - out", "#fadetoggleout div" ).fadeToggle( "fast" ).fadeToggle( "fast", check );
 	setup( ".fadeTo(0.5).fadeTo(1.0, easing)", "#fadeto div" ).fadeTo( "fast", 0.5 ).fadeTo( "fast", 1.0, "linear", check );
 
-    this.clock.tick( 400 );
+    this.clock.tick( 400 + fxInterval * 2 );
 } );
 
 jQuery.makeTest = function( text ) {
@@ -1131,15 +1108,14 @@ QUnit.test( "jQuery.show('fast') doesn't clear radio buttons (bug trac-1095)", f
 		assert.ok( jQuery( "input[type='checkbox']", $checkedtest ).first().attr( "checked" ), "Check first checkbox still checked." );
 		assert.ok( !jQuery( "input[type='checkbox']", $checkedtest ).last().attr( "checked" ), "Check last checkbox still NOT checked." );
 	} );
-	this.clock.tick( 200 );
+	this.clock.tick( 200 + fxInterval );
 } );
 
 QUnit.test( "interrupt toggle", function( assert ) {
 	assert.expect( 24 );
 
-	var env = this,
-		longDuration = 2000,
-		shortDuration = 500,
+	var longDuration = fxInterval * 200,
+		shortDuration = fxInterval * 50,
 		remaining = 0,
 		$elems = jQuery( ".chain-test" ),
 		clock = this.clock,
@@ -1222,7 +1198,7 @@ 	jQuery.easing._defaultTest = function( p ) {
 		return p;
 	};
 
-	jQuery( data ).animate( props, 400, "_defaultTest", function() {
+	jQuery( data ).animate( props, fxInterval * 40, "_defaultTest", function() {
 		assert.ok( test1Called, "Easing function (_test1) called" );
 		assert.ok( test2Called, "Easing function (_test2) called" );
 		assert.ok( defaultTestCalled, "Easing function (_default) called" );
@@ -1230,7 +1206,7 @@ jQuery( data ).animate( props, 400, "_defaultTest", function() {
 		assert.equal( props.b[ 1 ], "_test2", "animate does not change original props (per-property easing would be lost)" );
 	} );
 
-	this.clock.tick( 400 );
+	this.clock.tick( fxInterval * 40 );
 } );
 
 QUnit.test( "animate with CSS shorthand properties", function( assert ) {
@@ -1256,7 +1232,8 @@ 	jQuery.easing.propertyScope = function( p ) {
 	};
 
 	jQuery( "#foo" )
-		.animate( propsBasic, 200, "animationScope", function() {
+		.animate( propsBasic, fxInterval * 20,
+				"animationScope", function() {
 			assert.equal( this.style.paddingTop, "10px", "padding-top was animated" );
 			assert.equal( this.style.paddingLeft, "20px", "padding-left was animated" );
 			assert.equal( this.style.paddingRight, "20px", "padding-right was animated" );
@@ -1264,7 +1241,8 @@ jQuery( "#foo" )
 			assert.equal( easeAnimation_count, 4, "per-animation default easing called for each property" );
 			easeAnimation_count = 0;
 		} )
-		.animate( propsSpecial, 200, "animationScope", function() {
+		.animate( propsSpecial, fxInterval * 20,
+				"animationScope", function() {
 			assert.equal( this.style.paddingTop, "1px", "padding-top was animated again" );
 			assert.equal( this.style.paddingLeft, "2px", "padding-left was animated again" );
 			assert.equal( this.style.paddingRight, "2px", "padding-right was animated again" );
@@ -1276,7 +1254,7 @@ jQuery( "#foo" )
 			delete jQuery.easing.animationScope;
 			delete jQuery.easing.propertyScope;
 		} );
-		this.clock.tick( 400 );
+		this.clock.tick( fxInterval * 40 );
 } );
 
 QUnit.test( "hide hidden elements, with animation (bug trac-7141)", function( assert ) {
@@ -1302,7 +1280,7 @@ QUnit.test( "animate unit-less properties (trac-4966)", function( assert ) {
 	div.animate( { zIndex: 2 }, function() {
 		assert.equal( div.css( "z-index" ), "2", "z-index is 2" );
 	} );
-	this.clock.tick( 400 );
+	this.clock.tick( 400 + fxInterval );
 } );
 
 QUnit.test( "animate properties missing px w/ opacity as last (trac-9074)", function( assert ) {
@@ -1320,9 +1298,9 @@ QUnit.test( "animate properties missing px w/ opacity as last (trac-9074)", func
 		left: 200,
 		marginLeft: 200,
 		opacity: 0
-	}, 2000 );
+	}, fxInterval * 200 );
 
-	this.clock.tick( 500 );
+	this.clock.tick( fxInterval * 50 );
 
 	ml = cssInt( "marginLeft" );
 	l = cssInt( "left" );
@@ -1342,14 +1320,14 @@ QUnit.test( "callbacks should fire in correct order (trac-9100)", function( asse
 	jQuery( "<p data-operation='*2'></p><p data-operation='^2'></p>" ).appendTo( "#qunit-fixture" )
 
 		// The test will always pass if no properties are animated or if the duration is 0
-		.animate( { fontSize: 12 }, 13, function() {
+		.animate( { fontSize: 12 }, fxInterval, function() {
 			a *= jQuery( this ).data( "operation" ) === "*2" ? 2 : a;
 			cb++;
 			if ( cb === 2 ) {
 				assert.equal( a, 4, "test value has been *2 and _then_ ^2" );
 			}
 		} );
-	this.clock.tick( 20 );
+	this.clock.tick( fxInterval * 1.5 );
 } );
 
 QUnit.test( "callbacks that throw exceptions will be removed (trac-5684)", function( assert ) {
@@ -1421,8 +1399,8 @@ QUnit.test( "line-height animates correctly (trac-13855)", function( assert ) {
 
 	var t0,
 		clock = this.clock,
-		longDuration = 2000,
-		shortDuration = 500,
+		longDuration = fxInterval * 200,
+		shortDuration = fxInterval * 50,
 		animated = jQuery(
 			"<p style='line-height: 100;'>unitless</p>" +
 			"<p style='line-height: 5000px;'>px</p>" +
@@ -1472,11 +1450,11 @@ setTimeout( function() {
 
 				animated.stop( true, true );
 			}, shortDuration );
-clock.tick( shortDuration );
+			clock.tick( shortDuration );
 		}, shortDuration );
-clock.tick( shortDuration );
-	}, 50 );
-clock.tick( 50 );
+		clock.tick( shortDuration );
+	}, fxInterval * 5 );
+	clock.tick( fxInterval * 5 );
 } );
 
 // Start 1.8 Animation tests
@@ -1504,7 +1482,7 @@ QUnit.test( "jQuery.Animation( object, props, opts )", function( assert ) {
 			assert.deepEqual( testObject, testDest, "No unexpected properties" );
 		} );
 	} );
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 } );
 
 QUnit.test( "Animate Option: step: function( percent, tween )", function( assert ) {
@@ -1532,7 +1510,7 @@ jQuery( "#foo" ).animate( {
 		}, "Step function was called once at 0% and once at 100% for each property" );
 		next();
 	} );
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 } );
 
 QUnit.test( "Animate callbacks have correct context", function( assert ) {
@@ -1541,15 +1519,15 @@ QUnit.test( "Animate callbacks have correct context", function( assert ) {
 	var foo = jQuery( "#foo" );
 	foo.animate( {
 		height: 10
-	}, 10, function() {
+	}, fxInterval, function() {
 		assert.equal( foo[ 0 ], this, "Complete callback after stop(true) `this` is element" );
 	} ).stop( true, true );
 	foo.animate( {
 		height: 100
-	}, 10, function() {
+	}, fxInterval, function() {
 		assert.equal( foo[ 0 ], this, "Complete callback `this` is element" );
 	} );
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 } );
 
 QUnit.test( "User supplied callback called after show when fx off (trac-8892)", function( assert ) {
@@ -1571,8 +1549,7 @@ QUnit.test( "User supplied callback called after show when fx off (trac-8892)",
 QUnit.test( "animate should set display for disconnected nodes", function( assert ) {
 	assert.expect( 20 );
 
-	var env = this,
-		showMethods = {
+	var showMethods = {
 			fadeIn: [],
 			fadeTo: [ "fast", 0.5 ],
 			slideDown: [ "fast" ],
@@ -1625,7 +1602,7 @@ QUnit.test( "animate should set display for disconnected nodes", function( asser
 				"." + name + " block under fragment" );
 		} ] ) );
 	} );
-	clock.tick( 400 );
+	clock.tick( 400 + fxInterval );
 } );
 
 QUnit[ QUnit.jQuerySelectors ? "test" : "skip" ]( "Animation callback should not show animated element as :animated (trac-7157)", function( assert ) {
@@ -1635,10 +1612,10 @@ QUnit.test( "animate should set display for disconnected nodes", function( asser
 
 	foo.animate( {
 		opacity: 0
-	}, 100, function() {
+	}, fxInterval * 10, function() {
 		assert.ok( !foo.is( ":animated" ), "The element is not animated" );
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit[ QUnit.jQuerySelectors ? "test" : "skip" ]( "Initial step callback should show element as :animated (trac-14623)", function( assert ) {
@@ -1677,7 +1654,7 @@ QUnit.test( "hide called on element within hidden parent should set display to n
 
 		elems.remove();
 	} );
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 } );
 
 QUnit.test( "hide, fadeOut and slideUp called on element width height and width = 0 should set display to none", function( assert ) {
@@ -1708,7 +1685,7 @@ QUnit.test( "hide, fadeOut and slideUp called on element width height and width
 		assert.strictEqual( elems.get( 4 ).style.display, "none", "slideUp() called on element width height and width = 0 should set display to none" );
 
 	} );
-	this.clock.tick( 400 );
+	this.clock.tick( 400 + fxInterval );
 } );
 
 QUnit.test( "hide should not leave hidden inline elements visible (trac-14848)", function( assert ) {
@@ -1735,7 +1712,7 @@ QUnit.test( "Handle queue:false promises", function( assert ) {
 	foo.animate( {
 		top: 1
 	}, {
-		duration: 10,
+		duration: fxInterval,
 		queue: false,
 		complete: function() {
 			assert.ok( step++ <= 2, "Step one or two" );
@@ -1743,21 +1720,21 @@ QUnit.test( "Handle queue:false promises", function( assert ) {
 	} ).animate( {
 		bottom: 1
 	}, {
-		duration: 10,
+		duration: fxInterval,
 		complete: function() {
 			assert.ok( step > 2 && step < 5, "Step three or four" );
 			step++;
 		}
 	} );
 
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 
 	foo.promise().done( function() {
 		assert.equal( step++, 5, "steps 1-5: queue:false then queue:fx done" );
 		foo.animate( {
 			top: 10
 		}, {
-			duration: 10,
+			duration: fxInterval,
 			complete: function() {
 				assert.ok( step > 5 && step < 8, "Step six or seven" );
 				step++;
@@ -1765,7 +1742,7 @@ QUnit.test( "Handle queue:false promises", function( assert ) {
 		} ).animate( {
 			bottom: 10
 		}, {
-			duration: 10,
+			duration: fxInterval,
 			queue: false,
 			complete: function() {
 				assert.ok( step > 7 && step < 10, "Step eight or nine" );
@@ -1776,7 +1753,7 @@ QUnit.test( "Handle queue:false promises", function( assert ) {
 		} );
 
 	} );
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 } );
 
 QUnit.test( "multiple unqueued and promise", function( assert ) {
@@ -1811,7 +1788,7 @@ QUnit.test( "multiple unqueued and promise", function( assert ) {
 	} ).promise().done( function() {
 		assert.strictEqual( step++, 4, "Step 4" );
 	} );
-	this.clock.tick( 1000 );
+	this.clock.tick( 1000 + fxInterval );
 } );
 
 QUnit.test( "animate does not change start value for non-px animation (trac-7109)", function( assert ) {
@@ -1834,7 +1811,7 @@ QUnit.test( "animate does not change start value for non-px animation (trac-7109
 		next();
 		parent.remove();
 	} );
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 } );
 
 QUnit.test( "non-px animation handles non-numeric start (trac-11971)", function( assert ) {
@@ -1866,7 +1843,7 @@ QUnit.test( "non-px animation handles non-numeric start (trac-11971)", function(
 			assert.equal( jQuery.style( this, "backgroundPositionX" ), "42%", "End reached" );
 		}
 	} );
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 } );
 
 QUnit.test( "Animation callbacks (trac-11797)", function( assert ) {
@@ -1946,10 +1923,10 @@ QUnit.test( "Animation callbacks (trac-11797)", function( assert ) {
 			assert.ok( true, "async: always" );
 		}
 	} );
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 } );
 
-QUnit.test( "Animation callbacks in order (trac-2292)", function( assert ) {
+QUnit.test( "Animation callbacks in order (gh-2283)", function( assert ) {
 	assert.expect( 9 );
 
 	var done = assert.async(),
@@ -1986,7 +1963,7 @@ jQuery( "#foo" ).animate( {
 		}
 	} ).finish();
 
-	this.clock.tick( dur + 10 );
+	this.clock.tick( dur + fxInterval );
 } );
 
 QUnit.test( "Animate properly sets overflow hidden when animating width/height (trac-12117)", function( assert ) {
@@ -2096,8 +2073,8 @@ QUnit.test( "toggle state tests: " + method + " (trac-8685)", function( assert )
 			always: secondToggle
 		} );
 
-                //FIXME figure out why 470
-		this.clock.tick( 470 );
+		// FIXME figure out why 470
+		this.clock.tick( 470 + fxInterval * 2 );
 	} );
 } );
 
@@ -2291,7 +2268,10 @@ QUnit.test( ".finish() is applied correctly when multiple elements were animated
 
 	var elems = jQuery( "<a>0</a><a>1</a><a>2</a>" );
 
-	elems.animate( { opacity: 0 }, 1500 ).animate( { opacity: 1 }, 1500 );
+	elems
+		.animate( { opacity: 0 }, fxInterval * 150 )
+		.animate( { opacity: 1 }, fxInterval * 150 );
+
 	setTimeout( function() {
 		elems.eq( 1 ).finish();
 		assert.ok( !elems.eq( 1 ).queue().length, "empty queue for .finish()ed element" );
@@ -2300,7 +2280,7 @@ setTimeout( function() {
 		elems.stop( true );
 
 	}, 100 );
-	this.clock.tick( 1500 );
+	this.clock.tick( fxInterval * 150 );
 } );
 
 QUnit.test( "slideDown() after stop() (trac-13483)", function( assert ) {
@@ -2312,28 +2292,28 @@ QUnit.test( "slideDown() after stop() (trac-13483)", function( assert ) {
 			clock = this.clock;
 
         // First test. slideUp() -> stop() in the middle -> slideDown() until the end
-		ul.slideUp( 1000 );
-		clock.tick( 500 );
+		ul.slideUp( fxInterval * 100 );
+		clock.tick( fxInterval * 50 );
 		ul.stop( true );
 		ul.slideDown( 1, function() {
 				assert.equal( ul.height(), origHeight, "slideDown() after interrupting slideUp() with stop(). Height must be in original value" );
 
 				// Second test. slideDown() -> stop() in the middle -> slideDown() until the end
 				ul.slideUp( 1 );
-				clock.tick( 10 );
-				ul.slideDown( 1000 );
-				clock.tick( 500 );
+				clock.tick( fxInterval );
+				ul.slideDown( fxInterval * 100 );
+				clock.tick( fxInterval * 50 );
 				ul.stop( true );
 				ul.slideDown( 1 );
 				assert.equal( ul.height(), origHeight, "slideDown() after interrupting slideDown() with stop(). Height must be in original value" );
 
 				// Cleanup
 				ul.remove();
-				clock.tick( 10 );
+				clock.tick( fxInterval );
 
 		} );
 
-		clock.tick( 10 );
+		clock.tick( fxInterval );
 } );
 
 QUnit.test( "Respect display value on inline elements (trac-14824)", function( assert ) {
@@ -2359,7 +2339,7 @@ QUnit.test( "Respect display value on inline elements (trac-14824)", function( a
 		} );
 	} );
 
-	clock.tick( 800 );
+	clock.tick( 800 + fxInterval * 2 );
 } );
 
 QUnit.test( "jQuery.easing._default (gh-2218)", function( assert ) {
@@ -2383,7 +2363,7 @@ jQuery( "#foo" )
 		} )
 		.stop();
 
-	this.clock.tick( 25 );
+	this.clock.tick( 10 + fxInterval );
 } );
 
 QUnit.test( "jQuery.easing._default in Animation (gh-2218", function( assert ) {
@@ -2411,7 +2391,7 @@ 	jQuery.easing.custom = function( p ) {
 		delete jQuery.easing.custom;
 	} );
 
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 } );
 
 QUnit.test( "jQuery.easing._default in Tween (gh-2218)", function( assert ) {
@@ -2464,7 +2444,7 @@ QUnit.test( "Show/hide/toggle and display: inline", function( assert ) {
 
 	jQuery( "<span></span><div style='display:inline' title='inline div'></div>" ).each( function() {
 		var completed, interrupted,
-			N = 100,
+			N = fxInterval * 10,
 			fixture = jQuery( "#qunit-fixture" ),
 			$el = jQuery( this ),
 			kind = this.title || this.nodeName.toLowerCase();
@@ -2530,7 +2510,7 @@ function testEasing( assert, speed, easing, complete ) {
 	assert.expect( 4 );
 	var options = jQuery.speed( speed, easing, complete );
 
-	assert.equal( options.duration, 10, "Duration set properly" );
+	assert.equal( options.duration, fxInterval, "Duration set properly" );
 	assert.equal(
 		typeof options.easing === "function" ? options.easing() : options.easing,
 		"linear",
@@ -2541,7 +2521,7 @@ function testEasing( assert, speed, easing, complete ) {
 }
 
 QUnit.test( "jQuery.speed( speed, easing, complete )", function( assert ) {
-	testEasing( assert, 10, "linear", function() {
+	testEasing( assert, fxInterval, "linear", function() {
 		assert.ok( true, "Complete called" );
 	} );
 } );
@@ -2549,7 +2529,7 @@ testEasing( assert, 10, "linear", function() {
 QUnit.test( "jQuery.speed( speed, easing, complete ) - with easing function", function( assert ) {
 	testEasing(
 		assert,
-		10,
+		fxInterval,
 		function() {
 			return "linear";
 		},
@@ -2561,7 +2541,7 @@ testEasing(
 
 QUnit.test( "jQuery.speed( options )", function( assert ) {
 	testEasing( assert, {
-		duration: 10,
+		duration: fxInterval,
 		easing: "linear",
 		complete: function() {
 			assert.ok( true, "Complete called" );
@@ -2571,7 +2551,7 @@ testEasing( assert, {
 
 QUnit.test( "jQuery.speed( options ) - with easing function", function( assert ) {
 	testEasing( assert, {
-		duration: 10,
+		duration: fxInterval,
 		easing: function() {
 			return "linear";
 		},
diff --git a/a.js b/b.js
index a6633ec4..52e17a9e 100644
--- a/a.js
+++ b/b.js
@@ -465,7 +465,7 @@ QUnit.test( "html(String) with HTML5 (Bug trac-6485)", function( assert ) {
 	assert.equal( jQuery( "#qunit-fixture" ).children().children().children().length, 1, "Make sure nested HTML5 elements can hold children." );
 } );
 
-QUnit.test( "html(String) tag-hyphenated elements (Bug trac-1987)", function( assert ) {
+QUnit.test( "html(String) tag-hyphenated elements (Bug gh-1987)", function( assert ) {
 
 	assert.expect( 27 );
 
diff --git a/a.js b/b.js
index 0c81e486..2b0c251c 100644
--- a/a.js
+++ b/b.js
@@ -643,7 +643,7 @@ QUnit.test( "attributes - special characters", function( assert ) {
 	var attrbad;
 	var div = document.createElement( "div" );
 
-	// trac-3279
+	// trac-3729
 	div.innerHTML = "<div id='foo' xml:test='something'></div>";
 	assert.deepEqual( jQuery( "[xml\\:test]", div ).get(),
 		[ div.firstChild ],
@@ -1895,9 +1895,7 @@ QUnit.test( "jQuery.uniqueSort", function( assert ) {
 		}
 	}
 	Arrayish.prototype = {
-		slice: [].slice,
-		sort: [].sort,
-		splice: [].splice
+		sliceForTestOnly: [].slice
 	};
 
 	var i, tests,
@@ -1959,8 +1957,12 @@ QUnit.test( "jQuery.uniqueSort", function( assert ) {
 
 	jQuery.each( tests, function( label, test ) {
 		var length = test.length || test.input.length;
-		assert.deepEqual( jQuery.uniqueSort( test.input ).slice( 0, length ), test.expected, label + " (array)" );
-		assert.deepEqual( jQuery.uniqueSort( new Arrayish( test.input ) ).slice( 0, length ), test.expected, label + " (quasi-array)" );
+		// We duplicate `test.input` because otherwise it is modified by `uniqueSort`
+		// and the second test becomes worthless.
+		assert.deepEqual( jQuery.uniqueSort( test.input.slice( 0 ) ).slice( 0, length ),
+			test.expected, label + " (array)" );
+		assert.deepEqual( jQuery.uniqueSort( new Arrayish( test.input ) ).sliceForTestOnly( 0, length ),
+			test.expected, label + " (quasi-array)" );
 	} );
 } );
 
diff --git a/a.js b/b.js
index 80c97a22..ae116a43 100644
--- a/a.js
+++ b/b.js
@@ -2051,7 +2051,6 @@ dequeue: function( type ) {
 	},
 
 	// Based off of the plugin by Clint Helfers, with permission.
-	// http://blindsignals.com/index.php/2009/07/jquery-delay/
 	delay: function( time, type ) {
 		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
 		type = type || "fx";
@@ -2559,7 +2558,6 @@ prop: function( elem, name, value ) {
 			get: function( elem ) {
 
 				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
-				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
 				var attributeNode = elem.getAttributeNode( "tabindex" );
 
 				return attributeNode && attributeNode.specified ?
diff --git a/a.js b/b.js
index e80532eb..3c180593 100644
--- a/a.js
+++ b/b.js
@@ -59,7 +59,6 @@ prop: function( elem, name, value ) {
 				// Support: IE <=9 - 11+
 				// elem.tabIndex doesn't always return the
 				// correct value when it hasn't been explicitly set
-				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
 				// Use proper attribute retrieval (trac-12072)
 				var tabindex = elem.getAttribute( "tabindex" );
 
diff --git a/a.js b/b.js
index fe3a6f6b..79c2aca8 100644
--- a/a.js
+++ b/b.js
@@ -4,7 +4,6 @@
 import "../effects.js"; // Delay is optional because of this dependency
 
 // Based off of the plugin by Clint Helfers, with permission.
-// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
 jQuery.fn.delay = function( time, type ) {
 	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
 	type = type || "fx";
diff --git a/a.js b/b.js
index 3921de6b..dc9fb242 100644
--- a/a.js
+++ b/b.js
@@ -17,7 +17,7 @@
 	rantiCache = /([?&])_=[^&]*/,
 	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
 
-	// #7653, #8125, #8152: local protocol detection
+	// trac-7653, trac-8125, trac-8152: local protocol detection
 	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
 	rnoContent = /^(?:GET|HEAD)$/,
 	rprotocol = /^\/\//,
@@ -40,7 +40,7 @@
 	 */
 	transports = {},
 
-	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
+	// Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression
 	allTypes = "*/".concat( "*" ),
 
 	// Anchor tag for parsing the document origin
@@ -111,7 +111,7 @@ function inspectPrefiltersOrTransports( structure, options, originalOptions, jqX
 
 // A special extend for ajax options
 // that takes "flat" options (not to be deep extended)
-// Fixes #9887
+// Fixes trac-9887
 function ajaxExtend( target, src ) {
 	var key, deep,
 		flatOptions = jQuery.ajaxSettings.flatOptions || {};
@@ -528,12 +528,12 @@ ajax: function( url, options ) {
 		deferred.promise( jqXHR );
 
 		// Add protocol if not provided (prefilters might expect it)
-		// Handle falsy url in the settings object (#10093: consistency with old signature)
+		// Handle falsy url in the settings object (trac-10093: consistency with old signature)
 		// We also use the url parameter if available
 		s.url = ( ( url || s.url || location.href ) + "" )
 			.replace( rprotocol, location.protocol + "//" );
 
-		// Alias method option to type as per ticket #12004
+		// Alias method option to type as per ticket trac-12004
 		s.type = options.method || options.type || s.method || s.type;
 
 		// Extract dataTypes list
@@ -605,7 +605,7 @@ ajax: function( url, options ) {
 			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
 				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;
 
-				// #9682: remove data so that it's not used in an eventual retry
+				// trac-9682: remove data so that it's not used in an eventual retry
 				delete s.data;
 			}
 
diff --git a/a.js b/b.js
index 2c9bc812..a024bb23 100644
--- a/a.js
+++ b/b.js
@@ -66,7 +66,7 @@ 			callback = function( type ) {
 						} else if ( type === "error" ) {
 							complete(
 
-								// File: protocol always yields status 0; see #8605, #14207
+								// File: protocol always yields status 0; see trac-8605, trac-14207
 								xhr.status,
 								xhr.statusText
 							);
@@ -99,7 +99,7 @@ 			callback = function( type ) {
 				xhr.send( options.hasContent && options.data || null );
 			} catch ( e ) {
 
-				// #14683: Only rethrow if this hasn't been notified as an error yet
+				// trac-14683: Only rethrow if this hasn't been notified as an error yet
 				if ( callback ) {
 					throw e;
 				}
diff --git a/a.js b/b.js
index 453d4c7c..3c180593 100644
--- a/a.js
+++ b/b.js
@@ -59,8 +59,7 @@ prop: function( elem, name, value ) {
 				// Support: IE <=9 - 11+
 				// elem.tabIndex doesn't always return the
 				// correct value when it hasn't been explicitly set
-				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
-				// Use proper attribute retrieval(#12072)
+				// Use proper attribute retrieval (trac-12072)
 				var tabindex = elem.getAttribute( "tabindex" );
 
 				if ( tabindex ) {
diff --git a/a.js b/b.js
index f200f97e..536ed88a 100644
--- a/a.js
+++ b/b.js
@@ -149,7 +149,7 @@ val: function( value ) {
 				val :
 
 				// Support: IE <=10 - 11+
-				// option.text throws exceptions (#14686, #14858)
+				// option.text throws exceptions (trac-14686, trac-14858)
 				// Strip and collapse whitespace
 				// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
 				stripAndCollapse( jQuery.text( elem ) );
diff --git a/a.js b/b.js
index 8fc24d8d..9fea5e6d 100644
--- a/a.js
+++ b/b.js
@@ -10,8 +10,8 @@
 var rootjQuery,
 
 	// A simple way to check for HTML strings
-	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
-	// Strict HTML recognition (#11290: must start with <)
+	// Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)
+	// Strict HTML recognition (trac-11290: must start with <)
 	// Shortcut simple #id case for speed
 	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
 
diff --git a/a.js b/b.js
index 51f6d7f6..17aaf5bc 100644
--- a/a.js
+++ b/b.js
@@ -25,7 +25,7 @@ jQuery.fn.ready = function( fn ) {
 	isReady: false,
 
 	// A counter to track how many items to wait for before
-	// the ready event fires. See #6781
+	// the ready event fires. See trac-6781
 	readyWait: 1,
 
 	ready: function( wait ) {
diff --git a/a.js b/b.js
index d6c507e4..88dcc343 100644
--- a/a.js
+++ b/b.js
@@ -28,7 +28,7 @@ jQuery.fn.ready = function( fn ) {
 	isReady: false,
 
 	// A counter to track how many items to wait for before
-	// the ready event fires. See #6781
+	// the ready event fires. See trac-6781
 	readyWait: 1,
 
 	// Handle when the DOM is ready
diff --git a/a.js b/b.js
index b50aa3d9..29dca0e4 100644
--- a/a.js
+++ b/b.js
@@ -220,15 +220,15 @@ style: function( elem, name, value, extra ) {
 		if ( value !== undefined ) {
 			type = typeof value;
 
-			// Convert "+=" or "-=" to relative numbers (#7345)
+			// Convert "+=" or "-=" to relative numbers (trac-7345)
 			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
 				value = adjustCSS( elem, name, ret );
 
-				// Fixes bug #9237
+				// Fixes bug trac-9237
 				type = "number";
 			}
 
-			// Make sure that null and NaN values aren't set (#7116)
+			// Make sure that null and NaN values aren't set (trac-7116)
 			if ( value == null || value !== value ) {
 				return;
 			}
@@ -239,7 +239,7 @@ style: function( elem, name, value, extra ) {
 			}
 
 			// Support: IE <=9 - 11+
-			// background-* props of a cloned element affect the source element (#8908)
+			// background-* props of a cloned element affect the source element (trac-8908)
 			if ( isIE && value === "" && name.indexOf( "background" ) === 0 ) {
 				style[ name ] = "inherit";
 			}
diff --git a/a.js b/b.js
index a3d5fe62..c75dcd95 100644
--- a/a.js
+++ b/b.js
@@ -6,7 +6,7 @@
 // Convert dashed to camelCase, handle vendor prefixes.
 // Used by the css & effects modules.
 // Support: IE <=9 - 11+
-// Microsoft forgot to hump their vendor prefix (#9572)
+// Microsoft forgot to hump their vendor prefix (trac-9572)
 function cssCamelCase( string ) {
 	return camelCase( string.replace( rmsPrefix, "ms-" ) );
 }
diff --git a/a.js b/b.js
index cd658b38..e3e8eabe 100644
--- a/a.js
+++ b/b.js
@@ -105,7 +105,7 @@ data: function( key, value ) {
 					while ( i-- ) {
 
 						// Support: IE 11+
-						// The attrs elements can be null (#14894)
+						// The attrs elements can be null (trac-14894)
 						if ( attrs[ i ] ) {
 							name = attrs[ i ].name;
 							if ( name.indexOf( "data-" ) === 0 ) {
diff --git a/a.js b/b.js
index a5eb0908..8c9e1f9f 100644
--- a/a.js
+++ b/b.js
@@ -21,7 +21,7 @@ cache: function( owner ) {
 			value = Object.create( null );
 
 			// We can accept data for non-element nodes in modern browsers,
-			// but we should not, see #8335.
+			// but we should not, see trac-8335.
 			// Always return an empty object.
 			if ( acceptData( owner ) ) {
 
diff --git a/a.js b/b.js
index 4b6eb00e..0c66d385 100644
--- a/a.js
+++ b/b.js
@@ -369,15 +369,15 @@ handlers: function( event, handlers ) {
 
 			for ( ; cur !== this; cur = cur.parentNode || this ) {
 
-				// Don't check non-elements (#13208)
-				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
+				// Don't check non-elements (trac-13208)
+				// Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)
 				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
 					matchedHandlers = [];
 					matchedSelectors = {};
 					for ( i = 0; i < delegateCount; i++ ) {
 						handleObj = handlers[ i ];
 
-						// Don't conflict with Object.prototype properties (#13203)
+						// Don't conflict with Object.prototype properties (trac-13203)
 						sel = handleObj.selector + " ";
 
 						if ( matchedSelectors[ sel ] === undefined ) {
diff --git a/a.js b/b.js
index 7919a501..5fad460e 100644
--- a/a.js
+++ b/b.js
@@ -71,8 +71,8 @@ trigger: function( event, data, elem, onlyHandlers ) {
 			return;
 		}
 
-		// Determine event propagation path in advance, per W3C events spec (#9951)
-		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
+		// Determine event propagation path in advance, per W3C events spec (trac-9951)
+		// Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)
 		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {
 
 			bubbleType = special.delegateType || type;
@@ -124,7 +124,7 @@ trigger: function( event, data, elem, onlyHandlers ) {
 				acceptData( elem ) ) {
 
 				// Call a native DOM method on the target with the same name as the event.
-				// Don't do default actions on window, that's where global variables be (#6170)
+				// Don't do default actions on window, that's where global variables be (trac-6170)
 				if ( ontype && typeof elem[ type ] === "function" && !isWindow( elem ) ) {
 
 					// Don't re-trigger an onFOO event when we call its FOO() method
diff --git a/a.js b/b.js
index b49496fb..965a4b40 100644
--- a/a.js
+++ b/b.js
@@ -21,8 +21,8 @@ jQuery.noConflict = function( deep ) {
 };
 
 // Expose jQuery and $ identifiers, even in AMD
-// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
-// and CommonJS for browser emulators (#13566)
+// (trac-7102#comment:10, gh-557)
+// and CommonJS for browser emulators (trac-13566)
 if ( typeof noGlobal === "undefined" ) {
 	window.jQuery = window.$ = jQuery;
 }
diff --git a/a.js b/b.js
index 19c60fcb..cad13bd9 100644
--- a/a.js
+++ b/b.js
@@ -120,7 +120,7 @@ function domManip( collection, args, callback, ignored ) {
 
 			// Use the original fragment for the last item
 			// instead of the first because it can end up
-			// being emptied incorrectly in certain situations (#8070).
+			// being emptied incorrectly in certain situations (trac-8070).
 			for ( ; i < l; i++ ) {
 				node = fragment;
 
diff --git a/a.js b/b.js
index 8a8d63d9..1af889dd 100644
--- a/a.js
+++ b/b.js
@@ -4,7 +4,7 @@ jQuery._evalUrl = function( url, options, doc ) {
 	return jQuery.ajax( {
 		url: url,
 
-		// Make this explicit, since user can override this through ajaxSetup (#11264)
+		// Make this explicit, since user can override this through ajaxSetup (trac-11264)
 		type: "GET",
 		dataType: "script",
 		cache: true,
diff --git a/a.js b/b.js
index d6f8e578..dd0d673e 100644
--- a/a.js
+++ b/b.js
@@ -52,7 +52,7 @@ function buildFragment( elems, context, scripts, selection, ignored ) {
 				// Remember the top-level container
 				tmp = fragment.firstChild;
 
-				// Ensure the created nodes are orphaned (#12392)
+				// Ensure the created nodes are orphaned (trac-12392)
 				tmp.textContent = "";
 			}
 		}
diff --git a/a.js b/b.js
index 995d22c0..f4943dfe 100644
--- a/a.js
+++ b/b.js
@@ -4,7 +4,7 @@
 function getAll( context, tag ) {
 
 	// Support: IE <=9 - 11+
-	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
+	// Use typeof to avoid zero-argument method invocation on host objects (trac-15151)
 	var ret;
 
 	if ( typeof context.getElementsByTagName !== "undefined" ) {
diff --git a/a.js b/b.js
index 4b9c8b6e..bc60e61e 100644
--- a/a.js
+++ b/b.js
@@ -282,7 +282,8 @@ function createCache() {
 
 	function cache( key, value ) {
 
-		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
+		// Use (key + " ") to avoid collision with native prototype properties
+		// (see https://github.com/jquery/sizzle/issues/157)
 		if ( keys.push( key + " " ) > Expr.cacheLength ) {
 
 			// Only keep the most recent entries
@@ -432,7 +433,7 @@ function setDocument( node ) {
 	documentIsHTML = !jQuery.isXMLDoc( document );
 
 	// Support: IE 9 - 11+
-	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
+	// Accessing iframe documents after unload throws "permission denied" errors (see trac-13936)
 	// Support: IE 11+
 	// IE sometimes throws a "Permission denied" error when strict-comparing
 	// two documents; shallow comparisons work.
@@ -843,7 +844,8 @@ find.matchesSelector = function( elem, expr ) {
 					input[ 0 ] = elem;
 					matcher( input, null, xml, results );
 
-					// Don't keep the element (issue #299)
+					// Don't keep the element
+					// (see https://github.com/jquery/sizzle/issues/299)
 					input[ 0 ] = null;
 					return !results.pop();
 				};
@@ -1348,7 +1350,8 @@ function matcherFromTokens( tokens ) {
 					matchContext( elem, context, xml ) :
 					matchAnyContext( elem, context, xml ) );
 
-			// Avoid hanging onto element (issue #299)
+			// Avoid hanging onto element
+			// (see https://github.com/jquery/sizzle/issues/299)
 			checkContext = null;
 			return ret;
 		} ];
diff --git a/a.js b/b.js
index 8a0b2a1c..8a3dc53e 100644
--- a/a.js
+++ b/b.js
@@ -20,7 +20,7 @@
 		// (such as Node.js), expose a factory as module.exports.
 		// This accentuates the need for the creation of a real `window`.
 		// e.g. var jQuery = require("jquery")(window);
-		// See ticket #14549 for more info.
+		// See ticket trac-14549 for more info.
 		module.exports = global.document ?
 			factory( global, true ) :
 			function( w ) {
diff --git a/a.js b/b.js
index 445f88aa..d06ce997 100644
--- a/a.js
+++ b/b.js
@@ -613,7 +613,7 @@ ajaxTest( "jQuery.ajax() - events without context", 3, function( assert ) {
 		};
 	} );
 
-	ajaxTest( "#15118 - jQuery.ajax() - function without jQuery.event", 1, function( assert ) {
+	ajaxTest( "trac-15118 - jQuery.ajax() - function without jQuery.event", 1, function( assert ) {
 		var holder;
 		return {
 			url: url( "mock.php?action=json" ),
@@ -629,7 +629,7 @@ ajaxTest( "#15118 - jQuery.ajax() - function without jQuery.event", 1, function(
 		};
 	} );
 
-	ajaxTest( "#15160 - jQuery.ajax() - request manually aborted in ajaxSend", 3, function( assert ) {
+	ajaxTest( "trac-15160 - jQuery.ajax() - request manually aborted in ajaxSend", 3, function( assert ) {
 		return {
 			setup: function() {
 				jQuery( document ).on( "ajaxSend", function( e, jqXHR ) {
@@ -1895,7 +1895,7 @@ ajaxTest( "jQuery.ajax() - empty json gets to error callback instead of success
 		};
 	} );
 
-	ajaxTest( "#2688 - jQuery.ajax() - beforeSend, cancel request", 2, function( assert ) {
+	ajaxTest( "trac-2688 - jQuery.ajax() - beforeSend, cancel request", 2, function( assert ) {
 		return {
 			create: function() {
 				return jQuery.ajax( {
@@ -1921,7 +1921,7 @@ ajaxTest( "#2688 - jQuery.ajax() - beforeSend, cancel request", 2, function( ass
 		};
 	} );
 
-	ajaxTest( "#2806 - jQuery.ajax() - data option - evaluate function values", 1, function( assert ) {
+	ajaxTest( "trac-2806 - jQuery.ajax() - data option - evaluate function values", 1, function( assert ) {
 		return {
 			url: baseURL + "mock.php?action=echoQuery",
 			data: {
@@ -1935,7 +1935,7 @@ ajaxTest( "#2806 - jQuery.ajax() - data option - evaluate function values", 1, f
 		};
 	} );
 
-	QUnit.test( "#7531 - jQuery.ajax() - Location object as url", function( assert ) {
+	QUnit.test( "trac-7531 - jQuery.ajax() - Location object as url", function( assert ) {
 		assert.expect( 1 );
 
 		var xhr,
@@ -1953,7 +1953,7 @@ QUnit.test( "#7531 - jQuery.ajax() - Location object as url", function( assert )
 	} );
 
 	jQuery.each( [ " - Same Domain", " - Cross Domain" ], function( crossDomain, label ) {
-		ajaxTest( "#7578 - jQuery.ajax() - JSONP - default for cache option" + label, 1, function( assert ) {
+		ajaxTest( "trac-7578 - jQuery.ajax() - JSONP - default for cache option" + label, 1, function( assert ) {
 			return {
 				url: baseURL + "mock.php?action=jsonp",
 				dataType: "jsonp",
@@ -1967,7 +1967,7 @@ QUnit.test( "#7531 - jQuery.ajax() - Location object as url", function( assert )
 		} );
 	} );
 
-	ajaxTest( "#8107 - jQuery.ajax() - multiple method signatures introduced in 1.5", 4, function( assert ) {
+	ajaxTest( "trac-8107 - jQuery.ajax() - multiple method signatures introduced in 1.5", 4, function( assert ) {
 		return [
 			{
 				create: function() {
@@ -2006,7 +2006,7 @@ ajaxTest( "#8107 - jQuery.ajax() - multiple method signatures introduced in 1.5"
 	} );
 
 	jQuery.each( [ " - Same Domain", " - Cross Domain" ], function( crossDomain, label ) {
-		ajaxTest( "#8205 - jQuery.ajax() - JSONP - re-use callbacks name" + label, 4, function( assert ) {
+		ajaxTest( "trac-8205 - jQuery.ajax() - JSONP - re-use callbacks name" + label, 4, function( assert ) {
 			return {
 				url: baseURL + "mock.php?action=jsonp",
 				dataType: "jsonp",
@@ -2044,7 +2044,7 @@ ajaxTest( "#8107 - jQuery.ajax() - multiple method signatures introduced in 1.5"
 		} );
 	} );
 
-	QUnit.test( "#9887 - jQuery.ajax() - Context with circular references (#9887)", function( assert ) {
+	QUnit.test( "trac-9887 - jQuery.ajax() - Context with circular references (trac-9887)", function( assert ) {
 		assert.expect( 2 );
 
 		var success = false,
@@ -2078,7 +2078,7 @@ QUnit.test( "#9887 - jQuery.ajax() - Context with circular references (#9887)",
 			};
 		}
 
-		ajaxTest( "#10093 - jQuery.ajax() - falsy url " + title, 4, function( assert ) {
+		ajaxTest( "trac-10093 - jQuery.ajax() - falsy url " + title, 4, function( assert ) {
 			return [
 				request( assert, "", "empty string" ),
 				request( assert, false ),
@@ -2088,7 +2088,7 @@ QUnit.test( "#9887 - jQuery.ajax() - Context with circular references (#9887)",
 		} );
 	} );
 
-	ajaxTest( "#11151 - jQuery.ajax() - parse error body", 2, function( assert ) {
+	ajaxTest( "trac-11151 - jQuery.ajax() - parse error body", 2, function( assert ) {
 		return {
 			url: url( "mock.php?action=error&json=1" ),
 			dataFilter: function( string ) {
@@ -2102,7 +2102,7 @@ ajaxTest( "#11151 - jQuery.ajax() - parse error body", 2, function( assert ) {
 		};
 	} );
 
-	ajaxTest( "#11426 - jQuery.ajax() - loading binary data shouldn't throw an exception in IE", 1, function( assert ) {
+	ajaxTest( "trac-11426 - jQuery.ajax() - loading binary data shouldn't throw an exception in IE", 1, function( assert ) {
 		return {
 			url: url( "1x1.jpg" ),
 			success: function( data ) {
@@ -2135,7 +2135,7 @@ ajaxTest( "gh-2498 - jQuery.ajax() - binary data shouldn't throw an exception",
 	} );
 }
 
-	QUnit.test( "#11743 - jQuery.ajax() - script, throws exception", function( assert ) {
+	QUnit.test( "trac-11743 - jQuery.ajax() - script, throws exception", function( assert ) {
 		assert.expect( 1 );
 		var done = assert.async();
 		var onerror = window.onerror;
@@ -2170,7 +2170,7 @@ 				options.success = function( msg ) {
 		}
 
 		ajaxTest(
-			"#12004 - jQuery.ajax() - method is an alias of type - " +
+			"trac-12004 - jQuery.ajax() - method is an alias of type - " +
 			globalOption + " set globally", 3,
 			function( assert ) {
 				return {
@@ -2189,7 +2189,7 @@ 				options.success = function( msg ) {
 		);
 	} );
 
-	ajaxTest( "#13276 - jQuery.ajax() - compatibility between XML documents from ajax requests and parsed string", 1, function( assert ) {
+	ajaxTest( "trac-13276 - jQuery.ajax() - compatibility between XML documents from ajax requests and parsed string", 1, function( assert ) {
 		return {
 			url: baseURL + "dashboard.xml",
 			dataType: "xml",
@@ -2207,7 +2207,7 @@ ajaxTest( "#13276 - jQuery.ajax() - compatibility between XML documents from aja
 		};
 	} );
 
-	ajaxTest( "#13292 - jQuery.ajax() - converter is bypassed for 204 requests", 3, function( assert ) {
+	ajaxTest( "trac-13292 - jQuery.ajax() - converter is bypassed for 204 requests", 3, function( assert ) {
 		return {
 			url: baseURL + "mock.php?action=status&code=204&text=No+Content",
 			dataType: "testing",
@@ -2229,7 +2229,7 @@ ajaxTest( "#13292 - jQuery.ajax() - converter is bypassed for 204 requests", 3,
 		};
 	} );
 
-	ajaxTest( "#13388 - jQuery.ajax() - responseXML", 3, function( assert ) {
+	ajaxTest( "trac-13388 - jQuery.ajax() - responseXML", 3, function( assert ) {
 		return {
 			url: url( "with_fries.xml" ),
 			dataType: "xml",
@@ -2241,7 +2241,7 @@ ajaxTest( "#13388 - jQuery.ajax() - responseXML", 3, function( assert ) {
 		};
 	} );
 
-	ajaxTest( "#13922 - jQuery.ajax() - converter is bypassed for HEAD requests", 3, function( assert ) {
+	ajaxTest( "trac-13922 - jQuery.ajax() - converter is bypassed for HEAD requests", 3, function( assert ) {
 		return {
 			url: baseURL + "mock.php?action=json",
 			method: "HEAD",
@@ -2272,7 +2272,7 @@ ajaxTest( "#13922 - jQuery.ajax() - converter is bypassed for HEAD requests", 3,
 	// Safari 13 did similar changes. The below check will catch them both.
 	if ( !/safari/i.test( navigator.userAgent ) ) {
 		testIframe(
-			"#14379 - jQuery.ajax() on unload",
+			"trac-14379 - jQuery.ajax() on unload",
 			"ajax/onunload.html",
 			function( assert, jQuery, window, document, status ) {
 				assert.expect( 1 );
@@ -2281,7 +2281,7 @@ ajaxTest( "#13922 - jQuery.ajax() - converter is bypassed for HEAD requests", 3,
 		);
 	}
 
-	ajaxTest( "#14683 - jQuery.ajax() - Exceptions thrown synchronously by xhr.send should be caught", 4, function( assert ) {
+	ajaxTest( "trac-14683 - jQuery.ajax() - Exceptions thrown synchronously by xhr.send should be caught", 4, function( assert ) {
 		return [ {
 			url: baseURL + "mock.php?action=echoData",
 			method: "POST",
@@ -2504,7 +2504,7 @@ QUnit.test( "jQuery.ajaxSetup({ timeout: Number }) with localtimeout", function(
 
 //----------- jQuery.domManip()
 
-	QUnit.test( "#11264 - jQuery.domManip() - no side effect because of ajaxSetup or global events", function( assert ) {
+	QUnit.test( "trac-11264 - jQuery.domManip() - no side effect because of ajaxSetup or global events", function( assert ) {
 		assert.expect( 1 );
 
 		jQuery.ajaxSetup( {
@@ -2521,7 +2521,7 @@ QUnit.test( "#11264 - jQuery.domManip() - no side effect because of ajaxSetup or
 	} );
 
 	QUnit.test(
-		"jQuery#load() - always use GET method even if it overrided through ajaxSetup (#11264)",
+		"jQuery#load() - always use GET method even if it overrided through ajaxSetup (trac-11264)",
 		function( assert ) {
 			assert.expect( 1 );
 			var done = assert.async();
@@ -2558,7 +2558,7 @@ QUnit.test(
 	);
 
 	QUnit.test(
-		"#11402 - jQuery.domManip() - script in comments are properly evaluated",
+		"trac-11402 - jQuery.domManip() - script in comments are properly evaluated",
 		function( assert ) {
 			assert.expect( 2 );
 			jQuery( "#qunit-fixture" ).load( baseURL + "cleanScript.html", assert.async() );
@@ -2581,7 +2581,7 @@ QUnit.test( "jQuery.get( String, Hash, Function ) - parse xml and use text() on
 		} );
 	} );
 
-	QUnit.test( "#8277 - jQuery.get( String, Function ) - data in ajaxSettings", function( assert ) {
+	QUnit.test( "trac-8277 - jQuery.get( String, Function ) - data in ajaxSettings", function( assert ) {
 		assert.expect( 1 );
 		var done = assert.async();
 		jQuery.ajaxSetup( {
@@ -2672,7 +2672,7 @@ QUnit.test( "jQuery.getScript( String, Function ) - no callback", function( asse
 		jQuery.getScript( url( "mock.php?action=testbar" ) ).done( assert.async() );
 	} );
 
-	QUnit.test( "#8082 - jQuery.getScript( String, Function ) - source as responseText", function( assert ) {
+	QUnit.test( "trac-8082 - jQuery.getScript( String, Function ) - source as responseText", function( assert ) {
 		assert.expect( 2 );
 		var done = assert.async();
 
@@ -2759,7 +2759,7 @@ QUnit.test( "jQuery.fn.load( URL_SELECTOR )", function( assert ) {
 		} );
 	} );
 
-	// Selector should be trimmed to avoid leading spaces (#14773)
+	// Selector should be trimmed to avoid leading spaces (trac-14773)
 	QUnit.test( "jQuery.fn.load( URL_SELECTOR with spaces )", function( assert ) {
 		assert.expect( 1 );
 		var done = assert.async();
@@ -2769,9 +2769,9 @@ QUnit.test( "jQuery.fn.load( URL_SELECTOR with spaces )", function( assert ) {
 		} );
 	} );
 
-	// Selector should be trimmed to avoid leading spaces (#14773)
-	// Selector should include any valid non-HTML whitespace (#3003)
-	QUnit.test( "jQuery.fn.load( URL_SELECTOR with non-HTML whitespace(#3003) )", function( assert ) {
+	// Selector should be trimmed to avoid leading spaces (trac-14773)
+	// Selector should include any valid non-HTML whitespace (gh-3003)
+	QUnit.test( "jQuery.fn.load( URL_SELECTOR with non-HTML whitespace(gh-3003) )", function( assert ) {
 		assert.expect( 1 );
 		var done = assert.async();
 		jQuery( "#first" ).load( baseURL + "test3.html   #whitespace\\\\xA0 ", function() {
@@ -2902,7 +2902,7 @@ QUnit.test( "jQuery.fn.load() - callbacks get the correct parameters", function(
 		).always( done );
 	} );
 
-	QUnit.test( "#2046 - jQuery.fn.load( String, Function ) with ajaxSetup on dataType json", function( assert ) {
+	QUnit.test( "trac-2046 - jQuery.fn.load( String, Function ) with ajaxSetup on dataType json", function( assert ) {
 		assert.expect( 1 );
 		var done = assert.async();
 
@@ -2917,7 +2917,7 @@ QUnit.test( "#2046 - jQuery.fn.load( String, Function ) with ajaxSetup on dataTy
 		jQuery( "#first" ).load( baseURL + "test3.html" );
 	} );
 
-	QUnit.test( "#10524 - jQuery.fn.load() - data specified in ajaxSettings is merged in", function( assert ) {
+	QUnit.test( "trac-10524 - jQuery.fn.load() - data specified in ajaxSettings is merged in", function( assert ) {
 		assert.expect( 1 );
 		var done = assert.async();
 
diff --git a/a.js b/b.js
index 2658495a..5f2418c7 100644
--- a/a.js
+++ b/b.js
@@ -82,9 +82,9 @@ QUnit.test( "attr(String)", function( assert ) {
 	assert.equal( jQuery( "#form" ).attr( "action", "newformaction" ).attr( "action" ), "newformaction", "Check that action attribute was changed" );
 	assert.equal( jQuery( "#testForm" ).attr( "target" ), undefined, "Retrieving target does not equal the input with name=target" );
 	assert.equal( jQuery( "#testForm" ).attr( "target", "newTarget" ).attr( "target" ), "newTarget", "Set target successfully on a form" );
-	assert.equal( jQuery( "#testForm" ).removeAttr( "id" ).attr( "id" ), undefined, "Retrieving id does not equal the input with name=id after id is removed [#7472]" );
+	assert.equal( jQuery( "#testForm" ).removeAttr( "id" ).attr( "id" ), undefined, "Retrieving id does not equal the input with name=id after id is removed [trac-7472]" );
 
-	// Bug #3685 (form contains input with name="name")
+	// Bug trac-3685 (form contains input with name="name")
 	assert.equal( jQuery( "#testForm" ).attr( "name" ), undefined, "Retrieving name does not retrieve input with name=name" );
 	extras.remove();
 
@@ -142,13 +142,13 @@ jQuery( "<a></a>" ).attr( {
 	assert.ok( !!~styleElem.attr( "style" ).indexOf( "UPPERlower.gif" ), "Check style attribute getter" );
 	assert.ok( !!~styleElem.attr( "style", "position:absolute;" ).attr( "style" ).indexOf( "absolute" ), "Check style setter" );
 
-	// Check value on button element (#1954)
+	// Check value on button element (trac-1954)
 	$button = jQuery( "<button>text</button>" ).insertAfter( "#button" );
 	assert.strictEqual( $button.attr( "value" ), undefined, "Absence of value attribute on a button" );
 	assert.equal( $button.attr( "value", "foobar" ).attr( "value" ), "foobar", "Value attribute on a button does not return innerHTML" );
 	assert.equal( $button.attr( "value", "baz" ).html(), "text", "Setting the value attribute does not change innerHTML" );
 
-	// Attributes with a colon on a table element (#1591)
+	// Attributes with a colon on a table element (trac-1591)
 	assert.equal( jQuery( "#table" ).attr( "test:attrib" ), undefined, "Retrieving a non-existent attribute on a table with a colon does not throw an error." );
 	assert.equal( jQuery( "#table" ).attr( "test:attrib", "foobar" ).attr( "test:attrib" ), "foobar", "Setting an attribute on a table with a colon does not throw an error." );
 
@@ -166,11 +166,11 @@ jQuery( "<a></a>" ).attr( {
 	assert.strictEqual( jQuery( "<select><option value='property'></option></select>" ).attr( "value" ), undefined, "An unset value on a select returns undefined." );
 
 	$form = jQuery( "#form" ).attr( "enctype", "multipart/form-data" );
-	assert.equal( $form.prop( "enctype" ), "multipart/form-data", "Set the enctype of a form (encoding in IE6/7 #6743)" );
+	assert.equal( $form.prop( "enctype" ), "multipart/form-data", "Set the enctype of a form (encoding in IE6/7 trac-6743)" );
 
 } );
 
-QUnit.test( "attr(String) on cloned elements, #9646", function( assert ) {
+QUnit.test( "attr(String) on cloned elements, trac-9646", function( assert ) {
 	assert.expect( 4 );
 
 	var div,
@@ -295,7 +295,7 @@ QUnit.test( "attr(String, Object)", function( assert ) {
 	assert.equal( $input.attr( "name" ), "something", "Check element creation gets/sets the name attribute." );
 	assert.equal( $input.attr( "id" ), "specified", "Check element creation gets/sets the id attribute." );
 
-	// As of fixing #11115, we only guarantee boolean property update for checked and selected
+	// As of fixing trac-11115, we only guarantee boolean property update for checked and selected
 	$input = jQuery( "<input type='checkbox'/>" ).attr( "checked", true );
 	assert.equal( $input.prop( "checked" ), true, "Setting checked updates property (verified by .prop)" );
 	assert.equal( $input[ 0 ].checked, true, "Setting checked updates property (verified by native property)" );
@@ -377,13 +377,13 @@ QUnit.test( "attr(String, Object)", function( assert ) {
 	jQuery.each( [ commentNode, textNode, attributeNode ], function( i, elem ) {
 		var $elem = jQuery( elem );
 		$elem.attr( "nonexisting", "foo" );
-		assert.strictEqual( $elem.attr( "nonexisting" ), undefined, "attr(name, value) works correctly on comment and text nodes (bug #7500)." );
+		assert.strictEqual( $elem.attr( "nonexisting" ), undefined, "attr(name, value) works correctly on comment and text nodes (bug trac-7500)." );
 	} );
 
 	jQuery.each( [ window, document, obj, "#firstp" ], function( i, elem ) {
 		var oldVal = elem.nonexisting,
 			$elem = jQuery( elem );
-		assert.strictEqual( $elem.attr( "nonexisting" ), undefined, "attr works correctly for non existing attributes (bug #7500)." );
+		assert.strictEqual( $elem.attr( "nonexisting" ), undefined, "attr works correctly for non existing attributes (bug trac-7500)." );
 		assert.equal( $elem.attr( "nonexisting", "foo" ).attr( "nonexisting" ), "foo", "attr falls back to prop on unsupported arguments" );
 		elem.nonexisting = oldVal;
 	} );
@@ -402,7 +402,7 @@ QUnit.test( "attr(String, Object)", function( assert ) {
 
 	assert.equal( jQuery( "#area1" ).attr( "value" ), undefined, "Value attribute is distinct from value property." );
 
-	// for #1070
+	// for trac-1070
 	jQuery( "#name" ).attr( "someAttr", "0" );
 	assert.equal( jQuery( "#name" ).attr( "someAttr" ), "0", "Set attribute to a string of '0'" );
 	jQuery( "#name" ).attr( "someAttr", 0 );
@@ -462,7 +462,7 @@ QUnit.test( "attr(String, Object)", function( assert ) {
 	} ).appendTo( "#testForm" );
 	assert.equal( $radio.val(), "sup", "Value is not reset when type is set after value on a radio" );
 
-	// Setting attributes on svg elements (bug #3116)
+	// Setting attributes on svg elements (bug trac-3116)
 	$svg = jQuery(
 		"<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' baseProfile='full' width='200' height='200'>" +
 
@@ -474,9 +474,9 @@ QUnit.test( "attr(String, Object)", function( assert ) {
 
 	// undefined values are chainable
 	jQuery( "#name" ).attr( "maxlength", "5" ).removeAttr( "nonexisting" );
-	assert.equal( typeof jQuery( "#name" ).attr( "maxlength", undefined ), "object", ".attr('attribute', undefined) is chainable (#5571)" );
-	assert.equal( jQuery( "#name" ).attr( "maxlength", undefined ).attr( "maxlength" ), "5", ".attr('attribute', undefined) does not change value (#5571)" );
-	assert.equal( jQuery( "#name" ).attr( "nonexisting", undefined ).attr( "nonexisting" ), undefined, ".attr('attribute', undefined) does not create attribute (#5571)" );
+	assert.equal( typeof jQuery( "#name" ).attr( "maxlength", undefined ), "object", ".attr('attribute', undefined) is chainable (trac-5571)" );
+	assert.equal( jQuery( "#name" ).attr( "maxlength", undefined ).attr( "maxlength" ), "5", ".attr('attribute', undefined) does not change value (trac-5571)" );
+	assert.equal( jQuery( "#name" ).attr( "nonexisting", undefined ).attr( "nonexisting" ), undefined, ".attr('attribute', undefined) does not create attribute (trac-5571)" );
 } );
 
 QUnit.test( "attr(non-ASCII)", function( assert ) {
@@ -573,7 +573,7 @@ QUnit.test( "removeAttr(String)", function( assert ) {
 	assert.equal( jQuery( "#form" ).removeAttr( "id" ).attr( "id" ), undefined, "Remove id" );
 	assert.equal( jQuery( "#foo" ).attr( "style", "position:absolute;" ).removeAttr( "style" ).attr( "style" ), undefined, "Check removing style attribute" );
 	assert.equal( jQuery( "#form" ).attr( "style", "position:absolute;" ).removeAttr( "style" ).attr( "style" ), undefined, "Check removing style attribute on a form" );
-	assert.equal( jQuery( "<div style='position: absolute'></div>" ).appendTo( "#foo" ).removeAttr( "style" ).prop( "style" ).cssText, "", "Check removing style attribute (#9699 Webkit)" );
+	assert.equal( jQuery( "<div style='position: absolute'></div>" ).appendTo( "#foo" ).removeAttr( "style" ).prop( "style" ).cssText, "", "Check removing style attribute (trac-9699 Webkit)" );
 	assert.equal( jQuery( "#fx-test-group" ).attr( "height", "3px" ).removeAttr( "height" ).get( 0 ).style.height, "1px", "Removing height attribute has no effect on height set with style attribute" );
 
 	jQuery( "#check1" ).removeAttr( "checked" ).prop( "checked", true ).removeAttr( "checked" );
@@ -582,13 +582,13 @@ QUnit.test( "removeAttr(String)", function( assert ) {
 	assert.equal( document.getElementById( "text1" ).readOnly, false, "removeAttr sets boolean properties to false" );
 
 	jQuery( "#option2c" ).removeAttr( "selected" );
-	assert.equal( jQuery( "#option2d" ).attr( "selected" ), "selected", "Removing `selected` from an option that is not selected does not remove selected from the currently selected option (#10870)" );
+	assert.equal( jQuery( "#option2d" ).attr( "selected" ), "selected", "Removing `selected` from an option that is not selected does not remove selected from the currently selected option (trac-10870)" );
 
 	try {
 		$first = jQuery( "#first" ).attr( "contenteditable", "true" ).removeAttr( "contenteditable" );
 		assert.equal( $first.attr( "contenteditable" ), undefined, "Remove the contenteditable attribute" );
 	} catch ( e ) {
-		assert.ok( false, "Removing contenteditable threw an error (#10429)" );
+		assert.ok( false, "Removing contenteditable threw an error (trac-10429)" );
 	}
 
 	$first = jQuery( "<div Case='mixed'></div>" );
@@ -714,26 +714,26 @@ QUnit.test( "prop(String, Object) on null/undefined", function( assert ) {
 	select.appendChild( optgroup );
 
 	assert.equal( jQuery( option ).prop( "selected" ), true, "Make sure that a single option is selected, even when in an optgroup." );
-	assert.equal( jQuery( document ).prop( "nodeName" ), "#document", "prop works correctly on document nodes (bug #7451)." );
+	assert.equal( jQuery( document ).prop( "nodeName" ), "#document", "prop works correctly on document nodes (bug trac-7451)." );
 
 	attributeNode = document.createAttribute( "irrelevant" );
 	commentNode = document.createComment( "some comment" );
 	textNode = document.createTextNode( "some text" );
 	obj = {};
 	jQuery.each( [ document, attributeNode, commentNode, textNode, obj, "#firstp" ], function( i, ele ) {
-		assert.strictEqual( jQuery( ele ).prop( "nonexisting" ), undefined, "prop works correctly for non existing attributes (bug #7500)." );
+		assert.strictEqual( jQuery( ele ).prop( "nonexisting" ), undefined, "prop works correctly for non existing attributes (bug trac-7500)." );
 	} );
 
 	obj = {};
 	jQuery.each( [ document, obj ], function( i, ele ) {
 		var $ele = jQuery( ele );
 		$ele.prop( "nonexisting", "foo" );
-		assert.equal( $ele.prop( "nonexisting" ), "foo", "prop(name, value) works correctly for non existing attributes (bug #7500)." );
+		assert.equal( $ele.prop( "nonexisting" ), "foo", "prop(name, value) works correctly for non existing attributes (bug trac-7500)." );
 	} );
 	jQuery( document ).removeProp( "nonexisting" );
 
 	$form = jQuery( "#form" ).prop( "enctype", "multipart/form-data" );
-	assert.equal( $form.prop( "enctype" ), "multipart/form-data", "Set the enctype of a form (encoding in IE6/7 #6743)" );
+	assert.equal( $form.prop( "enctype" ), "multipart/form-data", "Set the enctype of a form (encoding in IE6/7 trac-6743)" );
 } );
 
 QUnit.test( "prop('tabindex')", function( assert ) {
@@ -856,12 +856,12 @@ QUnit.test( "removeProp(String)", function( assert ) {
 	jQuery.each( [ document, obj ], function( i, ele ) {
 		var $ele = jQuery( ele );
 		$ele.prop( "nonexisting", "foo" ).removeProp( "nonexisting" );
-		assert.strictEqual( ele[ "nonexisting" ], undefined, "removeProp works correctly on non DOM element nodes (bug #7500)." );
+		assert.strictEqual( ele[ "nonexisting" ], undefined, "removeProp works correctly on non DOM element nodes (bug trac-7500)." );
 	} );
 	jQuery.each( [ commentNode, textNode, attributeNode ], function( i, ele ) {
 		var $ele = jQuery( ele );
 		$ele.prop( "nonexisting", "foo" ).removeProp( "nonexisting" );
-		assert.strictEqual( ele[ "nonexisting" ], undefined, "removeProp works correctly on non DOM element nodes (bug #7500)." );
+		assert.strictEqual( ele[ "nonexisting" ], undefined, "removeProp works correctly on non DOM element nodes (bug trac-7500)." );
 	} );
 } );
 
@@ -880,7 +880,7 @@ QUnit.test( "val()", function( assert ) {
 	var checks, $button;
 	assert.equal( jQuery( "#text1" ).val(), "Test", "Check for value of input element" );
 
-	// ticket #1714 this caused a JS error in IE
+	// ticket trac-1714 this caused a JS error in IE
 	assert.equal( jQuery( "#first" ).val(), "", "Check a paragraph element to see if it has a value" );
 	assert.ok( jQuery( [] ).val() === undefined, "Check an empty jQuery object will return undefined from val" );
 
@@ -918,7 +918,7 @@ QUnit.test( "val()", function( assert ) {
 	assert.strictEqual(
 		jQuery( "<select name='select12584' id='select12584'><option value='1' disabled='disabled'>1</option></select>" ).val(),
 		null,
-		"Select-one with only option disabled (#12584)"
+		"Select-one with only option disabled (trac-12584)"
 	);
 
 	if ( jQuery.fn.serialize ) {
@@ -966,7 +966,7 @@ QUnit.test( "val() with non-matching values on dropdown list", function( assert
 	select6.remove();
 } );
 
-QUnit.test( "val() respects numbers without exception (Bug #9319) - progress",
+QUnit.test( "val() respects numbers without exception (Bug trac-9319) - progress",
 	function( assert ) {
 
 	assert.expect( 2 );
@@ -983,7 +983,7 @@ function( assert ) {
 } );
 
 // IE doesn't support <meter>
-QUnit.testUnlessIE( "val() respects numbers without exception (Bug #9319) - meter",
+QUnit.testUnlessIE( "val() respects numbers without exception (Bug trac-9319) - meter",
 	function( assert ) {
 
 	assert.expect( 2 );
@@ -1045,7 +1045,7 @@ QUnit.test( "val(Function)", function( assert ) {
 	testVal( functionReturningObj, assert );
 } );
 
-QUnit.test( "val(Array of Numbers) (Bug #7123)", function( assert ) {
+QUnit.test( "val(Array of Numbers) (Bug trac-7123)", function( assert ) {
 	assert.expect( 4 );
 	jQuery( "#form" ).append( "<input type='checkbox' name='arrayTest' value='1' /><input type='checkbox' name='arrayTest' value='2' /><input type='checkbox' name='arrayTest' value='3' checked='checked' /><input type='checkbox' name='arrayTest' value='4' />" );
 	var elements = jQuery( "#form input[name=arrayTest]" ).val( [ 1, 2 ] );
@@ -1109,7 +1109,7 @@ jQuery( "#select1" ).val( function( i, val ) {
 } );
 
 // testing if a form.reset() breaks a subsequent call to a select element's .val() (in IE only)
-QUnit.test( "val(select) after form.reset() (Bug #2551)", function( assert ) {
+QUnit.test( "val(select) after form.reset() (Bug trac-2551)", function( assert ) {
 	assert.expect( 3 );
 
 	jQuery( "<form id='kk' name='kk'><select id='kkk'><option value='cf'>cf</option><option value='gf'>gf</option></select></form>" ).appendTo( "#qunit-fixture" );
@@ -1644,6 +1644,44 @@ QUnit.test( "addClass, removeClass, hasClass on elements with classes with non-H
 	testMatches();
 } );
 
+( function() {
+	var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;
+
+	function expectClasses( assert, elem, classes ) {
+		var actualClassesSorted = ( elem.attr( "class" ).match( rnothtmlwhite ) || [] )
+			.sort().join( " " );
+		var classesSorted = classes.slice()
+			.sort().join( " " );
+		assert.equal( actualClassesSorted, classesSorted, "Expected classes present" );
+	}
+
+	QUnit.test( "addClass on arrays with falsy elements (gh-4998)", function( assert ) {
+		assert.expect( 3 );
+
+		var elem = jQuery( "<div class='a'></div>" );
+
+		elem.addClass( [ "b", "", "c" ] );
+		expectClasses( assert, elem, [ "a", "b", "c" ] );
+		elem.addClass( [ "", "d" ] );
+		expectClasses( assert, elem, [ "a", "b", "c", "d" ] );
+		elem.addClass( [ "e", "" ] );
+		expectClasses( assert, elem, [ "a", "b", "c", "d", "e" ] );
+	} );
+
+	QUnit.test( "removeClass on arrays with falsy elements (gh-4998)", function( assert ) {
+		assert.expect( 3 );
+
+		var elem = jQuery( "<div class='a b c d e'></div>" );
+
+		elem.removeClass( [ "e", "" ] );
+		expectClasses( assert, elem, [ "a", "b", "c", "d" ] );
+		elem.removeClass( [ "", "d" ] );
+		expectClasses( assert, elem, [ "a", "b", "c" ] );
+		elem.removeClass( [ "b", "", "c" ] );
+		expectClasses( assert, elem, [ "a" ] );
+	} );
+} )();
+
 QUnit.test( "contents().hasClass() returns correct values", function( assert ) {
 	assert.expect( 2 );
 
@@ -1654,7 +1692,7 @@ QUnit.test( "contents().hasClass() returns correct values", function( assert ) {
 	assert.ok( !$contents.hasClass( "undefined" ), "Did not find 'undefined' in $contents (correctly)" );
 } );
 
-QUnit.test( "hasClass correctly interprets non-space separators (#13835)", function( assert ) {
+QUnit.test( "hasClass correctly interprets non-space separators (trac-13835)", function( assert ) {
 	assert.expect( 4 );
 
 	var
@@ -1674,7 +1712,7 @@ QUnit.test( "hasClass correctly interprets non-space separators (#13835)", funct
 	} );
 } );
 
-QUnit.test( "coords returns correct values in IE6/IE7, see #10828", function( assert ) {
+QUnit.test( "coords returns correct values in IE6/IE7, see trac-10828", function( assert ) {
 	assert.expect( 1 );
 
 	var area,
@@ -1684,7 +1722,7 @@ QUnit.test( "coords returns correct values in IE6/IE7, see #10828", function( as
 	assert.equal( area.attr( "coords" ), "0,0,0,0", "did not retrieve coords correctly" );
 } );
 
-QUnit.test( "should not throw at $(option).val() (#14686)", function( assert ) {
+QUnit.test( "should not throw at $(option).val() (trac-14686)", function( assert ) {
 	assert.expect( 1 );
 
 	try {
@@ -1700,7 +1738,7 @@ QUnit.test( "option value not trimmed when setting via parent select", function(
 	assert.equal( jQuery( "<select><option> 2</option></select>" ).val( "2" ).val(), "2" );
 } );
 
-QUnit.test( "Insignificant white space returned for $(option).val() (#14858, gh-2978)", function( assert ) {
+QUnit.test( "Insignificant white space returned for $(option).val() (trac-14858, gh-2978)", function( assert ) {
 	assert.expect( 16 );
 
 	var val = jQuery( "<option></option>" ).val();
diff --git a/a.js b/b.js
index c1a6eacf..9802e6b9 100644
--- a/a.js
+++ b/b.js
@@ -100,7 +100,7 @@ QUnit.test( "jQuery.Callbacks( " + showFlags( flags ) + " ) - " + filterLabel, f
 					assert.strictEqual( cblist.disabled(), true, ".disabled() becomes true" );
 					assert.strictEqual( cblist.locked(), true, "disabling locks" );
 
-					// Emptying while firing (#13517)
+					// Emptying while firing (trac-13517)
 					cblist = jQuery.Callbacks( flags );
 					cblist.add( cblist.empty );
 					cblist.add( function() {
diff --git a/a.js b/b.js
index af355c62..d7e935a3 100644
--- a/a.js
+++ b/b.js
@@ -92,7 +92,7 @@ QUnit.test( "jQuery()", function( assert ) {
 	} catch(e){
 		pass = false;
 	}
-	assert.ok( pass, "jQuery('&lt;tag&gt;') needs optional document parameter to ease cross-frame DOM wrangling, see #968" );*/
+	assert.ok( pass, "jQuery('&lt;tag&gt;') needs optional document parameter to ease cross-frame DOM wrangling, see trac-968" );*/
 
 	assert.equal( code.length, 1, "Correct number of elements generated for code" );
 	assert.equal( code.parent().length, 0, "Make sure that the generated HTML has no parent." );
@@ -146,7 +146,7 @@ QUnit.test( "jQuery()", function( assert ) {
 	for ( i = 0; i < 3; ++i ) {
 		elem = jQuery( "<input type='text' value='TEST' />" );
 	}
-	assert.equal( elem[ 0 ].defaultValue, "TEST", "Ensure cached nodes are cloned properly (Bug #6655)" );
+	assert.equal( elem[ 0 ].defaultValue, "TEST", "Ensure cached nodes are cloned properly (Bug trac-6655)" );
 
 	elem = jQuery( "<input type='hidden'>", {} );
 	assert.strictEqual( elem[ 0 ].ownerDocument, document,
@@ -182,7 +182,7 @@ QUnit.test( "globalEval with 'use strict'", function( assert ) {
 	assert.equal( window.strictEvalTest, 1, "Test variable declarations are global (strict mode)" );
 } );
 
-QUnit.test( "globalEval execution after script injection (#7862)", function( assert ) {
+QUnit.test( "globalEval execution after script injection (trac-7862)", function( assert ) {
 	assert.expect( 1 );
 
 	var now,
@@ -475,7 +475,7 @@ QUnit.test( "jQuery('html')", function( assert ) {
 	j = jQuery( "<span>hi</span> there <!-- mon ami -->" );
 	assert.ok( j.length >= 2, "Check node,textnode,comment creation (some browsers delete comments)" );
 
-	assert.ok( !jQuery( "<option>test</option>" )[ 0 ].selected, "Make sure that options are auto-selected #2050" );
+	assert.ok( !jQuery( "<option>test</option>" )[ 0 ].selected, "Make sure that options are auto-selected trac-2050" );
 
 	assert.ok( jQuery( "<div></div>" )[ 0 ], "Create a div with closing tag." );
 	assert.ok( jQuery( "<table></table>" )[ 0 ], "Create a table with closing tag." );
@@ -516,7 +516,7 @@ QUnit.test( "jQuery(element with non-alphanumeric name)", function( assert ) {
 	} );
 } );
 
-QUnit.test( "jQuery('massive html #7990')", function( assert ) {
+QUnit.test( "jQuery('massive html trac-7990')", function( assert ) {
 	assert.expect( 3 );
 
 	var i,
@@ -538,7 +538,7 @@ QUnit.test( "jQuery('html', context)", function( assert ) {
 
 	var $div = jQuery( "<div></div>" )[ 0 ],
 		$span = jQuery( "<span></span>", $div );
-	assert.equal( $span.length, 1, "verify a span created with a div context works, #1763" );
+	assert.equal( $span.length, 1, "verify a span created with a div context works, trac-1763" );
 } );
 
 QUnit.test( "jQuery(selector, xml).text(str) - loaded via xml document", function( assert ) {
@@ -546,7 +546,7 @@ QUnit.test( "jQuery(selector, xml).text(str) - loaded via xml document", functio
 
 	var xml = createDashboardXML(),
 
-	// tests for #1419 where ie was a problem
+	// tests for trac-1419 where ie was a problem
 		tab = jQuery( "tab", xml ).eq( 0 );
 	assert.equal( tab.text(), "blabla", "verify initial text correct" );
 	tab.text( "newtext" );
@@ -803,7 +803,7 @@ 	callback = function( v, k ) {
 	result = jQuery.map( Array( 4 ), function( v, k ) {
 		return k % 2 ? k : [ k, k, k ];
 	} );
-	assert.equal( result.join( "" ), "00012223", "Array results flattened (#2616)" );
+	assert.equal( result.join( "" ), "00012223", "Array results flattened (trac-2616)" );
 
 	result = jQuery.map( [ [ [ 1, 2 ], 3 ], 4 ], function( v, k ) {
 		return v;
@@ -817,7 +817,7 @@ 	callback = function( v, k ) {
 		result = jQuery.map( Array( 300000 ), function( v, k ) {
 			return k;
 		} );
-		assert.equal( result.length, 300000, "Able to map 300000 records without any problems (#4320)" );
+		assert.equal( result.length, 300000, "Able to map 300000 records without any problems (gh-4320)" );
 	} else {
 		assert.ok( "skip", "Array#flat isn't supported in IE" );
 	}
@@ -854,14 +854,14 @@ QUnit.test( "jQuery.merge()", function( assert ) {
 		"First empty"
 	);
 
-	// Fixed at [5998], #3641
+	// Fixed at [5998], trac-3641
 	assert.deepEqual(
 		jQuery.merge( [ -2, -1 ], [ 0, 1, 2 ] ),
 		[ -2, -1, 0, 1, 2 ],
 		"Second array including a zero (falsy)"
 	);
 
-	// After fixing #5527
+	// After fixing trac-5527
 	assert.deepEqual(
 		jQuery.merge( [], [ null, undefined ] ),
 		[ null, undefined ],
@@ -1005,7 +1005,7 @@ QUnit.test( "jQuery.extend(Object, Object)", function( assert ) {
 
 	assert.ok( jQuery.extend( true, {}, nestedarray )[ "arr" ] !== arr, "Deep extend of object must clone child array" );
 
-	// #5991
+	// trac-5991
 	assert.ok( Array.isArray( jQuery.extend( true, { "arr": {} }, nestedarray )[ "arr" ] ), "Cloned array have to be an Array" );
 	assert.ok( jQuery.isPlainObject( jQuery.extend( true, { "arr": arr }, { "arr": {} } )[ "arr" ] ), "Cloned object have to be an plain object" );
 
@@ -1053,13 +1053,13 @@ QUnit.test( "jQuery.extend(Object, Object)", function( assert ) {
 	assert.deepEqual( target, { bar:5 }, "Check to make sure a recursive obj doesn't go never-ending loop by not copying it over" );
 
 	ret = jQuery.extend( true, { foo: [] }, { foo: [ 0 ] } ); // 1907
-	assert.equal( ret.foo.length, 1, "Check to make sure a value with coercion 'false' copies over when necessary to fix #1907" );
+	assert.equal( ret.foo.length, 1, "Check to make sure a value with coercion 'false' copies over when necessary to fix trac-1907" );
 
 	ret = jQuery.extend( true, { foo: "1,2,3" }, { foo: [ 1, 2, 3 ] } );
 	assert.ok( typeof ret.foo !== "string", "Check to make sure values equal with coercion (but not actually equal) overwrite correctly" );
 
 	ret = jQuery.extend( true, { foo:"bar" }, { foo:null } );
-	assert.ok( typeof ret.foo !== "undefined", "Make sure a null value doesn't crash with deep extend, for #1908" );
+	assert.ok( typeof ret.foo !== "undefined", "Make sure a null value doesn't crash with deep extend, for trac-1908" );
 
 	obj = { foo:null };
 	jQuery.extend( true, obj, { foo:"notnull" } );
@@ -1365,7 +1365,7 @@ QUnit.test( "jQuery.parseHTML", function( assert ) {
 	assert.equal( jQuery.parseHTML( "text" )[ 0 ].nodeType, 3, "Parsing text returns a text node" );
 	assert.equal( jQuery.parseHTML( "\t<div></div>" )[ 0 ].nodeValue, "\t", "Preserve leading whitespace" );
 
-	assert.equal( jQuery.parseHTML( " <div></div> " )[ 0 ].nodeType, 3, "Leading spaces are treated as text nodes (#11290)" );
+	assert.equal( jQuery.parseHTML( " <div></div> " )[ 0 ].nodeType, 3, "Leading spaces are treated as text nodes (trac-11290)" );
 
 	html = jQuery.parseHTML( "<div>test div</div>" );
 
@@ -1456,11 +1456,17 @@ QUnit.test( "jQuery.parseXML", function( assert ) {
 	column = columnMatch && columnMatch[ 1 ];
 
 	assert.strictEqual( line, "1", "reports error line" );
-	assert.strictEqual( column, "11", "reports error column" );
+
+	// Support: Firefox 96-97+
+	// Newer Firefox may report the column number smaller by 2 than it should.
+	// Accept both values until the issue is fixed.
+	// See https://bugzilla.mozilla.org/show_bug.cgi?id=1751796
+	assert.ok( [ "9", "11" ].indexOf( column ) > -1, "reports error column" );
+	// assert.strictEqual( column, "11", "reports error column" );
 } );
 
 testIframe(
-	"document ready when jQuery loaded asynchronously (#13655)",
+	"document ready when jQuery loaded asynchronously (trac-13655)",
 	"core/dynamic_ready.html",
 	function( assert, jQuery, window, document, ready ) {
 		assert.expect( 1 );
@@ -1469,7 +1475,7 @@ function( assert, jQuery, window, document, ready ) {
 );
 
 testIframe(
-	"Tolerating alias-masked DOM properties (#14074)",
+	"Tolerating alias-masked DOM properties (trac-14074)",
 	"core/aliased.html",
 	function( assert, jQuery, window, document, errors ) {
 		assert.expect( 1 );
@@ -1478,7 +1484,7 @@ function( assert, jQuery, window, document, errors ) {
 );
 
 testIframe(
-	"Don't call window.onready (#14802)",
+	"Don't call window.onready (trac-14802)",
 	"core/onready.html",
 	function( assert, jQuery, window, document, error ) {
 		assert.expect( 1 );
diff --git a/a.js b/b.js
index 100b8c8c..1c207e9f 100644
--- a/a.js
+++ b/b.js
@@ -33,7 +33,7 @@ QUnit.test( "css(String|Hash)", function( assert ) {
 
 	div2.remove();
 
-	// handle negative numbers by setting to zero #11604
+	// handle negative numbers by setting to zero trac-11604
 	jQuery( "#nothiddendiv" ).css( { "width": 1, "height": 1 } );
 
 	width = parseFloat( jQuery( "#nothiddendiv" ).css( "width" ) );
@@ -113,7 +113,7 @@ QUnit.test( "css(String|Hash)", function( assert ) {
 
 	div = jQuery( "<div></div>" ).css( { position: "absolute", "z-index": 1000 } ).appendTo( "#qunit-fixture" );
 	assert.strictEqual( div.css( "z-index" ), "1000",
-		"Make sure that a string z-index is returned from css('z-index') (#14432)." );
+		"Make sure that a string z-index is returned from css('z-index') (trac-14432)." );
 } );
 
 QUnit.test( "css() explicit and relative values", function( assert ) {
@@ -325,11 +325,11 @@ QUnit.test( "css(String, Object)", function( assert ) {
 	catch ( e ) {
 		success = false;
 	}
-	assert.ok( success, "Setting RGBA values does not throw Error (#5509)" );
+	assert.ok( success, "Setting RGBA values does not throw Error (trac-5509)" );
 
 	jQuery( "#foo" ).css( "font", "7px/21px sans-serif" );
 	assert.strictEqual( jQuery( "#foo" ).css( "line-height" ), "21px",
-		"Set font shorthand property (#14759)" );
+		"Set font shorthand property (trac-14759)" );
 } );
 
 QUnit.test( "css(String, Object) with negative values", function( assert ) {
@@ -699,7 +699,7 @@ QUnit.test( "show/hide detached nodes", function( assert ) {
 	} );
 } );
 
-QUnit.test( "hide hidden elements (bug #7141)", function( assert ) {
+QUnit.test( "hide hidden elements (bug trac-7141)", function( assert ) {
 	assert.expect( 3 );
 
 	var div = jQuery( "<div style='display:none'></div>" ).appendTo( "#qunit-fixture" );
@@ -712,7 +712,7 @@ QUnit.test( "hide hidden elements (bug #7141)", function( assert ) {
 	div.remove();
 } );
 
-QUnit.test( "show() after hide() should always set display to initial value (#14750)", function( assert ) {
+QUnit.test( "show() after hide() should always set display to initial value (trac-14750)", function( assert ) {
 	assert.expect( 1 );
 
 	var div = jQuery( "<div></div>" ),
@@ -988,7 +988,7 @@ QUnit.test( "show/hide 3.0, inline hidden", function( assert ) {
 	assert.strictEqual( x.toggle().css( "display" ), "none", "is hidden" );
 	assert.strictEqual( x.toggle().css( "display" ), "block", "is visible" );
 
-	// Ensure hide() is called when toggled (#12148)
+	// Ensure hide() is called when toggled (trac-12148)
 	oldHide = jQuery.fn.hide;
 	jQuery.fn.hide = function() {
 		assert.ok( true, name + " method called on toggle" );
@@ -1048,7 +1048,7 @@ 	jQuery.fn.hide = function() {
 	assert.strictEqual( $shadowChild.css( "display" ), "block", "is visible" );
 } );
 
-QUnit.test( "jQuery.css(elem, 'height') doesn't clear radio buttons (bug #1095)", function( assert ) {
+QUnit.test( "jQuery.css(elem, 'height') doesn't clear radio buttons (bug trac-1095)", function( assert ) {
 	assert.expect( 4 );
 
 	var $checkedtest = jQuery( "#checkedtest" );
@@ -1060,7 +1060,7 @@ QUnit.test( "jQuery.css(elem, 'height') doesn't clear radio buttons (bug #1095)"
 	assert.ok( !jQuery( "input[type='checkbox']", $checkedtest ).last().attr( "checked" ), "Check last checkbox still NOT checked." );
 } );
 
-QUnit.test( "internal ref to elem.runtimeStyle (bug #7608)", function( assert ) {
+QUnit.test( "internal ref to elem.runtimeStyle (bug trac-7608)", function( assert ) {
 	assert.expect( 1 );
 	var result = true;
 
@@ -1099,18 +1099,18 @@ QUnit.test( "internal ref to elem.runtimeStyle (bug #7608)", function( assert )
 	assert.equal( $child.css( "marginLeft" ), "25px", "auto margins are computed to pixels" );
 } );
 
-QUnit.test( "box model properties incorrectly returning % instead of px, see #10639 and #12088", function( assert ) {
+QUnit.test( "box model properties incorrectly returning % instead of px, see trac-10639 and trac-12088", function( assert ) {
 	assert.expect( 2 );
 
 	var container = jQuery( "<div></div>" ).width( 400 ).appendTo( "#qunit-fixture" ),
 		el = jQuery( "<div></div>" ).css( { "width": "50%", "marginRight": "50%" } ).appendTo( container ),
 		el2 = jQuery( "<div></div>" ).css( { "width": "50%", "minWidth": "300px", "marginLeft": "25%" } ).appendTo( container );
 
-	assert.equal( el.css( "marginRight" ), "200px", "css('marginRight') returning % instead of px, see #10639" );
-	assert.equal( el2.css( "marginLeft" ), "100px", "css('marginLeft') returning incorrect pixel value, see #12088" );
+	assert.equal( el.css( "marginRight" ), "200px", "css('marginRight') returning % instead of px, see trac-10639" );
+	assert.equal( el2.css( "marginLeft" ), "100px", "css('marginLeft') returning incorrect pixel value, see trac-12088" );
 } );
 
-QUnit.test( "widows & orphans #8936", function( assert ) {
+QUnit.test( "widows & orphans trac-8936", function( assert ) {
 
 	var $p = jQuery( "<p>" ).appendTo( "#qunit-fixture" );
 
@@ -1127,15 +1127,15 @@ QUnit.test( "widows & orphans #8936", function( assert ) {
 	$p.remove();
 } );
 
-QUnit.test( "can't get css for disconnected in IE<9, see #10254 and #8388", function( assert ) {
+QUnit.test( "can't get css for disconnected in IE<9, see trac-10254 and trac-8388", function( assert ) {
 	assert.expect( 2 );
 	var span, div;
 
 	span = jQuery( "<span></span>" ).css( "background-image", "url(" + baseURL + "1x1.jpg)" );
-	assert.notEqual( span.css( "background-image" ), null, "can't get background-image in IE<9, see #10254" );
+	assert.notEqual( span.css( "background-image" ), null, "can't get background-image in IE<9, see trac-10254" );
 
 	div = jQuery( "<div></div>" ).css( "top", 10 );
-	assert.equal( div.css( "top" ), "10px", "can't get top in IE<9, see #8388" );
+	assert.equal( div.css( "top" ), "10px", "can't get top in IE<9, see trac-8388" );
 } );
 
 QUnit.test( "Ensure styles are retrieving from parsed html on document fragments", function( assert ) {
@@ -1148,7 +1148,7 @@ QUnit.test( "Ensure styles are retrieving from parsed html on document fragments
 	assert.equal( $span.css( "font-size" ), "14px", "Font-size retrievable on parsed HTML node" );
 } );
 
-QUnit.test( "can't get background-position in IE<9, see #10796", function( assert ) {
+QUnit.test( "can't get background-position in IE<9, see trac-10796", function( assert ) {
 	var div = jQuery( "<div></div>" ).appendTo( "#qunit-fixture" ),
 		units = [
 			"0 0",
@@ -1167,22 +1167,22 @@ QUnit.test( "can't get background-position in IE<9, see #10796", function( asser
 
 	for ( ; i < l; i++ ) {
 		div.css( "background-position", units [ i ] );
-		assert.ok( div.css( "background-position" ), "can't get background-position in IE<9, see #10796" );
+		assert.ok( div.css( "background-position" ), "can't get background-position in IE<9, see trac-10796" );
 	}
 } );
 
 if ( jQuery.fn.offset ) {
-	QUnit.test( "percentage properties for left and top should be transformed to pixels, see #9505", function( assert ) {
+	QUnit.test( "percentage properties for left and top should be transformed to pixels, see trac-9505", function( assert ) {
 		assert.expect( 2 );
 		var parent = jQuery( "<div style='position:relative;width:200px;height:200px;margin:0;padding:0;border-width:0'></div>" ).appendTo( "#qunit-fixture" ),
 			div = jQuery( "<div style='position: absolute; width: 20px; height: 20px; top:50%; left:50%'></div>" ).appendTo( parent );
 
-		assert.equal( div.css( "top" ), "100px", "position properties not transformed to pixels, see #9505" );
-		assert.equal( div.css( "left" ), "100px", "position properties not transformed to pixels, see #9505" );
+		assert.equal( div.css( "top" ), "100px", "position properties not transformed to pixels, see trac-9505" );
+		assert.equal( div.css( "left" ), "100px", "position properties not transformed to pixels, see trac-9505" );
 	} );
 }
 
-QUnit.test( "Do not append px (#9548, #12990, #2792)", function( assert ) {
+QUnit.test( "Do not append px (trac-9548, trac-12990, gh-2792)", function( assert ) {
 	assert.expect( 4 );
 
 	var $div = jQuery( "<div>" ).appendTo( "#qunit-fixture" );
@@ -1335,16 +1335,16 @@ QUnit.test( "Append px to whitelisted properties", function( assert ) {
 	}
 } );
 
-QUnit.test( "css('width') and css('height') should respect box-sizing, see #11004", function( assert ) {
+QUnit.test( "css('width') and css('height') should respect box-sizing, see trac-11004", function( assert ) {
 	assert.expect( 4 );
 
 	var el_dis = jQuery( "<div style='width:300px;height:300px;margin:2px;padding:2px;box-sizing:border-box;'>test</div>" ),
 		el = el_dis.clone().appendTo( "#qunit-fixture" );
 
-	assert.equal( el.css( "width" ), el.css( "width", el.css( "width" ) ).css( "width" ), "css('width') is not respecting box-sizing, see #11004" );
-	assert.equal( el_dis.css( "width" ), el_dis.css( "width", el_dis.css( "width" ) ).css( "width" ), "css('width') is not respecting box-sizing for disconnected element, see #11004" );
-	assert.equal( el.css( "height" ), el.css( "height", el.css( "height" ) ).css( "height" ), "css('height') is not respecting box-sizing, see #11004" );
-	assert.equal( el_dis.css( "height" ), el_dis.css( "height", el_dis.css( "height" ) ).css( "height" ), "css('height') is not respecting box-sizing for disconnected element, see #11004" );
+	assert.equal( el.css( "width" ), el.css( "width", el.css( "width" ) ).css( "width" ), "css('width') is not respecting box-sizing, see trac-11004" );
+	assert.equal( el_dis.css( "width" ), el_dis.css( "width", el_dis.css( "width" ) ).css( "width" ), "css('width') is not respecting box-sizing for disconnected element, see trac-11004" );
+	assert.equal( el.css( "height" ), el.css( "height", el.css( "height" ) ).css( "height" ), "css('height') is not respecting box-sizing, see trac-11004" );
+	assert.equal( el_dis.css( "height" ), el_dis.css( "height", el_dis.css( "height" ) ).css( "height" ), "css('height') is not respecting box-sizing for disconnected element, see trac-11004" );
 } );
 
 QUnit.test( "table rows width/height should be unaffected by inline styles", function( assert ) {
@@ -1368,7 +1368,7 @@ QUnit.test( "table rows width/height should be unaffected by inline styles", fun
 } );
 
 testIframe(
-	"css('width') should work correctly before document ready (#14084)",
+	"css('width') should work correctly before document ready (trac-14084)",
 	"css/cssWidthBeforeDocReady.html",
 	function( assert, jQuery, window, document, cssWidthBeforeDocReady ) {
 		assert.expect( 1 );
@@ -1409,13 +1409,13 @@ function( assert, jQuery, window, document, widthBeforeSet, widthAfterSet ) {
 		"css('height') should return fractional values" );
 } );
 
-QUnit.test( "certain css values of 'normal' should be convertable to a number, see #8627", function( assert ) {
+QUnit.test( "certain css values of 'normal' should be convertable to a number, see trac-8627", function( assert ) {
 	assert.expect( 3 );
 
 	var el = jQuery( "<div style='letter-spacing:normal;font-weight:normal;'>test</div>" ).appendTo( "#qunit-fixture" );
 
-	assert.ok( !isNaN( parseFloat( el.css( "letterSpacing" ) ) ), "css('letterSpacing') not convertable to number, see #8627" );
-	assert.ok( !isNaN( parseFloat( el.css( "fontWeight" ) ) ), "css('fontWeight') not convertable to number, see #8627" );
+	assert.ok( !isNaN( parseFloat( el.css( "letterSpacing" ) ) ), "css('letterSpacing') not convertable to number, see trac-8627" );
+	assert.ok( !isNaN( parseFloat( el.css( "fontWeight" ) ) ), "css('fontWeight') not convertable to number, see trac-8627" );
 	assert.equal( typeof el.css( "fontWeight" ), "string", ".css() returns a string" );
 } );
 
@@ -1459,7 +1459,7 @@ QUnit.test( "cssHooks - expand", function( assert ) {
 
 } );
 
-QUnit.test( "css opacity consistency across browsers (#12685)", function( assert ) {
+QUnit.test( "css opacity consistency across browsers (trac-12685)", function( assert ) {
 	assert.expect( 3 );
 
 	var el,
@@ -1487,8 +1487,8 @@ QUnit.test( "css opacity consistency across browsers (#12685)", function( assert
 	assert.ok( !jQuery( "#nothiddendiv" ).is( ":visible" ), "Modified CSS display: Assert element is hidden" );
 	jQuery( "#nothiddendiv" ).css( { "display": "block" } );
 	assert.ok( jQuery( "#nothiddendiv" ).is( ":visible" ), "Modified CSS display: Assert element is visible" );
-	assert.ok( !jQuery( window ).is( ":visible" ), "Calling is(':visible') on window does not throw an exception (#10267)." );
-	assert.ok( !jQuery( document ).is( ":visible" ), "Calling is(':visible') on document does not throw an exception (#10267)." );
+	assert.ok( !jQuery( window ).is( ":visible" ), "Calling is(':visible') on window does not throw an exception (trac-10267)." );
+	assert.ok( !jQuery( document ).is( ":visible" ), "Calling is(':visible') on document does not throw an exception (trac-10267)." );
 
 	assert.ok( jQuery( "#nothiddendiv" ).is( ":visible" ), "Modifying CSS display: Assert element is visible" );
 	jQuery( "#nothiddendiv" ).css( "display", "none" );
@@ -1507,9 +1507,9 @@ QUnit.test( "css opacity consistency across browsers (#12685)", function( assert
 
 	$table = jQuery( "#table" );
 	$table.html( "<tr><td style='display:none'>cell</td><td>cell</td></tr>" );
-	assert.equal( jQuery( "#table td:visible" ).length, 1, "hidden cell is not perceived as visible (#4512). Works on table elements" );
+	assert.equal( jQuery( "#table td:visible" ).length, 1, "hidden cell is not perceived as visible (trac-4512). Works on table elements" );
 	$table.css( "display", "none" ).html( "<tr><td>cell</td><td>cell</td></tr>" );
-	assert.equal( jQuery( "#table td:visible" ).length, 0, "hidden cell children not perceived as visible (#4512)" );
+	assert.equal( jQuery( "#table td:visible" ).length, 0, "hidden cell children not perceived as visible (trac-4512)" );
 
 	if ( QUnit.jQuerySelectorsPos ) {
 		assert.t( "Is Visible", "#qunit-fixture div:visible:lt(2)", [ "foo", "nothiddendiv" ] );
@@ -1524,7 +1524,7 @@ QUnit.test( "css opacity consistency across browsers (#12685)", function( assert
 	assert.ok( $a.is( ":visible" ), "Anchor tag with flow content is visible (gh-2227)" );
 } );
 
-QUnit.test( "Keep the last style if the new one isn't recognized by the browser (#14836)", function( assert ) {
+QUnit.test( "Keep the last style if the new one isn't recognized by the browser (trac-14836)", function( assert ) {
 	assert.expect( 1 );
 
 	var el = jQuery( "<div></div>" ).css( "position", "absolute" ).css( "position", "fake value" );
@@ -1551,7 +1551,7 @@ QUnit.test( "Reset the style if set to an empty string", function( assert ) {
 } );
 
 QUnit.test(
-	"Clearing a Cloned Element's Style Shouldn't Clear the Original Element's Style (#8908)",
+	"Clearing a Cloned Element's Style Shouldn't Clear the Original Element's Style (trac-8908)",
 	function( assert ) {
 		assert.expect( 24 );
 		var done = assert.async();
@@ -1626,7 +1626,7 @@ function( assert ) {
 	}
 );
 
-QUnit.test( "Don't append px to CSS \"order\" value (#14049)", function( assert ) {
+QUnit.test( "Don't append px to CSS \"order\" value (trac-14049)", function( assert ) {
 	assert.expect( 1 );
 
 	var $elem = jQuery( "<div></div>" );
@@ -1635,7 +1635,7 @@ QUnit.test( "Don't append px to CSS \"order\" value (#14049)", function( assert
 	assert.equal( $elem.css( "order" ), "2", "2 on order" );
 } );
 
-QUnit.test( "Do not throw on frame elements from css method (#15098)", function( assert ) {
+QUnit.test( "Do not throw on frame elements from css method (trac-15098)", function( assert ) {
 	assert.expect( 1 );
 
 	var frameWin, frameDoc,
diff --git a/a.js b/b.js
index 301bee91..2a7db814 100644
--- a/a.js
+++ b/b.js
@@ -143,7 +143,7 @@ QUnit.test( "jQuery.data({})", function( assert ) {
 QUnit.test( "jQuery.data(window)", function( assert ) {
 	assert.expect( 25 );
 
-	// remove bound handlers from window object to stop potential false positives caused by fix for #5280 in
+	// remove bound handlers from window object to stop potential false positives caused by fix for trac-5280 in
 	// transports/xhr.js
 	jQuery( window ).off( "unload" );
 
@@ -172,7 +172,7 @@ QUnit.test( "jQuery.data(object/flash)", function( assert ) {
 } );
 
 // attempting to access the data of an undefined jQuery element should be undefined
-QUnit.test( "jQuery().data() === undefined (#14101)", function( assert ) {
+QUnit.test( "jQuery().data() === undefined (trac-14101)", function( assert ) {
 	assert.expect( 2 );
 
 	assert.strictEqual( jQuery().data(), undefined );
@@ -201,7 +201,7 @@ QUnit.test( ".data()", function( assert ) {
 
 	dataObj = jQuery.extend( true, {}, jQuery( obj ).data() );
 
-	assert.deepEqual( dataObj, { "foo": "baz" }, "Retrieve data object from a wrapped JS object (#7524)" );
+	assert.deepEqual( dataObj, { "foo": "baz" }, "Retrieve data object from a wrapped JS object (trac-7524)" );
 } );
 
 function testDataTypes( $obj, assert ) {
@@ -232,7 +232,7 @@ QUnit.test( "jQuery(Element).data(String, Object).data(String)", function( asser
 	assert.strictEqual( div.data( "test" ), undefined, "No data exists initially" );
 	assert.strictEqual( div.data( "test", "success" ).data( "test" ), "success", "Data added" );
 	assert.strictEqual( div.data( "test", "overwritten" ).data( "test" ), "overwritten", "Data overwritten" );
-	assert.strictEqual( div.data( "test", undefined ).data( "test" ), "overwritten", ".data(key,undefined) does nothing but is chainable (#5571)" );
+	assert.strictEqual( div.data( "test", undefined ).data( "test" ), "overwritten", ".data(key,undefined) does nothing but is chainable (trac-5571)" );
 	assert.strictEqual( div.data( "notexist" ), undefined, "No data exists for unset key" );
 	testDataTypes( div, assert );
 
@@ -242,7 +242,7 @@ QUnit.test( "jQuery(Element).data(String, Object).data(String)", function( asser
 QUnit.test( "jQuery(plain Object).data(String, Object).data(String)", function( assert ) {
 	assert.expect( 16 );
 
-	// #3748
+	// trac-3748
 	var $obj = jQuery( { exists: true } );
 	assert.strictEqual( $obj.data( "nothing" ), undefined, "Non-existent data returns undefined" );
 	assert.strictEqual( $obj.data( "exists" ), undefined, "Object properties are not returned as data" );
@@ -253,7 +253,7 @@ QUnit.test( "jQuery(plain Object).data(String, Object).data(String)", function(
 	assert.deepEqual( $obj[ 0 ], { exists: true }, "removeData does not clear the object" );
 } );
 
-QUnit.test( ".data(object) does not retain references. #13815", function( assert ) {
+QUnit.test( ".data(object) does not retain references. trac-13815", function( assert ) {
 	assert.expect( 2 );
 
 	var $divs = jQuery( "<div></div><div></div>" ).appendTo( "#qunit-fixture" );
@@ -290,7 +290,7 @@ QUnit.test( "data-* attributes", function( assert ) {
 
 	child.appendTo( "#qunit-fixture" );
 	assert.equal( child.data( "myobj" ), "old data", "Value accessed from data-* attribute" );
-	assert.equal( child.data( "foo-42" ), "boosh", "camelCasing does not affect numbers (#1751)" );
+	assert.equal( child.data( "foo-42" ), "boosh", "camelCasing does not affect numbers (gh-1751)" );
 
 	child.data( "myobj", "replaced" );
 	assert.equal( child.data( "myobj" ), "replaced", "Original data overwritten" );
@@ -506,7 +506,7 @@ QUnit.test( ".removeData()", function( assert ) {
 	assert.equal( div.data( "test.foo" ), undefined, "Make sure data is intact" );
 } );
 
-QUnit.test( "JSON serialization (#8108)", function( assert ) {
+QUnit.test( "JSON serialization (trac-8108)", function( assert ) {
 	assert.expect( 1 );
 
 	var obj = { "foo": "bar" };
@@ -560,7 +560,7 @@ QUnit.test( ".data should not miss preset data-* w/ hyphenated property names",
 	} );
 } );
 
-QUnit.test( "jQuery.data should not miss data-* w/ hyphenated property names #14047", function( assert ) {
+QUnit.test( "jQuery.data should not miss data-* w/ hyphenated property names trac-14047", function( assert ) {
 
 	assert.expect( 1 );
 
@@ -774,7 +774,7 @@ QUnit.test( ".data supports interoperable removal of hyphenated/camelCase proper
 	} );
 } );
 
-QUnit.test( ".data supports interoperable removal of properties SET TWICE #13850", function( assert ) {
+QUnit.test( ".data supports interoperable removal of properties SET TWICE trac-13850", function( assert ) {
 	var div = jQuery( "<div>" ).appendTo( "#qunit-fixture" ),
 		datas = {
 			"non-empty": "a string",
@@ -800,7 +800,7 @@ QUnit.test( ".data supports interoperable removal of properties SET TWICE #13850
 	} );
 } );
 
-QUnit.test( ".removeData supports removal of hyphenated properties via array (#12786, gh-2257)", function( assert ) {
+QUnit.test( ".removeData supports removal of hyphenated properties via array (trac-12786, gh-2257)", function( assert ) {
 	assert.expect( 4 );
 
 	var div, plain, compare;
@@ -833,7 +833,7 @@ QUnit.test( ".removeData supports removal of hyphenated properties via array (#1
 } );
 
 // Test originally by Moschel
-QUnit.test( ".removeData should not throw exceptions. (#10080)", function( assert ) {
+QUnit.test( ".removeData should not throw exceptions. (trac-10080)", function( assert ) {
 	var done = assert.async();
 	assert.expect( 1 );
 	var frame = jQuery( "#loadediframe" );
@@ -846,7 +846,7 @@ jQuery( frame[ 0 ].contentWindow ).on( "unload", function() {
 	frame.attr( "src", baseURL + "iframe.html?param=true" );
 } );
 
-QUnit.test( ".data only checks element attributes once. #8909", function( assert ) {
+QUnit.test( ".data only checks element attributes once. trac-8909", function( assert ) {
 	assert.expect( 2 );
 	var testing = {
 			"test": "testing",
@@ -874,7 +874,7 @@ QUnit.test( "data-* with JSON value can have newlines", function( assert ) {
 	x.remove();
 } );
 
-QUnit.test( ".data doesn't throw when calling selection is empty. #13551", function( assert ) {
+QUnit.test( ".data doesn't throw when calling selection is empty. trac-13551", function( assert ) {
 	assert.expect( 1 );
 
 	try {
@@ -911,7 +911,7 @@ QUnit.test( "acceptData", function( assert ) {
 	assert.equal( jQuery( form ) .data( "test", 42 ).data( "test" ), 42, "form with aliased DOM properties" );
 } );
 
-QUnit.test( "Check proper data removal of non-element descendants nodes (#8335)", function( assert ) {
+QUnit.test( "Check proper data removal of non-element descendants nodes (trac-8335)", function( assert ) {
 	assert.expect( 1 );
 
 	var div = jQuery( "<div>text</div>" ),
@@ -924,7 +924,7 @@ QUnit.test( "Check proper data removal of non-element descendants nodes (#8335)"
 } );
 
 testIframe(
-	"enumerate data attrs on body (#14894)",
+	"enumerate data attrs on body (trac-14894)",
 	"data/dataAttrs.html",
 	function( assert, jQuery, window, document, result ) {
 		assert.expect( 1 );
diff --git a/a.js b/b.js
index d6a15cd7..dc82eb6c 100644
--- a/a.js
+++ b/b.js
@@ -77,7 +77,7 @@ jQuery( "#firstp" )
 	elem.remove();
 
 	jQuery( "#check1" ).click( function() {
-		assert.ok( true, "click event handler for checkbox gets fired twice, see #815" );
+		assert.ok( true, "click event handler for checkbox gets fired twice, see trac-815" );
 	} ).click();
 
 	counter = 0;
diff --git a/a.js b/b.js
index a4485791..48225999 100644
--- a/a.js
+++ b/b.js
@@ -38,7 +38,7 @@ function testWidth( val, assert ) {
 	$div.css( "display", "none" );
 	assert.equal( $div.width(), 30, "Test hidden div" );
 	$div.css( "display", "" );
-	$div.width( val( -1 ) ); // handle negative numbers by setting to 0 #11604
+	$div.width( val( -1 ) ); // handle negative numbers by setting to 0 trac-11604
 	assert.equal( $div.width(), 0, "Test negative width normalized to 0" );
 	$div.css( "padding", "20px" );
 	assert.equal( $div.width(), 0, "Test padding specified with pixels" );
@@ -89,7 +89,7 @@ function testHeight( val, assert ) {
 	$div.css( "display", "none" );
 	assert.equal( $div.height(), 30, "Test hidden div" );
 	$div.css( "display", "" );
-	$div.height( val( -1 ) ); // handle negative numbers by setting to 0 #11604
+	$div.height( val( -1 ) ); // handle negative numbers by setting to 0 trac-11604
 	assert.equal( $div.height(), 0, "Test negative height normalized to 0" );
 	$div.css( "padding", "20px" );
 	assert.equal( $div.height(), 0, "Test padding specified with pixels" );
@@ -279,7 +279,7 @@ QUnit.test( "outerHeight()", function( assert ) {
 	div.remove();
 } );
 
-QUnit.test( "child of a hidden elem (or unconnected node) has accurate inner/outer/Width()/Height()  see #9441 #9300", function( assert ) {
+QUnit.test( "child of a hidden elem (or unconnected node) has accurate inner/outer/Width()/Height()  see trac-9441 trac-9300", function( assert ) {
 	assert.expect( 16 );
 
 	// setup html
@@ -290,33 +290,33 @@ QUnit.test( "child of a hidden elem (or unconnected node) has accurate inner/out
 	$divNormal.appendTo( "body" );
 
 	// tests that child div of a hidden div works the same as a normal div
-	assert.equal( $divChild.width(), $divNormal.width(), "child of a hidden element width() is wrong see #9441" );
-	assert.equal( $divChild.innerWidth(), $divNormal.innerWidth(), "child of a hidden element innerWidth() is wrong see #9441" );
-	assert.equal( $divChild.outerWidth(), $divNormal.outerWidth(), "child of a hidden element outerWidth() is wrong see #9441" );
-	assert.equal( $divChild.outerWidth( true ), $divNormal.outerWidth( true ), "child of a hidden element outerWidth( true ) is wrong see #9300" );
+	assert.equal( $divChild.width(), $divNormal.width(), "child of a hidden element width() is wrong see trac-9441" );
+	assert.equal( $divChild.innerWidth(), $divNormal.innerWidth(), "child of a hidden element innerWidth() is wrong see trac-9441" );
+	assert.equal( $divChild.outerWidth(), $divNormal.outerWidth(), "child of a hidden element outerWidth() is wrong see trac-9441" );
+	assert.equal( $divChild.outerWidth( true ), $divNormal.outerWidth( true ), "child of a hidden element outerWidth( true ) is wrong see trac-9300" );
 
-	assert.equal( $divChild.height(), $divNormal.height(), "child of a hidden element height() is wrong see #9441" );
-	assert.equal( $divChild.innerHeight(), $divNormal.innerHeight(), "child of a hidden element innerHeight() is wrong see #9441" );
-	assert.equal( $divChild.outerHeight(), $divNormal.outerHeight(), "child of a hidden element outerHeight() is wrong see #9441" );
-	assert.equal( $divChild.outerHeight( true ), $divNormal.outerHeight( true ), "child of a hidden element outerHeight( true ) is wrong see #9300" );
+	assert.equal( $divChild.height(), $divNormal.height(), "child of a hidden element height() is wrong see trac-9441" );
+	assert.equal( $divChild.innerHeight(), $divNormal.innerHeight(), "child of a hidden element innerHeight() is wrong see trac-9441" );
+	assert.equal( $divChild.outerHeight(), $divNormal.outerHeight(), "child of a hidden element outerHeight() is wrong see trac-9441" );
+	assert.equal( $divChild.outerHeight( true ), $divNormal.outerHeight( true ), "child of a hidden element outerHeight( true ) is wrong see trac-9300" );
 
 	// tests that child div of an unconnected div works the same as a normal div
-	assert.equal( $divUnconnected.width(), $divNormal.width(), "unconnected element width() is wrong see #9441" );
-	assert.equal( $divUnconnected.innerWidth(), $divNormal.innerWidth(), "unconnected element innerWidth() is wrong see #9441" );
-	assert.equal( $divUnconnected.outerWidth(), $divNormal.outerWidth(), "unconnected element outerWidth() is wrong see #9441" );
-	assert.equal( $divUnconnected.outerWidth( true ), $divNormal.outerWidth( true ), "unconnected element outerWidth( true ) is wrong see #9300" );
+	assert.equal( $divUnconnected.width(), $divNormal.width(), "unconnected element width() is wrong see trac-9441" );
+	assert.equal( $divUnconnected.innerWidth(), $divNormal.innerWidth(), "unconnected element innerWidth() is wrong see trac-9441" );
+	assert.equal( $divUnconnected.outerWidth(), $divNormal.outerWidth(), "unconnected element outerWidth() is wrong see trac-9441" );
+	assert.equal( $divUnconnected.outerWidth( true ), $divNormal.outerWidth( true ), "unconnected element outerWidth( true ) is wrong see trac-9300" );
 
-	assert.equal( $divUnconnected.height(), $divNormal.height(), "unconnected element height() is wrong see #9441" );
-	assert.equal( $divUnconnected.innerHeight(), $divNormal.innerHeight(), "unconnected element innerHeight() is wrong see #9441" );
-	assert.equal( $divUnconnected.outerHeight(), $divNormal.outerHeight(), "unconnected element outerHeight() is wrong see #9441" );
-	assert.equal( $divUnconnected.outerHeight( true ), $divNormal.outerHeight( true ), "unconnected element outerHeight( true ) is wrong see #9300" );
+	assert.equal( $divUnconnected.height(), $divNormal.height(), "unconnected element height() is wrong see trac-9441" );
+	assert.equal( $divUnconnected.innerHeight(), $divNormal.innerHeight(), "unconnected element innerHeight() is wrong see trac-9441" );
+	assert.equal( $divUnconnected.outerHeight(), $divNormal.outerHeight(), "unconnected element outerHeight() is wrong see trac-9441" );
+	assert.equal( $divUnconnected.outerHeight( true ), $divNormal.outerHeight( true ), "unconnected element outerHeight( true ) is wrong see trac-9300" );
 
 	// teardown html
 	$divHiddenParent.remove();
 	$divNormal.remove();
 } );
 
-QUnit.test( "getting dimensions shouldn't modify runtimeStyle see #9233", function( assert ) {
+QUnit.test( "getting dimensions shouldn't modify runtimeStyle see trac-9233", function( assert ) {
 	assert.expect( 1 );
 
 	var $div = jQuery( "<div>" ).appendTo( "#qunit-fixture" ),
@@ -331,9 +331,9 @@ QUnit.test( "getting dimensions shouldn't modify runtimeStyle see #9233", functi
 	$div.outerWidth( true );
 
 	if ( runtimeStyle ) {
-		assert.equal( div.runtimeStyle.left, "11em", "getting dimensions modifies runtimeStyle, see #9233" );
+		assert.equal( div.runtimeStyle.left, "11em", "getting dimensions modifies runtimeStyle, see trac-9233" );
 	} else {
-		assert.ok( true, "this browser doesn't support runtimeStyle, see #9233" );
+		assert.ok( true, "this browser doesn't support runtimeStyle, see trac-9233" );
 	}
 
 	$div.remove();
@@ -348,8 +348,8 @@ QUnit.test( "table dimensions", function( assert ) {
 
 	table.find( "td" ).css( { "margin": 0, "padding": 0 } );
 
-	assert.equal( tdElem.width(), tdElem.width(), "width() doesn't alter dimension values of empty cells, see #11293" );
-	assert.equal( colElem.width(), 300, "col elements have width(), see #12243" );
+	assert.equal( tdElem.width(), tdElem.width(), "width() doesn't alter dimension values of empty cells, see trac-11293" );
+	assert.equal( colElem.width(), 300, "col elements have width(), see trac-12243" );
 } );
 
 QUnit.test( "SVG dimensions (basic content-box)", function( assert ) {
@@ -412,7 +412,7 @@ QUnit.test( "SVG dimensions (border-box)", function( assert ) {
 	svg.remove();
 } );
 
-QUnit.test( "box-sizing:border-box child of a hidden elem (or unconnected node) has accurate inner/outer/Width()/Height()  see #10413", function( assert ) {
+QUnit.test( "box-sizing:border-box child of a hidden elem (or unconnected node) has accurate inner/outer/Width()/Height()  see trac-10413", function( assert ) {
 	assert.expect( 16 );
 
 	// setup html
@@ -423,38 +423,38 @@ QUnit.test( "box-sizing:border-box child of a hidden elem (or unconnected node)
 	$divNormal.appendTo( "body" );
 
 	// tests that child div of a hidden div works the same as a normal div
-	assert.equal( $divChild.width(), $divNormal.width(), "child of a hidden element width() is wrong see #10413" );
-	assert.equal( $divChild.innerWidth(), $divNormal.innerWidth(), "child of a hidden element innerWidth() is wrong see #10413" );
-	assert.equal( $divChild.outerWidth(), $divNormal.outerWidth(), "child of a hidden element outerWidth() is wrong see #10413" );
-	assert.equal( $divChild.outerWidth( true ), $divNormal.outerWidth( true ), "child of a hidden element outerWidth( true ) is wrong see #10413" );
+	assert.equal( $divChild.width(), $divNormal.width(), "child of a hidden element width() is wrong see trac-10413" );
+	assert.equal( $divChild.innerWidth(), $divNormal.innerWidth(), "child of a hidden element innerWidth() is wrong see trac-10413" );
+	assert.equal( $divChild.outerWidth(), $divNormal.outerWidth(), "child of a hidden element outerWidth() is wrong see trac-10413" );
+	assert.equal( $divChild.outerWidth( true ), $divNormal.outerWidth( true ), "child of a hidden element outerWidth( true ) is wrong see trac-10413" );
 
-	assert.equal( $divChild.height(), $divNormal.height(), "child of a hidden element height() is wrong see #10413" );
-	assert.equal( $divChild.innerHeight(), $divNormal.innerHeight(), "child of a hidden element innerHeight() is wrong see #10413" );
-	assert.equal( $divChild.outerHeight(), $divNormal.outerHeight(), "child of a hidden element outerHeight() is wrong see #10413" );
-	assert.equal( $divChild.outerHeight( true ), $divNormal.outerHeight( true ), "child of a hidden element outerHeight( true ) is wrong see #10413" );
+	assert.equal( $divChild.height(), $divNormal.height(), "child of a hidden element height() is wrong see trac-10413" );
+	assert.equal( $divChild.innerHeight(), $divNormal.innerHeight(), "child of a hidden element innerHeight() is wrong see trac-10413" );
+	assert.equal( $divChild.outerHeight(), $divNormal.outerHeight(), "child of a hidden element outerHeight() is wrong see trac-10413" );
+	assert.equal( $divChild.outerHeight( true ), $divNormal.outerHeight( true ), "child of a hidden element outerHeight( true ) is wrong see trac-10413" );
 
 	// tests that child div of an unconnected div works the same as a normal div
-	assert.equal( $divUnconnected.width(), $divNormal.width(), "unconnected element width() is wrong see #10413" );
-	assert.equal( $divUnconnected.innerWidth(), $divNormal.innerWidth(), "unconnected element innerWidth() is wrong see #10413" );
-	assert.equal( $divUnconnected.outerWidth(), $divNormal.outerWidth(), "unconnected element outerWidth() is wrong see #10413" );
-	assert.equal( $divUnconnected.outerWidth( true ), $divNormal.outerWidth( true ), "unconnected element outerWidth( true ) is wrong see #10413" );
+	assert.equal( $divUnconnected.width(), $divNormal.width(), "unconnected element width() is wrong see trac-10413" );
+	assert.equal( $divUnconnected.innerWidth(), $divNormal.innerWidth(), "unconnected element innerWidth() is wrong see trac-10413" );
+	assert.equal( $divUnconnected.outerWidth(), $divNormal.outerWidth(), "unconnected element outerWidth() is wrong see trac-10413" );
+	assert.equal( $divUnconnected.outerWidth( true ), $divNormal.outerWidth( true ), "unconnected element outerWidth( true ) is wrong see trac-10413" );
 
-	assert.equal( $divUnconnected.height(), $divNormal.height(), "unconnected element height() is wrong see #10413" );
-	assert.equal( $divUnconnected.innerHeight(), $divNormal.innerHeight(), "unconnected element innerHeight() is wrong see #10413" );
-	assert.equal( $divUnconnected.outerHeight(), $divNormal.outerHeight(), "unconnected element outerHeight() is wrong see #10413" );
-	assert.equal( $divUnconnected.outerHeight( true ), $divNormal.outerHeight( true ), "unconnected element outerHeight( true ) is wrong see #10413" );
+	assert.equal( $divUnconnected.height(), $divNormal.height(), "unconnected element height() is wrong see trac-10413" );
+	assert.equal( $divUnconnected.innerHeight(), $divNormal.innerHeight(), "unconnected element innerHeight() is wrong see trac-10413" );
+	assert.equal( $divUnconnected.outerHeight(), $divNormal.outerHeight(), "unconnected element outerHeight() is wrong see trac-10413" );
+	assert.equal( $divUnconnected.outerHeight( true ), $divNormal.outerHeight( true ), "unconnected element outerHeight( true ) is wrong see trac-10413" );
 
 	// teardown html
 	$divHiddenParent.remove();
 	$divNormal.remove();
 } );
 
-QUnit.test( "passing undefined is a setter #5571", function( assert ) {
+QUnit.test( "passing undefined is a setter trac-5571", function( assert ) {
 	assert.expect( 4 );
-	assert.equal( jQuery( "#nothiddendiv" ).height( 30 ).height( undefined ).height(), 30, ".height(undefined) is chainable (#5571)" );
-	assert.equal( jQuery( "#nothiddendiv" ).height( 30 ).innerHeight( undefined ).height(), 30, ".innerHeight(undefined) is chainable (#5571)" );
-	assert.equal( jQuery( "#nothiddendiv" ).height( 30 ).outerHeight( undefined ).height(), 30, ".outerHeight(undefined) is chainable (#5571)" );
-	assert.equal( jQuery( "#nothiddendiv" ).width( 30 ).width( undefined ).width(), 30, ".width(undefined) is chainable (#5571)" );
+	assert.equal( jQuery( "#nothiddendiv" ).height( 30 ).height( undefined ).height(), 30, ".height(undefined) is chainable (trac-5571)" );
+	assert.equal( jQuery( "#nothiddendiv" ).height( 30 ).innerHeight( undefined ).height(), 30, ".innerHeight(undefined) is chainable (trac-5571)" );
+	assert.equal( jQuery( "#nothiddendiv" ).height( 30 ).outerHeight( undefined ).height(), 30, ".outerHeight(undefined) is chainable (trac-5571)" );
+	assert.equal( jQuery( "#nothiddendiv" ).width( 30 ).width( undefined ).width(), 30, ".width(undefined) is chainable (trac-5571)" );
 } );
 
 QUnit.test( "setters with and without box-sizing:border-box", function( assert ) {
diff --git a/a.js b/b.js
index 2278b3af..245e75d4 100644
--- a/a.js
+++ b/b.js
@@ -5,7 +5,8 @@
 	return;
 }
 
-var oldRaf = window.requestAnimationFrame,
+var fxInterval = 13,
+	oldRaf = window.requestAnimationFrame,
 	hideOptions = {
 		inline: function() { jQuery.style( this, "display", "none" ); },
 		cascade: function() { this.className = "hidden"; }
@@ -15,15 +16,12 @@
 	beforeEach: function() {
 		this.sandbox = sinon.createSandbox();
 		this.clock = this.sandbox.useFakeTimers( 505877050 );
-		this._oldInterval = jQuery.fx.interval;
 		window.requestAnimationFrame = null;
 		jQuery.fx.step = {};
-		jQuery.fx.interval = 10;
 	},
 	afterEach: function() {
 		this.sandbox.restore();
 		jQuery.fx.stop();
-		jQuery.fx.interval = this._oldInterval;
 		window.requestAnimationFrame = oldRaf;
 		return moduleTeardown.apply( this, arguments );
 	}
@@ -141,7 +139,7 @@ QUnit.test( "show(Number) - " + type + " hidden", function( assert ) {
 		// Note: inline elements are expected to be inline-block
 		// because we're showing width/height
 		// Can't animate width/height inline
-		// See #14344
+		// See trac-14344
 		var test = {
 			"div": "block",
 			"p": "block",
@@ -160,9 +158,9 @@ QUnit.test( "show(Number) - " + type + " hidden", function( assert ) {
 		};
 
 		jQuery.each( test, function( selector ) {
-			jQuery( selector, "#show-tests" ).show( 100 );
+			jQuery( selector, "#show-tests" ).show( fxInterval * 10 );
 		} );
-		this.clock.tick( 50 );
+		this.clock.tick( fxInterval * 5 );
 		jQuery.each( test, function( selector, expected ) {
 			jQuery( selector, "#show-tests" ).each( function() {
 				assert.equal(
@@ -172,7 +170,7 @@ QUnit.test( "show(Number) - " + type + " hidden", function( assert ) {
 				);
 			} );
 		} );
-		this.clock.tick( 50 );
+		this.clock.tick( fxInterval * 5 );
 		jQuery.each( test, function( selector, expected ) {
 			jQuery( selector, "#show-tests" ).each( function() {
 				assert.equal( jQuery( this ).css( "display" ), expected,
@@ -184,7 +182,7 @@ QUnit.test( "show(Number) - " + type + " hidden", function( assert ) {
 	} );
 } );
 
-// Supports #7397
+// Supports trac-7397
 supportjQuery.each( hideOptions, function( type, setup ) {
 	QUnit.test( "Persist correct display value - " + type + " hidden", function( assert ) {
 		assert.expect( 3 );
@@ -203,17 +201,17 @@ QUnit.test( "Persist correct display value - " + type + " hidden", function( ass
 
 		$span.hide();
 
-		$span.fadeIn( 100, function() {
+		$span.fadeIn( fxInterval * 10, function() {
 			assert.equal( $span.css( "display" ), display, "Expecting display: " + display );
-			$span.fadeOut( 100, function() {
+			$span.fadeOut( fxInterval * 10, function() {
 				assert.equal( $span.css( "display" ), displayNone, "Expecting display: " + displayNone );
-				$span.fadeIn( 100, function() {
+				$span.fadeIn( fxInterval * 10, function() {
 					assert.equal( $span.css( "display" ), display, "Expecting display: " + display );
 				} );
 			} );
 		} );
 
-		clock.tick( 300 );
+		clock.tick( fxInterval * 30 );
 	} );
 
 	// Support: IE 11+
@@ -235,17 +233,17 @@ QUnit.test( "Persist correct display value - " + type + " hidden", function( ass
 		var display = "inline";
 		var clock = this.clock;
 
-		$shadowChild.fadeIn( 100, function() {
+		$shadowChild.fadeIn( fxInterval * 10, function() {
 			assert.equal( $shadowChild.css( "display" ), display, "Expecting shadow display: " + display );
-			$shadowChild.fadeOut( 100, function() {
+			$shadowChild.fadeOut( fxInterval * 10, function() {
 				assert.equal( $shadowChild.css( "display" ), displayNone, "Expecting shadow display: " + displayNone );
-				$shadowChild.fadeIn( 100, function() {
+				$shadowChild.fadeIn( fxInterval * 10, function() {
 					assert.equal( $shadowChild.css( "display" ), display, "Expecting shadow display: " + display );
 				} );
 			} );
 		} );
 
-		clock.tick( 300 );
+		clock.tick( fxInterval * 30 );
 	} );
 } );
 
@@ -284,7 +282,7 @@ QUnit.test( "animate relative values", function( assert ) {
 				baseScale = elem[ 0 ].offsetHeight / value,
 				adjustScale = elem[ 0 ].offsetWidth / value;
 
-			elem.css( "width", base ).animate( adjust, 100, function() {
+			elem.css( "width", base ).animate( adjust, fxInterval * 10, function() {
 				assert.equal( this.offsetHeight, value * baseScale + 2 * adjustScale,
 					baseUnit + "+=" + adjustUnit );
 				assert.equal( this.offsetWidth, value * baseScale - 2 * adjustScale,
@@ -292,52 +290,52 @@ QUnit.test( "animate relative values", function( assert ) {
 
 			} );
 
-			clock.tick( 100 );
+			clock.tick( fxInterval * 10 );
 		} );
 	} );
 } );
 
 QUnit.test( "animate negative height", function( assert ) {
 	assert.expect( 1 );
-	jQuery( "#foo" ).animate( { height: -100 }, 100, function() {
+	jQuery( "#foo" ).animate( { height: -100 }, fxInterval * 10, function() {
 		assert.equal( this.offsetHeight, 0, "Verify height." );
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "animate negative margin", function( assert ) {
 	assert.expect( 1 );
-	jQuery( "#foo" ).animate( { "marginTop": -100 }, 100, function() {
+	jQuery( "#foo" ).animate( { "marginTop": -100 }, fxInterval * 10, function() {
 		assert.equal( jQuery( this ).css( "marginTop" ), "-100px", "Verify margin." );
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "animate negative margin with px", function( assert ) {
 	assert.expect( 1 );
-	jQuery( "#foo" ).animate( { marginTop: "-100px" }, 100, function() {
+	jQuery( "#foo" ).animate( { marginTop: "-100px" }, fxInterval * 10, function() {
 		assert.equal( jQuery( this ).css( "marginTop" ), "-100px", "Verify margin." );
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "animate negative padding", function( assert ) {
 	assert.expect( 1 );
-	jQuery( "#foo" ).animate( { "paddingBottom": -100 }, 100, function() {
+	jQuery( "#foo" ).animate( { "paddingBottom": -100 }, fxInterval * 10, function() {
 		assert.equal( jQuery( this ).css( "paddingBottom" ), "0px", "Verify paddingBottom." );
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "animate block as inline width/height", function( assert ) {
 	assert.expect( 3 );
 
-	jQuery( "#foo" ).css( { display: "inline", width: "", height: "" } ).animate( { width: 42, height: 42 }, 100, function() {
+	jQuery( "#foo" ).css( { display: "inline", width: "", height: "" } ).animate( { width: 42, height: 42 }, fxInterval * 10, function() {
 		assert.equal( jQuery( this ).css( "display" ), "inline-block", "inline-block was set on non-floated inline element when animating width/height" );
 		assert.equal( this.offsetWidth, 42, "width was animated" );
 		assert.equal( this.offsetHeight, 42, "height was animated" );
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "animate native inline width/height", function( assert ) {
@@ -346,12 +344,12 @@ QUnit.test( "animate native inline width/height", function( assert ) {
 	jQuery( "#foo" ).css( { display: "", width: "", height: "" } )
 		.append( "<span>text</span>" )
 		.children( "span" )
-			.animate( { width: 42, height: 42 }, 100, function() {
+			.animate( { width: 42, height: 42 }, fxInterval * 10, function() {
 				assert.equal( jQuery( this ).css( "display" ), "inline-block", "inline-block was set on non-floated inline element when animating width/height" );
 				assert.equal( this.offsetWidth, 42, "width was animated" );
 				assert.equal( this.offsetHeight, 42, "height was animated" );
 			} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "animate block width/height", function( assert ) {
@@ -366,7 +364,7 @@ jQuery( "<div>" ).appendTo( "#qunit-fixture" ).css( {
 		width: 42,
 		height: 42
 	}, {
-		duration: 100,
+		duration: fxInterval * 10,
 		step: function() {
 			if ( jQuery( this ).width() > 42 ) {
 				assert.ok( false, "width was incorrectly augmented during animation" );
@@ -378,16 +376,16 @@ jQuery( "<div>" ).appendTo( "#qunit-fixture" ).css( {
 			assert.equal( jQuery( this ).height(), 42, "height was animated" );
 		}
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "animate table width/height", function( assert ) {
 	assert.expect( 1 );
 
-	jQuery( "#table" ).animate( { width: 42, height: 42 }, 100, function() {
+	jQuery( "#table" ).animate( { width: 42, height: 42 }, fxInterval * 10, function() {
 		assert.equal( jQuery( this ).css( "display" ), "table", "display mode is correct" );
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "animate table-row width/height", function( assert ) {
@@ -397,12 +395,12 @@ QUnit.test( "animate table-row width/height", function( assert ) {
 			.html( "<tr style='height:42px;'><td style='padding:0;'><div style='width:20px;height:20px;'></div></td></tr>" )
 			.find( "tr" );
 
-	tr.animate( { width: 10, height: 10 }, 100, function() {
+	tr.animate( { width: 10, height: 10 }, fxInterval * 10, function() {
 		assert.equal( jQuery( this ).css( "display" ), "table-row", "display mode is correct" );
 		assert.equal( this.offsetWidth, 20, "width animated to shrink wrap point" );
 		assert.equal( this.offsetHeight, 20, "height animated to shrink wrap point" );
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "animate table-cell width/height", function( assert ) {
@@ -413,12 +411,12 @@ QUnit.test( "animate table-cell width/height", function( assert ) {
 			.html( "<tr><td style='width:42px;height:42px;padding:0;'><div style='width:20px;height:20px;'></div></td></tr>" )
 			.find( "td" );
 
-	td.animate( { width: 10, height: 10 }, 100, function() {
+	td.animate( { width: 10, height: 10 }, fxInterval * 10, function() {
 		assert.equal( jQuery( this ).css( "display" ), "table-cell", "display mode is correct" );
 		assert.equal( this.offsetWidth, 20, "width animated to shrink wrap point" );
 		assert.equal( this.offsetHeight, 20, "height animated to shrink wrap point" );
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "animate percentage(%) on width/height", function( assert ) {
@@ -427,46 +425,25 @@ QUnit.test( "animate percentage(%) on width/height", function( assert ) {
 	var $div = jQuery( "<div style='position:absolute;top:-999px;left:-999px;width:60px;height:60px;'><div style='width:50%;height:50%;'></div></div>" )
 		.appendTo( "#qunit-fixture" ).children( "div" );
 
-	$div.animate( { width: "25%", height: "25%" }, 13, function() {
+	$div.animate( { width: "25%", height: "25%" }, fxInterval, function() {
 		var $this = jQuery( this );
 		assert.equal( $this.css( "width" ), "15px", "Width was animated to 15px rather than 25px" );
 		assert.equal( $this.css( "height" ), "15px", "Height was animated to 15px rather than 25px" );
 	} );
-	this.clock.tick( 20 );
+	this.clock.tick( fxInterval * 1.5 );
 } );
 
 QUnit.test( "animate resets overflow-x and overflow-y when finished", function( assert ) {
 	assert.expect( 2 );
 	jQuery( "#foo" )
 		.css( { display: "block", width: 20, height: 20, overflowX: "visible", overflowY: "auto" } )
-		.animate( { width: 42, height: 42 }, 100, function() {
+		.animate( { width: 42, height: 42 }, fxInterval * 10, function() {
 			assert.equal( this.style.overflowX, "visible", "overflow-x is visible" );
 			assert.equal( this.style.overflowY, "auto", "overflow-y is auto" );
 		} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
-/* // This test ends up being flaky depending upon the CPU load
-QUnit.test("animate option (queue === false)", function( assert ) {
-	var done = assert.async();
-	assert.expect(1);
-
-	var order = [];
-
-	var $foo = jQuery("#foo");
-	$foo.animate({width:"100px"}, 3000, function () {
-		// should finish after unqueued animation so second
-		order.push(2);
-		assert.deepEqual( order, [ 1, 2 ], "Animations finished in the correct order" );
-		done();
-	});
-	$foo.animate({fontSize:"2em"}, {queue:false, duration:10, complete:function () {
-		// short duration and out of queue so should finish first
-		order.push(1);
-	}});
-});
-*/
-
 QUnit.test( "animate option { queue: false }", function( assert ) {
 	assert.expect( 2 );
 	var foo = jQuery( "#foo" );
@@ -475,12 +452,12 @@ QUnit.test( "animate option { queue: false }", function( assert ) {
 		fontSize: "2em"
 	}, {
 		queue: false,
-		duration: 10,
+		duration: fxInterval,
 		complete: function() {
 			assert.ok( true, "Animation Completed" );
 		}
 	} );
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 
 	assert.equal( foo.queue().length, 0, "Queue is empty" );
 } );
@@ -493,7 +470,7 @@ QUnit.test( "animate option { queue: true }", function( assert ) {
 		fontSize: "2em"
 	}, {
 		queue: true,
-		duration: 10,
+		duration: fxInterval,
 		complete: function() {
 			assert.ok( true, "Animation Completed" );
 		}
@@ -502,7 +479,7 @@ QUnit.test( "animate option { queue: true }", function( assert ) {
 	assert.notEqual( foo.queue().length, 0, "Default queue is not empty" );
 
 	//clear out existing timers before next test
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 } );
 
 QUnit.test( "animate option { queue: 'name' }", function( assert ) {
@@ -533,7 +510,7 @@ QUnit.test( "animate option { queue: 'name' }", function( assert ) {
 	assert.equal( foo.queue( "name" ).length, 2, "Queue length of 'name' queue" );
 
 	foo.dequeue( "name" );
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 
 } );
 
@@ -553,10 +530,10 @@ QUnit.test( "animate with no properties", function( assert ) {
 	foo = jQuery( "#foo" );
 
 	foo.animate( {} );
-	foo.animate( { top: 10 }, 100, function() {
+	foo.animate( { top: 10 }, fxInterval * 10, function() {
 		assert.ok( true, "Animation was properly dequeued." );
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "animate duration 0", function( assert ) {
@@ -589,13 +566,13 @@ QUnit.test( "animate duration 0", function( assert ) {
 		assert.ok( true, "Animate a third simple property." );
 		counter++;
 	} );
-	$elems.eq( 1 ).animate( { a:3 }, 200, function() {
+	$elems.eq( 1 ).animate( { a:3 }, fxInterval * 20, function() {
 		counter++;
 
 		// Failed until [6115]
 		assert.equal( counter, 5, "One synchronic and one asynchronic" );
 	} );
-	this.clock.tick( 200 );
+	this.clock.tick( fxInterval * 20 );
 
 	$elem = jQuery( "<div></div>" );
 	$elem.show( 0, function() {
@@ -614,12 +591,12 @@ QUnit.test( "animate hyphenated properties", function( assert ) {
 
 	jQuery( "#foo" )
 		.css( "font-size", 10 )
-		.animate( { "font-size": 20 }, 200, function() {
+		.animate( { "font-size": 20 }, fxInterval * 20, function() {
 			assert.equal( this.style.fontSize, "20px", "The font-size property was animated." );
 		} );
 
 	// FIXME why is this double only when run with other tests
-	this.clock.tick( 400 );
+	this.clock.tick( fxInterval * 40 );
 
 } );
 
@@ -628,10 +605,10 @@ QUnit.test( "animate non-element", function( assert ) {
 
 	var obj = { test: 0 };
 
-	jQuery( obj ).animate( { test: 200 }, 200, function() {
+	jQuery( obj ).animate( { test: 200 }, fxInterval * 20, function() {
 		assert.equal( obj.test, 200, "The custom property should be modified." );
 	} );
-	this.clock.tick( 200 );
+	this.clock.tick( fxInterval * 20 );
 } );
 
 QUnit.test( "animate non-element's zIndex without appending \"px\"", function( assert ) {
@@ -639,10 +616,10 @@ QUnit.test( "animate non-element's zIndex without appending \"px\"", function( a
 
 	var obj = { zIndex: 0 };
 
-	jQuery( obj ).animate( { zIndex: 200 }, 200, function() {
+	jQuery( obj ).animate( { zIndex: 200 }, fxInterval * 20, function() {
 		assert.equal( obj.zIndex, 200, "The custom property should be modified without appending \"px\"." );
 	} );
-	this.clock.tick( 200 );
+	this.clock.tick( fxInterval * 20 );
 } );
 
 QUnit.test( "stop()", function( assert ) {
@@ -654,9 +631,9 @@ QUnit.test( "stop()", function( assert ) {
 		nw;
 
 	$foo.hide().css( "width", 200 )
-		.animate( { "width": "show" }, 1500 );
+		.animate( { "width": "show" }, fxInterval * 150 );
 
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 	nw = $foo.css( "width" );
 	assert.notEqual( parseFloat( nw ), w, "An animation occurred " + nw + " " + w + "px" );
 	$foo.stop();
@@ -664,7 +641,7 @@ QUnit.test( "stop()", function( assert ) {
 	nw = $foo.css( "width" );
 	assert.notEqual( parseFloat( nw ), w, "Stop didn't reset the animation " + nw + " " + w + "px" );
 
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 
 	$foo.removeData();
 	$foo.removeData( undefined, true );
@@ -672,17 +649,17 @@ QUnit.test( "stop()", function( assert ) {
 
 	$one = jQuery( "#fadein" );
 	$two = jQuery( "#show" );
-	$one.fadeTo( 100, 0, function() {
+	$one.fadeTo( fxInterval * 10, 0, function() {
 		$one.stop();
 	} );
-	this.clock.tick( 100 );
-	$two.fadeTo( 100, 0, function() {
-		assert.equal( $two.css( "opacity" ), "0", "Stop does not interfere with animations on other elements (#6641)" );
+	this.clock.tick( fxInterval * 10 );
+	$two.fadeTo( fxInterval * 10, 0, function() {
+		assert.equal( $two.css( "opacity" ), "0", "Stop does not interfere with animations on other elements (trac-6641)" );
 
 		// Reset styles
 		$one.add( $two ).css( "opacity", "" );
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
 QUnit.test( "stop() - several in queue", function( assert ) {
@@ -721,12 +698,12 @@ QUnit.test( "stop(clearQueue)", function( assert ) {
 	var $foo = jQuery( "#foo" ),
 		w = 0,
 		nw;
-	$foo.hide().css( "width", 200 ).css( "width" );
+	$foo.hide().css( "width", fxInterval * 20 ).css( "width" );
 
-	$foo.animate( { "width": "show" }, 1000 );
-	$foo.animate( { "width": "hide" }, 1000 );
-	$foo.animate( { "width": "show" }, 1000 );
-	this.clock.tick( 100 );
+	$foo.animate( { "width": "show" }, fxInterval * 100 );
+	$foo.animate( { "width": "hide" }, fxInterval * 100 );
+	$foo.animate( { "width": "show" }, fxInterval * 100 );
+	this.clock.tick( fxInterval * 10 );
 	nw = $foo.css( "width" );
 	assert.ok( parseFloat( nw ) !== w, "An animation occurred " + nw + " " + w + "px" );
 	$foo.stop( true );
@@ -735,7 +712,7 @@ QUnit.test( "stop(clearQueue)", function( assert ) {
 	assert.ok( parseFloat( nw ) !== w, "Stop didn't reset the animation " + nw + " " + w + "px" );
 
 	assert.equal( $foo.queue().length, 0, "The animation queue was cleared" );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 	assert.equal( nw, $foo.css( "width" ), "The animation didn't continue" );
 } );
 
@@ -745,13 +722,13 @@ QUnit.test( "stop(clearQueue, gotoEnd)", function( assert ) {
 	var $foo = jQuery( "#foo" ),
 		w = 0,
 		nw;
-	$foo.hide().css( "width", 200 ).css( "width" );
+	$foo.hide().css( "width", fxInterval * 20 ).css( "width" );
 
-	$foo.animate( { width: "show" }, 1000 );
-	$foo.animate( { width: "hide" }, 1000 );
-	$foo.animate( { width: "show" }, 1000 );
-	$foo.animate( { width: "hide" }, 1000 );
-	this.clock.tick( 100 );
+	$foo.animate( { width: "show" }, fxInterval * 100 );
+	$foo.animate( { width: "hide" }, fxInterval * 100 );
+	$foo.animate( { width: "show" }, fxInterval * 100 );
+	$foo.animate( { width: "hide" }, fxInterval * 100 );
+	this.clock.tick( fxInterval * 10 );
 	nw = $foo.css( "width" );
 	assert.ok( parseFloat( nw ) !== w, "An animation occurred " + nw + " " + w + "px" );
 	$foo.stop( false, true );
@@ -761,7 +738,7 @@ QUnit.test( "stop(clearQueue, gotoEnd)", function( assert ) {
 	// Disabled, being flaky
 	//equal( nw, 1, "Stop() reset the animation" );
 
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 
 	// Disabled, being flaky
 	//equal( $foo.queue().length, 2, "The next animation continued" );
@@ -776,7 +753,7 @@ QUnit.test( "stop( queue, ..., ... ) - Stop single queues", function( assert ) {
 	foo.animate( {
 		width: 400
 	}, {
-		duration: 500,
+		duration: fxInterval * 50,
 		complete: function() {
 			assert.equal( parseFloat( foo.css( "width" ) ), 400, "Animation completed for standard queue" );
 			assert.equal( parseFloat( foo.css( "height" ) ), saved, "Height was not changed after the second stop" );
@@ -786,7 +763,7 @@ QUnit.test( "stop( queue, ..., ... ) - Stop single queues", function( assert ) {
 	foo.animate( {
 		height: 400
 	}, {
-		duration: 1000,
+		duration: fxInterval * 100,
 		queue: "height"
 	} ).dequeue( "height" ).stop( "height", false, true );
 
@@ -795,11 +772,11 @@ QUnit.test( "stop( queue, ..., ... ) - Stop single queues", function( assert ) {
 	foo.animate( {
 		height: 200
 	}, {
-		duration: 1000,
+		duration: fxInterval * 100,
 		queue: "height"
 	} ).dequeue( "height" ).stop( "height", false, false );
 	saved = parseFloat( foo.css( "height" ) );
-        this.clock.tick( 500 );
+	this.clock.tick( fxInterval * 50 );
 } );
 
 QUnit[ QUnit.jQuerySelectors ? "test" : "skip" ]( "toggle()", function( assert ) {
@@ -832,7 +809,7 @@ QUnit.test( "jQuery.fx.prototype.cur() - <1.8 Back Compat", function( assert ) {
 	assert.equal(
 		( new jQuery.fx( div, {}, "color" ) ).cur(),
 		jQuery.css( div, "color" ),
-		"Return the same value as jQuery.css for complex properties (bug #7912)"
+		"Return the same value as jQuery.css for complex properties (bug trac-7912)"
 	);
 
 	assert.strictEqual(
@@ -869,7 +846,7 @@ QUnit.test( "jQuery.fx.prototype.cur() - <1.8 Back Compat", function( assert ) {
 	assert.equal(
 		( new jQuery.fx( div, {}, "marginBottom" ) ).cur(),
 		-11000,
-		"support negative values < -10000 (bug #7193)"
+		"support negative values < -10000 (bug trac-7193)"
 	);
 
 	jQuery( div ).remove();
@@ -894,7 +871,7 @@ QUnit.test( "Overflow and Display", function( assert ) {
 		.before( "text before" )
 		.after( "text after" )
 		.animate( { opacity: 0.5 }, "slow", done );
-	this.clock.tick( 600 );
+	this.clock.tick( 600 + fxInterval );
 } );
 
 jQuery.each( {
@@ -985,7 +962,7 @@ QUnit.test( fn + " to " + tn, function( assert ) {
 
 			anim = { width: t_w, height: t_h, opacity: t_o };
 
-			elem.animate( anim, 50 );
+			elem.animate( anim, fxInterval * 5 );
 
 			jQuery.when( elem ).done( function( $elem ) {
 				var cur_o, cur_w, cur_h, old_h,
@@ -1055,7 +1032,7 @@ QUnit.test( fn + " to " + tn, function( assert ) {
 				jQuery( elem ).remove();
 
 			} );
-			this.clock.tick( 100 );
+			this.clock.tick( fxInterval * 10 );
 		} );
 	} );
 } );
@@ -1103,7 +1080,7 @@ 		getProps = function( el ) {
 	setup( ".fadeToggle().fadeToggle() - out", "#fadetoggleout div" ).fadeToggle( "fast" ).fadeToggle( "fast", check );
 	setup( ".fadeTo(0.5).fadeTo(1.0, easing)", "#fadeto div" ).fadeTo( "fast", 0.5 ).fadeTo( "fast", 1.0, "linear", check );
 
-    this.clock.tick( 400 );
+    this.clock.tick( 400 + fxInterval * 2 );
 } );
 
 jQuery.makeTest = function( text ) {
@@ -1121,7 +1098,7 @@ jQuery.makeTest = function( text ) {
 
 jQuery.makeTest.id = 1;
 
-QUnit.test( "jQuery.show('fast') doesn't clear radio buttons (bug #1095)", function( assert ) {
+QUnit.test( "jQuery.show('fast') doesn't clear radio buttons (bug trac-1095)", function( assert ) {
 	assert.expect( 4 );
 
 	var $checkedtest = jQuery( "#checkedtest" );
@@ -1131,15 +1108,14 @@ QUnit.test( "jQuery.show('fast') doesn't clear radio buttons (bug #1095)", funct
 		assert.ok( jQuery( "input[type='checkbox']", $checkedtest ).first().attr( "checked" ), "Check first checkbox still checked." );
 		assert.ok( !jQuery( "input[type='checkbox']", $checkedtest ).last().attr( "checked" ), "Check last checkbox still NOT checked." );
 	} );
-	this.clock.tick( 200 );
+	this.clock.tick( 200 + fxInterval );
 } );
 
 QUnit.test( "interrupt toggle", function( assert ) {
 	assert.expect( 24 );
 
-	var env = this,
-		longDuration = 2000,
-		shortDuration = 500,
+	var longDuration = fxInterval * 200,
+		shortDuration = fxInterval * 50,
 		remaining = 0,
 		$elems = jQuery( ".chain-test" ),
 		clock = this.clock,
@@ -1222,7 +1198,7 @@ 	jQuery.easing._defaultTest = function( p ) {
 		return p;
 	};
 
-	jQuery( data ).animate( props, 400, "_defaultTest", function() {
+	jQuery( data ).animate( props, fxInterval * 40, "_defaultTest", function() {
 		assert.ok( test1Called, "Easing function (_test1) called" );
 		assert.ok( test2Called, "Easing function (_test2) called" );
 		assert.ok( defaultTestCalled, "Easing function (_default) called" );
@@ -1230,7 +1206,7 @@ jQuery( data ).animate( props, 400, "_defaultTest", function() {
 		assert.equal( props.b[ 1 ], "_test2", "animate does not change original props (per-property easing would be lost)" );
 	} );
 
-	this.clock.tick( 400 );
+	this.clock.tick( fxInterval * 40 );
 } );
 
 QUnit.test( "animate with CSS shorthand properties", function( assert ) {
@@ -1256,7 +1232,8 @@ 	jQuery.easing.propertyScope = function( p ) {
 	};
 
 	jQuery( "#foo" )
-		.animate( propsBasic, 200, "animationScope", function() {
+		.animate( propsBasic, fxInterval * 20,
+				"animationScope", function() {
 			assert.equal( this.style.paddingTop, "10px", "padding-top was animated" );
 			assert.equal( this.style.paddingLeft, "20px", "padding-left was animated" );
 			assert.equal( this.style.paddingRight, "20px", "padding-right was animated" );
@@ -1264,7 +1241,8 @@ jQuery( "#foo" )
 			assert.equal( easeAnimation_count, 4, "per-animation default easing called for each property" );
 			easeAnimation_count = 0;
 		} )
-		.animate( propsSpecial, 200, "animationScope", function() {
+		.animate( propsSpecial, fxInterval * 20,
+				"animationScope", function() {
 			assert.equal( this.style.paddingTop, "1px", "padding-top was animated again" );
 			assert.equal( this.style.paddingLeft, "2px", "padding-left was animated again" );
 			assert.equal( this.style.paddingRight, "2px", "padding-right was animated again" );
@@ -1276,10 +1254,10 @@ jQuery( "#foo" )
 			delete jQuery.easing.animationScope;
 			delete jQuery.easing.propertyScope;
 		} );
-		this.clock.tick( 400 );
+		this.clock.tick( fxInterval * 40 );
 } );
 
-QUnit.test( "hide hidden elements, with animation (bug #7141)", function( assert ) {
+QUnit.test( "hide hidden elements, with animation (bug trac-7141)", function( assert ) {
 	assert.expect( 4 );
 
 	var div = jQuery( "<div id='bug7141' style='display:none'></div>" ).appendTo( "#qunit-fixture" );
@@ -1294,7 +1272,7 @@ QUnit.test( "hide hidden elements, with animation (bug #7141)", function( assert
 	assert.equal( div.css( "display" ), "block", "Element is visible after animations" );
 } );
 
-QUnit.test( "animate unit-less properties (#4966)", function( assert ) {
+QUnit.test( "animate unit-less properties (trac-4966)", function( assert ) {
 	assert.expect( 2 );
 
 	var div = jQuery( "<div style='z-index: 0; position: absolute;'></div>" ).appendTo( "#qunit-fixture" );
@@ -1302,10 +1280,10 @@ QUnit.test( "animate unit-less properties (#4966)", function( assert ) {
 	div.animate( { zIndex: 2 }, function() {
 		assert.equal( div.css( "z-index" ), "2", "z-index is 2" );
 	} );
-	this.clock.tick( 400 );
+	this.clock.tick( 400 + fxInterval );
 } );
 
-QUnit.test( "animate properties missing px w/ opacity as last (#9074)", function( assert ) {
+QUnit.test( "animate properties missing px w/ opacity as last (trac-9074)", function( assert ) {
 	assert.expect( 6 );
 
 	var ml, l,
@@ -1320,9 +1298,9 @@ QUnit.test( "animate properties missing px w/ opacity as last (#9074)", function
 		left: 200,
 		marginLeft: 200,
 		opacity: 0
-	}, 2000 );
+	}, fxInterval * 200 );
 
-	this.clock.tick( 500 );
+	this.clock.tick( fxInterval * 50 );
 
 	ml = cssInt( "marginLeft" );
 	l = cssInt( "left" );
@@ -1333,7 +1311,7 @@ QUnit.test( "animate properties missing px w/ opacity as last (#9074)", function
 	div.stop().remove();
 } );
 
-QUnit.test( "callbacks should fire in correct order (#9100)", function( assert ) {
+QUnit.test( "callbacks should fire in correct order (trac-9100)", function( assert ) {
 	assert.expect( 1 );
 
 	var a = 1,
@@ -1342,17 +1320,17 @@ QUnit.test( "callbacks should fire in correct order (#9100)", function( assert )
 	jQuery( "<p data-operation='*2'></p><p data-operation='^2'></p>" ).appendTo( "#qunit-fixture" )
 
 		// The test will always pass if no properties are animated or if the duration is 0
-		.animate( { fontSize: 12 }, 13, function() {
+		.animate( { fontSize: 12 }, fxInterval, function() {
 			a *= jQuery( this ).data( "operation" ) === "*2" ? 2 : a;
 			cb++;
 			if ( cb === 2 ) {
 				assert.equal( a, 4, "test value has been *2 and _then_ ^2" );
 			}
 		} );
-	this.clock.tick( 20 );
+	this.clock.tick( fxInterval * 1.5 );
 } );
 
-QUnit.test( "callbacks that throw exceptions will be removed (#5684)", function( assert ) {
+QUnit.test( "callbacks that throw exceptions will be removed (trac-5684)", function( assert ) {
 	assert.expect( 2 );
 
 	var foo = jQuery( "#foo" );
@@ -1405,7 +1383,7 @@ QUnit.test( "animate will scale margin properties individually", function( asser
 	} );
 } );
 
-QUnit.test( "Do not append px to 'fill-opacity' #9548", function( assert ) {
+QUnit.test( "Do not append px to 'fill-opacity' trac-9548", function( assert ) {
 	assert.expect( 1 );
 
 	var $div = jQuery( "<div>" ).appendTo( "#qunit-fixture" );
@@ -1416,13 +1394,13 @@ QUnit.test( "Do not append px to 'fill-opacity' #9548", function( assert ) {
 	} );
 } );
 
-QUnit.test( "line-height animates correctly (#13855)", function( assert ) {
+QUnit.test( "line-height animates correctly (trac-13855)", function( assert ) {
 	assert.expect( 12 );
 
 	var t0,
 		clock = this.clock,
-		longDuration = 2000,
-		shortDuration = 500,
+		longDuration = fxInterval * 200,
+		shortDuration = fxInterval * 50,
 		animated = jQuery(
 			"<p style='line-height: 100;'>unitless</p>" +
 			"<p style='line-height: 5000px;'>px</p>" +
@@ -1472,11 +1450,11 @@ setTimeout( function() {
 
 				animated.stop( true, true );
 			}, shortDuration );
-clock.tick( shortDuration );
+			clock.tick( shortDuration );
 		}, shortDuration );
-clock.tick( shortDuration );
-	}, 50 );
-clock.tick( 50 );
+		clock.tick( shortDuration );
+	}, fxInterval * 5 );
+	clock.tick( fxInterval * 5 );
 } );
 
 // Start 1.8 Animation tests
@@ -1504,7 +1482,7 @@ QUnit.test( "jQuery.Animation( object, props, opts )", function( assert ) {
 			assert.deepEqual( testObject, testDest, "No unexpected properties" );
 		} );
 	} );
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 } );
 
 QUnit.test( "Animate Option: step: function( percent, tween )", function( assert ) {
@@ -1532,7 +1510,7 @@ jQuery( "#foo" ).animate( {
 		}, "Step function was called once at 0% and once at 100% for each property" );
 		next();
 	} );
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 } );
 
 QUnit.test( "Animate callbacks have correct context", function( assert ) {
@@ -1541,18 +1519,18 @@ QUnit.test( "Animate callbacks have correct context", function( assert ) {
 	var foo = jQuery( "#foo" );
 	foo.animate( {
 		height: 10
-	}, 10, function() {
+	}, fxInterval, function() {
 		assert.equal( foo[ 0 ], this, "Complete callback after stop(true) `this` is element" );
 	} ).stop( true, true );
 	foo.animate( {
 		height: 100
-	}, 10, function() {
+	}, fxInterval, function() {
 		assert.equal( foo[ 0 ], this, "Complete callback `this` is element" );
 	} );
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 } );
 
-QUnit.test( "User supplied callback called after show when fx off (#8892)", function( assert ) {
+QUnit.test( "User supplied callback called after show when fx off (trac-8892)", function( assert ) {
 	assert.expect( 2 );
 
 	var foo = jQuery( "#foo" );
@@ -1571,8 +1549,7 @@ QUnit.test( "User supplied callback called after show when fx off (#8892)", func
 QUnit.test( "animate should set display for disconnected nodes", function( assert ) {
 	assert.expect( 20 );
 
-	var env = this,
-		showMethods = {
+	var showMethods = {
 			fadeIn: [],
 			fadeTo: [ "fast", 0.5 ],
 			slideDown: [ "fast" ],
@@ -1625,23 +1602,23 @@ QUnit.test( "animate should set display for disconnected nodes", function( asser
 				"." + name + " block under fragment" );
 		} ] ) );
 	} );
-	clock.tick( 400 );
+	clock.tick( 400 + fxInterval );
 } );
 
-QUnit[ QUnit.jQuerySelectors ? "test" : "skip" ]( "Animation callback should not show animated element as :animated (#7157)", function( assert ) {
+QUnit[ QUnit.jQuerySelectors ? "test" : "skip" ]( "Animation callback should not show animated element as :animated (trac-7157)", function( assert ) {
 	assert.expect( 1 );
 
 	var foo = jQuery( "#foo" );
 
 	foo.animate( {
 		opacity: 0
-	}, 100, function() {
+	}, fxInterval * 10, function() {
 		assert.ok( !foo.is( ":animated" ), "The element is not animated" );
 	} );
-	this.clock.tick( 100 );
+	this.clock.tick( fxInterval * 10 );
 } );
 
-QUnit[ QUnit.jQuerySelectors ? "test" : "skip" ]( "Initial step callback should show element as :animated (#14623)", function( assert ) {
+QUnit[ QUnit.jQuerySelectors ? "test" : "skip" ]( "Initial step callback should show element as :animated (trac-14623)", function( assert ) {
 	assert.expect( 1 );
 
 	var foo = jQuery( "#foo" );
@@ -1658,7 +1635,7 @@ QUnit.test( "animate should set display for disconnected nodes", function( asser
 	foo.stop();
 } );
 
-QUnit.test( "hide called on element within hidden parent should set display to none (#10045)", function( assert ) {
+QUnit.test( "hide called on element within hidden parent should set display to none (trac-10045)", function( assert ) {
 	assert.expect( 3 );
 
 	var hidden = jQuery( ".hidden" ),
@@ -1677,7 +1654,7 @@ QUnit.test( "hide called on element within hidden parent should set display to n
 
 		elems.remove();
 	} );
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 } );
 
 QUnit.test( "hide, fadeOut and slideUp called on element width height and width = 0 should set display to none", function( assert ) {
@@ -1708,10 +1685,10 @@ QUnit.test( "hide, fadeOut and slideUp called on element width height and width
 		assert.strictEqual( elems.get( 4 ).style.display, "none", "slideUp() called on element width height and width = 0 should set display to none" );
 
 	} );
-	this.clock.tick( 400 );
+	this.clock.tick( 400 + fxInterval );
 } );
 
-QUnit.test( "hide should not leave hidden inline elements visible (#14848)", function( assert ) {
+QUnit.test( "hide should not leave hidden inline elements visible (trac-14848)", function( assert ) {
 	assert.expect( 2 );
 
 	var el = jQuery( "#simon1" );
@@ -1735,7 +1712,7 @@ QUnit.test( "Handle queue:false promises", function( assert ) {
 	foo.animate( {
 		top: 1
 	}, {
-		duration: 10,
+		duration: fxInterval,
 		queue: false,
 		complete: function() {
 			assert.ok( step++ <= 2, "Step one or two" );
@@ -1743,21 +1720,21 @@ QUnit.test( "Handle queue:false promises", function( assert ) {
 	} ).animate( {
 		bottom: 1
 	}, {
-		duration: 10,
+		duration: fxInterval,
 		complete: function() {
 			assert.ok( step > 2 && step < 5, "Step three or four" );
 			step++;
 		}
 	} );
 
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 
 	foo.promise().done( function() {
 		assert.equal( step++, 5, "steps 1-5: queue:false then queue:fx done" );
 		foo.animate( {
 			top: 10
 		}, {
-			duration: 10,
+			duration: fxInterval,
 			complete: function() {
 				assert.ok( step > 5 && step < 8, "Step six or seven" );
 				step++;
@@ -1765,7 +1742,7 @@ QUnit.test( "Handle queue:false promises", function( assert ) {
 		} ).animate( {
 			bottom: 10
 		}, {
-			duration: 10,
+			duration: fxInterval,
 			queue: false,
 			complete: function() {
 				assert.ok( step > 7 && step < 10, "Step eight or nine" );
@@ -1776,7 +1753,7 @@ QUnit.test( "Handle queue:false promises", function( assert ) {
 		} );
 
 	} );
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 } );
 
 QUnit.test( "multiple unqueued and promise", function( assert ) {
@@ -1811,10 +1788,10 @@ QUnit.test( "multiple unqueued and promise", function( assert ) {
 	} ).promise().done( function() {
 		assert.strictEqual( step++, 4, "Step 4" );
 	} );
-	this.clock.tick( 1000 );
+	this.clock.tick( 1000 + fxInterval );
 } );
 
-QUnit.test( "animate does not change start value for non-px animation (#7109)", function( assert ) {
+QUnit.test( "animate does not change start value for non-px animation (trac-7109)", function( assert ) {
 	assert.expect( 1 );
 
 	var parent = jQuery( "<div><div></div></div>" ).css( { width: 284, height: 1 } ).appendTo( "#qunit-fixture" ),
@@ -1834,10 +1811,10 @@ QUnit.test( "animate does not change start value for non-px animation (#7109)",
 		next();
 		parent.remove();
 	} );
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 } );
 
-QUnit.test( "non-px animation handles non-numeric start (#11971)", function( assert ) {
+QUnit.test( "non-px animation handles non-numeric start (trac-11971)", function( assert ) {
 	assert.expect( 2 );
 
 	var foo = jQuery( "#foo" ),
@@ -1866,10 +1843,10 @@ QUnit.test( "non-px animation handles non-numeric start (#11971)", function( ass
 			assert.equal( jQuery.style( this, "backgroundPositionX" ), "42%", "End reached" );
 		}
 	} );
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 } );
 
-QUnit.test( "Animation callbacks (#11797)", function( assert ) {
+QUnit.test( "Animation callbacks (trac-11797)", function( assert ) {
 	assert.expect( 15 );
 
 	var prog = 0,
@@ -1946,10 +1923,10 @@ QUnit.test( "Animation callbacks (#11797)", function( assert ) {
 			assert.ok( true, "async: always" );
 		}
 	} );
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 } );
 
-QUnit.test( "Animation callbacks in order (#2292)", function( assert ) {
+QUnit.test( "Animation callbacks in order (gh-2283)", function( assert ) {
 	assert.expect( 9 );
 
 	var done = assert.async(),
@@ -1986,10 +1963,10 @@ jQuery( "#foo" ).animate( {
 		}
 	} ).finish();
 
-	this.clock.tick( dur + 10 );
+	this.clock.tick( dur + fxInterval );
 } );
 
-QUnit.test( "Animate properly sets overflow hidden when animating width/height (#12117)", function( assert ) {
+QUnit.test( "Animate properly sets overflow hidden when animating width/height (trac-12117)", function( assert ) {
 	assert.expect( 8 );
 
 	jQuery.each( [ "height", "width" ], function( _, prop ) {
@@ -2007,7 +1984,7 @@ QUnit.test( "Animate properly sets overflow hidden when animating width/height (
 	} );
 } );
 
-QUnit.test( "Each tick of the timer loop uses a fresh time (#12837)", function( assert ) {
+QUnit.test( "Each tick of the timer loop uses a fresh time (trac-12837)", function( assert ) {
 	var lastVal,
 		tmp = jQuery( {
 			test: 0
@@ -2032,7 +2009,7 @@ QUnit.test( "Each tick of the timer loop uses a fresh time (#12837)", function(
 	tmp.stop();
 } );
 
-QUnit.test( "Animations with 0 duration don't ease (#12273)", function( assert ) {
+QUnit.test( "Animations with 0 duration don't ease (trac-12273)", function( assert ) {
 	assert.expect( 1 );
 
 	jQuery.easing.test = function() {
@@ -2057,7 +2034,7 @@ jQuery( "#foo" ).animate( {
 	// this test would look a lot better if we were using something to override
 	// the default timers
 	var duration = 1500;
-	QUnit.test( "toggle state tests: " + method + " (#8685)", function( assert ) {
+	QUnit.test( "toggle state tests: " + method + " (trac-8685)", function( assert ) {
 		function secondToggle() {
 			var stopped = parseFloat( element.css( check ) );
 			tested = false;
@@ -2096,8 +2073,8 @@ QUnit.test( "toggle state tests: " + method + " (#8685)", function( assert ) {
 			always: secondToggle
 		} );
 
-                //FIXME figure out why 470
-		this.clock.tick( 470 );
+		// FIXME figure out why 470
+		this.clock.tick( 470 + fxInterval * 2 );
 	} );
 } );
 
@@ -2286,12 +2263,15 @@ 	queueTester.finish = function() {
 	div.remove();
 } );
 
-QUnit.test( ".finish() is applied correctly when multiple elements were animated (#13937)", function( assert ) {
+QUnit.test( ".finish() is applied correctly when multiple elements were animated (trac-13937)", function( assert ) {
 	assert.expect( 3 );
 
 	var elems = jQuery( "<a>0</a><a>1</a><a>2</a>" );
 
-	elems.animate( { opacity: 0 }, 1500 ).animate( { opacity: 1 }, 1500 );
+	elems
+		.animate( { opacity: 0 }, fxInterval * 150 )
+		.animate( { opacity: 1 }, fxInterval * 150 );
+
 	setTimeout( function() {
 		elems.eq( 1 ).finish();
 		assert.ok( !elems.eq( 1 ).queue().length, "empty queue for .finish()ed element" );
@@ -2300,10 +2280,10 @@ setTimeout( function() {
 		elems.stop( true );
 
 	}, 100 );
-	this.clock.tick( 1500 );
+	this.clock.tick( fxInterval * 150 );
 } );
 
-QUnit.test( "slideDown() after stop() (#13483)", function( assert ) {
+QUnit.test( "slideDown() after stop() (trac-13483)", function( assert ) {
 		assert.expect( 2 );
 
 		var ul = jQuery( "<ul style='height: 100px; display: block;'></ul>" )
@@ -2312,31 +2292,31 @@ QUnit.test( "slideDown() after stop() (#13483)", function( assert ) {
 			clock = this.clock;
 
         // First test. slideUp() -> stop() in the middle -> slideDown() until the end
-		ul.slideUp( 1000 );
-		clock.tick( 500 );
+		ul.slideUp( fxInterval * 100 );
+		clock.tick( fxInterval * 50 );
 		ul.stop( true );
 		ul.slideDown( 1, function() {
 				assert.equal( ul.height(), origHeight, "slideDown() after interrupting slideUp() with stop(). Height must be in original value" );
 
 				// Second test. slideDown() -> stop() in the middle -> slideDown() until the end
 				ul.slideUp( 1 );
-				clock.tick( 10 );
-				ul.slideDown( 1000 );
-				clock.tick( 500 );
+				clock.tick( fxInterval );
+				ul.slideDown( fxInterval * 100 );
+				clock.tick( fxInterval * 50 );
 				ul.stop( true );
 				ul.slideDown( 1 );
 				assert.equal( ul.height(), origHeight, "slideDown() after interrupting slideDown() with stop(). Height must be in original value" );
 
 				// Cleanup
 				ul.remove();
-				clock.tick( 10 );
+				clock.tick( fxInterval );
 
 		} );
 
-		clock.tick( 10 );
+		clock.tick( fxInterval );
 } );
 
-QUnit.test( "Respect display value on inline elements (#14824)", function( assert ) {
+QUnit.test( "Respect display value on inline elements (trac-14824)", function( assert ) {
 	assert.expect( 2 );
 
 	var clock = this.clock,
@@ -2359,7 +2339,7 @@ QUnit.test( "Respect display value on inline elements (#14824)", function( asser
 		} );
 	} );
 
-	clock.tick( 800 );
+	clock.tick( 800 + fxInterval * 2 );
 } );
 
 QUnit.test( "jQuery.easing._default (gh-2218)", function( assert ) {
@@ -2383,7 +2363,7 @@ jQuery( "#foo" )
 		} )
 		.stop();
 
-	this.clock.tick( 25 );
+	this.clock.tick( 10 + fxInterval );
 } );
 
 QUnit.test( "jQuery.easing._default in Animation (gh-2218", function( assert ) {
@@ -2411,7 +2391,7 @@ 	jQuery.easing.custom = function( p ) {
 		delete jQuery.easing.custom;
 	} );
 
-	this.clock.tick( 10 );
+	this.clock.tick( fxInterval );
 } );
 
 QUnit.test( "jQuery.easing._default in Tween (gh-2218)", function( assert ) {
@@ -2464,7 +2444,7 @@ QUnit.test( "Show/hide/toggle and display: inline", function( assert ) {
 
 	jQuery( "<span></span><div style='display:inline' title='inline div'></div>" ).each( function() {
 		var completed, interrupted,
-			N = 100,
+			N = fxInterval * 10,
 			fixture = jQuery( "#qunit-fixture" ),
 			$el = jQuery( this ),
 			kind = this.title || this.nodeName.toLowerCase();
@@ -2530,7 +2510,7 @@ function testEasing( assert, speed, easing, complete ) {
 	assert.expect( 4 );
 	var options = jQuery.speed( speed, easing, complete );
 
-	assert.equal( options.duration, 10, "Duration set properly" );
+	assert.equal( options.duration, fxInterval, "Duration set properly" );
 	assert.equal(
 		typeof options.easing === "function" ? options.easing() : options.easing,
 		"linear",
@@ -2541,7 +2521,7 @@ function testEasing( assert, speed, easing, complete ) {
 }
 
 QUnit.test( "jQuery.speed( speed, easing, complete )", function( assert ) {
-	testEasing( assert, 10, "linear", function() {
+	testEasing( assert, fxInterval, "linear", function() {
 		assert.ok( true, "Complete called" );
 	} );
 } );
@@ -2549,7 +2529,7 @@ testEasing( assert, 10, "linear", function() {
 QUnit.test( "jQuery.speed( speed, easing, complete ) - with easing function", function( assert ) {
 	testEasing(
 		assert,
-		10,
+		fxInterval,
 		function() {
 			return "linear";
 		},
@@ -2561,7 +2541,7 @@ testEasing(
 
 QUnit.test( "jQuery.speed( options )", function( assert ) {
 	testEasing( assert, {
-		duration: 10,
+		duration: fxInterval,
 		easing: "linear",
 		complete: function() {
 			assert.ok( true, "Complete called" );
@@ -2571,7 +2551,7 @@ testEasing( assert, {
 
 QUnit.test( "jQuery.speed( options ) - with easing function", function( assert ) {
 	testEasing( assert, {
-		duration: 10,
+		duration: fxInterval,
 		easing: function() {
 			return "linear";
 		},
diff --git a/a.js b/b.js
index 1f76c54b..8ca06ced 100644
--- a/a.js
+++ b/b.js
@@ -8,7 +8,7 @@ beforeEach: function() {
 QUnit.test( "null or undefined handler", function( assert ) {
 	assert.expect( 4 );
 
-	// Supports Fixes bug #7229
+	// Supports Fixes bug trac-7229
 	try {
 		jQuery( "#firstp" ).on( "click", null );
 		assert.ok( true, "Passing a null handler will not throw an exception" );
@@ -484,7 +484,7 @@ 		neverCallMe = function() {
 QUnit.test( "on(), iframes", function( assert ) {
 	assert.expect( 1 );
 
-	// events don't work with iframes, see #939 - this test fails in IE because of contentDocument
+	// events don't work with iframes, see trac-939 - this test fails in IE because of contentDocument
 	var doc = jQuery( "#loadediframe" ).contents();
 
 	jQuery( "div", doc ).on( "click", function() {
@@ -552,7 +552,7 @@ jQuery( "#nonnodes" ).contents().on( "tester", function() {
 		assert.equal( this.nodeType, 1, "Check node,textnode,comment on just does real nodes" );
 	} ).trigger( "tester" );
 
-	// Make sure events stick with appendTo'd elements (which are cloned) #2027
+	// Make sure events stick with appendTo'd elements (which are cloned) trac-2027
 	jQuery( "<a href='#fail' class='test'>test</a>" ).on( "click", function() { return false; } ).appendTo( "#qunit-fixture" );
 	assert.ok( jQuery( "a.test" ).eq( 0 ).triggerHandler( "click" ) === false, "Handler is bound to appendTo'd elements" );
 } );
@@ -589,7 +589,7 @@ jQuery( "#firstp" ).on( "click.test.abc", function() {
 		check( "click.test.abc", "Namespaced click triggered" );
 	} );
 
-	// Those would not trigger/off (#5303)
+	// Those would not trigger/off (trac-5303)
 	jQuery( "#firstp" ).trigger( "click.a.test" );
 	jQuery( "#firstp" ).off( "click.a.test" );
 
@@ -812,7 +812,7 @@ QUnit.test( "off(type)", function( assert ) {
 		.off( "error1 error2", error )
 		.trigger( "error1" ).triggerHandler( "error2" );
 
-	message = "unbind many"; // #3538
+	message = "unbind many"; // trac-3538
 	$elem.on( "error1 error2", error )
 		.off( "error1 error2" )
 		.trigger( "error1" ).triggerHandler( "error2" );
@@ -1041,7 +1041,7 @@ 	$elem[ 0 ].click = function() {
 	} catch ( e ) {
 		pass = false;
 	}
-	assert.ok( pass, "Trigger on a table with a colon in the even type, see #3533" );
+	assert.ok( pass, "Trigger on a table with a colon in the even type, see trac-3533" );
 
 	form = jQuery( "<form action=''></form>" ).appendTo( "body" );
 
@@ -1069,7 +1069,7 @@ jQuery( document ).on( "submit", function() {
 	form.remove();
 } );
 
-QUnit.test( "submit event bubbles on copied forms (#11649)", function( assert ) {
+QUnit.test( "submit event bubbles on copied forms (trac-11649)", function( assert ) {
 	assert.expect( 3 );
 
 	var $formByClone, $formByHTML,
@@ -1105,7 +1105,7 @@ QUnit.test( "submit event bubbles on copied forms (#11649)", function( assert )
 	$testForm.off( "submit", noSubmit );
 } );
 
-QUnit.test( "change event bubbles on copied forms (#11796)", function( assert ) {
+QUnit.test( "change event bubbles on copied forms (trac-11796)", function( assert ) {
 	assert.expect( 3 );
 
 	var $formByClone, $formByHTML,
@@ -1227,7 +1227,7 @@ QUnit.test( "trigger(eventObject, [data], [fn])", function( assert ) {
 	assert.equal( event.isDefaultPrevented(), false, "default not prevented" );
 } );
 
-QUnit.test( ".trigger() bubbling on disconnected elements (#10489)", function( assert ) {
+QUnit.test( ".trigger() bubbling on disconnected elements (trac-10489)", function( assert ) {
 	assert.expect( 2 );
 
 	jQuery( window ).on( "click", function() {
@@ -1251,7 +1251,7 @@ jQuery( "<div><p>hi</p></div>" )
 	jQuery( window ).off( "click" );
 } );
 
-QUnit.test( ".trigger() doesn't bubble load event (#10717)", function( assert ) {
+QUnit.test( ".trigger() doesn't bubble load event (trac-10717)", function( assert ) {
 	assert.expect( 1 );
 
 	jQuery( window ).on( "load", function() {
@@ -1269,7 +1269,7 @@ jQuery( "<img src='" + baseURL + "1x1.jpg' />" )
 	jQuery( window ).off( "load" );
 } );
 
-QUnit.test( "Delegated events in SVG (#10791; #13180)", function( assert ) {
+QUnit.test( "Delegated events in SVG (trac-10791; trac-13180)", function( assert ) {
 	assert.expect( 2 );
 
 	var useElem, e,
@@ -1295,7 +1295,7 @@ jQuery( "#qunit-fixture" )
 		.end();
 
 	// Fire a native click on an SVGElementInstance (the instance tree of an SVG <use>)
-	// to confirm that it doesn't break our event delegation handling (#13180)
+	// to confirm that it doesn't break our event delegation handling (trac-13180)
 	useElem = svg.find( "#use" )[ 0 ];
 	if ( document.createEvent && useElem && useElem.instanceRoot ) {
 		e = document.createEvent( "MouseEvents" );
@@ -1321,7 +1321,7 @@ QUnit.test( "Delegated events with malformed selectors (gh-3071)", function( ass
 	assert.ok( true, "malformed selector does not throw on event" );
 } );
 
-QUnit.test( "Delegated events in forms (#10844; #11145; #8165; #11382, #11764)", function( assert ) {
+QUnit.test( "Delegated events in forms (trac-10844; trac-11145; trac-8165; trac-11382, trac-11764)", function( assert ) {
 	assert.expect( 5 );
 
 	// Alias names like "id" cause havoc
@@ -1376,7 +1376,7 @@ jQuery( "body" )
 	form.remove();
 } );
 
-QUnit.test( "Submit event can be stopped (#11049)", function( assert ) {
+QUnit.test( "Submit event can be stopped (trac-11049)", function( assert ) {
 	assert.expect( 1 );
 
 	// Since we manually bubble in IE, make sure inner handlers get a chance to cancel
@@ -1450,7 +1450,7 @@ 			handler = function( event ) {
 	assert.equal( event.type, "keydown", "Verify type" );
 
 	// ensure "type" in props won't clobber the one set by constructor
-	assert.equal( jQuery.inArray( "type", jQuery.event.props ), -1, "'type' property not in props (#10375)" );
+	assert.equal( jQuery.inArray( "type", jQuery.event.props ), -1, "'type' property not in props (trac-10375)" );
 
 	assert.ok( "keyCode" in event, "Special 'keyCode' property exists" );
 
@@ -1844,7 +1844,7 @@ function( assert ) {
 	assert.expect( 3 );
 	var markup = jQuery( "<div><ul><li><a id=\"a0\"></a><ul id=\"ul0\"><li class=test><a id=\"a0_0\"></a></li><li><a id=\"a0_1\"></a></li></ul></li></ul></div>" ).appendTo( "#qunit-fixture" );
 
-	// Non-positional selector (#12383)
+	// Non-positional selector (trac-12383)
 	markup.find( "#ul0" )
 		.on( "click", "div li a", function() {
 			assert.ok( false, "div is ABOVE the delegation point!" );
@@ -1859,7 +1859,7 @@ function( assert ) {
 		.off( "click" );
 
 	if ( QUnit.jQuerySelectorsPos ) {
-		// Positional selector (#11315)
+		// Positional selector (trac-11315)
 		markup.find( "ul" ).eq( 0 )
 			.on( "click", ">li>a", function() {
 				assert.ok( this.id === "a0", "child li was clicked" );
@@ -1879,7 +1879,7 @@ function( assert ) {
 	markup.remove();
 } );
 
-QUnit.test( "delegated event with selector matching Object.prototype property (#13203)", function( assert ) {
+QUnit.test( "delegated event with selector matching Object.prototype property (trac-13203)", function( assert ) {
 	assert.expect( 1 );
 
 	var matched = 0;
@@ -1893,7 +1893,7 @@ jQuery( "#foo" ).on( "click", "toString", function() {
 	assert.equal( matched, 0, "Nothing matched 'toString'" );
 } );
 
-QUnit.test( "delegated event with intermediate DOM manipulation (#13208)", function( assert ) {
+QUnit.test( "delegated event with intermediate DOM manipulation (trac-13208)", function( assert ) {
 	assert.expect( 1 );
 
 	jQuery( "#foo" ).on( "click", "[id=sap]", function() {} );
@@ -2187,7 +2187,7 @@ jQuery( "body" ).on( "focusin.focusinBubblesTest", function() {
 	jQuery( "body" ).off( "focusin.focusinBubblesTest" );
 } );
 
-QUnit.test( "custom events with colons (#3533, #8272)", function( assert ) {
+QUnit.test( "custom events with colons (trac-3533, trac-8272)", function( assert ) {
 	assert.expect( 1 );
 
 	var tab = jQuery( "<table><tr><td>trigger</td></tr></table>" ).appendTo( "body" );
@@ -2370,7 +2370,7 @@ jQuery( "<p>Gut Feeling</p>" )
 	delete jQuery.event.special[ "gutfeeling" ];
 } );
 
-QUnit.test( ".on and .off, selective mixed removal (#10705)", function( assert ) {
+QUnit.test( ".on and .off, selective mixed removal (trac-10705)", function( assert ) {
 	assert.expect( 7 );
 
 	var timingx = function( e ) {
@@ -2392,7 +2392,7 @@ jQuery( "<p>Strange Pursuit</p>" )
 		.trigger( "click" );	// 0
 } );
 
-QUnit.test( ".on( event-map, null-selector, data ) #11130", function( assert ) {
+QUnit.test( ".on( event-map, null-selector, data ) trac-11130", function( assert ) {
 
 	assert.expect( 1 );
 
@@ -2408,7 +2408,7 @@ QUnit.test( ".on( event-map, null-selector, data ) #11130", function( assert ) {
 	$p.on( map, null, data ).trigger( "foo" );
 } );
 
-QUnit.test( "clone() delegated events (#11076)", function( assert ) {
+QUnit.test( "clone() delegated events (trac-11076)", function( assert ) {
 	assert.expect( 3 );
 
 	var counter = { "center": 0, "fold": 0, "centerfold": 0 },
@@ -2745,7 +2745,7 @@ QUnit.test( "trigger click on checkbox, fires change event", function( assert )
 	} ).trigger( "click" );
 } );
 
-QUnit.test( "Namespace preserved when passed an Event (#12739)", function( assert ) {
+QUnit.test( "Namespace preserved when passed an Event (trac-12739)", function( assert ) {
 	assert.expect( 4 );
 
 	var markup = jQuery(
@@ -2833,7 +2833,7 @@ QUnit.test( "make sure events cloned correctly", function( assert ) {
 	clone.find( "#check1" ).trigger( "change" ); // 0 events should fire
 } );
 
-QUnit.test( "String.prototype.namespace does not cause trigger() to throw (#13360)", function( assert ) {
+QUnit.test( "String.prototype.namespace does not cause trigger() to throw (trac-13360)", function( assert ) {
 	assert.expect( 1 );
 	var errored = false;
 
@@ -2848,7 +2848,7 @@ QUnit.test( "String.prototype.namespace does not cause trigger() to throw (#1336
 	delete String.prototype.namespace;
 } );
 
-QUnit.test( "Inline event result is returned (#13993)", function( assert ) {
+QUnit.test( "Inline event result is returned (trac-13993)", function( assert ) {
 	assert.expect( 1 );
 
 	var result = jQuery( "<p onclick='return 42'>hello</p>" ).triggerHandler( "click" );
@@ -3137,7 +3137,7 @@ setTimeout( function() {
 	}, 50 );
 } );
 
-QUnit.test( "focus-blur order (#12868)", function( assert ) {
+QUnit.test( "focus-blur order (trac-12868)", function( assert ) {
 	assert.expect( 5 );
 
 	var order,
diff --git a/a.js b/b.js
index 30bf169a..52e17a9e 100644
--- a/a.js
+++ b/b.js
@@ -39,9 +39,9 @@ QUnit.test( "text()", function( assert ) {
 
 	// Check serialization of text values
 	assert.equal( jQuery( document.createTextNode( "foo" ) ).text(), "foo", "Text node was retrieved from .text()." );
-	assert.notEqual( jQuery( document ).text(), "", "Retrieving text for the document retrieves all text (#10724)." );
+	assert.notEqual( jQuery( document ).text(), "", "Retrieving text for the document retrieves all text (trac-10724)." );
 
-	// Retrieve from document fragments #10864
+	// Retrieve from document fragments trac-10864
 	frag = document.createDocumentFragment();
 	frag.appendChild( document.createTextNode( "foo" ) );
 
@@ -49,7 +49,7 @@ QUnit.test( "text()", function( assert ) {
 
 	$newLineTest = jQuery( "<div>test<br/>testy</div>" ).appendTo( "#moretests" );
 	$newLineTest.find( "br" ).replaceWith( "\n" );
-	assert.equal( $newLineTest.text(), "test\ntesty", "text() does not remove new lines (#11153)" );
+	assert.equal( $newLineTest.text(), "test\ntesty", "text() does not remove new lines (trac-11153)" );
 
 	$newLineTest.remove();
 } );
@@ -58,7 +58,7 @@ QUnit.test( "text(undefined)", function( assert ) {
 
 	assert.expect( 1 );
 
-	assert.equal( jQuery( "#foo" ).text( "<div" ).text( undefined )[ 0 ].innerHTML, "&lt;div", ".text(undefined) is chainable (#5571)" );
+	assert.equal( jQuery( "#foo" ).text( "<div" ).text( undefined )[ 0 ].innerHTML, "&lt;div", ".text(undefined) is chainable (trac-5571)" );
 } );
 
 function testText( valueObj, assert ) {
@@ -78,16 +78,16 @@ function testText( valueObj, assert ) {
 
 	assert.equal( j[ 2 ].nodeType, 8, "Check node,textnode,comment with text()" );
 
-	// Update multiple elements #11809
+	// Update multiple elements trac-11809
 	expected = "New";
 
 	$multipleElements = jQuery( "<div>Hello</div>" ).add( "<div>World</div>" );
 	$multipleElements.text( expected );
 
-	assert.equal( $multipleElements.eq( 0 ).text(), expected, "text() updates multiple elements (#11809)" );
-	assert.equal( $multipleElements.eq( 1 ).text(), expected, "text() updates multiple elements (#11809)" );
+	assert.equal( $multipleElements.eq( 0 ).text(), expected, "text() updates multiple elements (trac-11809)" );
+	assert.equal( $multipleElements.eq( 1 ).text(), expected, "text() updates multiple elements (trac-11809)" );
 
-	// Prevent memory leaks #11809
+	// Prevent memory leaks trac-11809
 	$childDiv = jQuery( "<div></div>" );
 	$childDiv.data( "leak", true );
 	$parentDiv = jQuery( "<div></div>" );
@@ -187,7 +187,7 @@ function testAppendForObject( valueObj, isFragment, assert ) {
 
 	assert.equal( $base.clone().append( valueObj( document.getElementById( "form" ).cloneNode( true ) ) ).children( "form" ).length,
 		1,
-		"Check for appending a form (#910)" + type
+		"Check for appending a form (trac-910)" + type
 	);
 }
 
@@ -272,7 +272,7 @@ jQuery( "#form" )
 		.append( valueObj( "<select id='appendSelect2'><option>Test</option></select>" ) );
 	assert.t( "Append Select", "#appendSelect1, #appendSelect2", [ "appendSelect1", "appendSelect2" ] );
 
-	assert.equal( "Two nodes", jQuery( "<div></div>" ).append( "Two", " nodes" ).text(), "Appending two text nodes (#4011)" );
+	assert.equal( "Two nodes", jQuery( "<div></div>" ).append( "Two", " nodes" ).text(), "Appending two text nodes (trac-4011)" );
 	assert.equal( jQuery( "<div></div>" ).append( "1", "", 3 ).text(), "13", "If median is false-like value, subsequent arguments should not be ignored" );
 
 	// using contents will get comments regular, text, and comment nodes
@@ -310,7 +310,7 @@ QUnit.test( "append(Function)", function( assert ) {
 	testAppend( manipulationFunctionReturningObj, assert );
 } );
 
-QUnit.test( "append(param) to object, see #11280", function( assert ) {
+QUnit.test( "append(param) to object, see trac-11280", function( assert ) {
 
 	assert.expect( 5 );
 
@@ -402,7 +402,7 @@ jQuery( "#sap" ).append( function( i, val ) {
 	assert.ok( jQuery( "#sap" )[ 0 ].innerHTML.match( /5$/ ), "Check for appending a number" );
 } );
 
-QUnit.test( "XML DOM manipulation (#9960)", function( assert ) {
+QUnit.test( "XML DOM manipulation (trac-9960)", function( assert ) {
 
 	assert.expect( 5 );
 
@@ -430,7 +430,7 @@ QUnit.test( "XML DOM manipulation (#9960)", function( assert ) {
 	assert.deepEqual( jQuery( "state", xml2 ).get(), scxml1.find( "state" ).get(), "replaceWith" );
 } );
 
-QUnit.test( "append HTML5 sectioning elements (Bug #6485)", function( assert ) {
+QUnit.test( "append HTML5 sectioning elements (Bug trac-6485)", function( assert ) {
 
 	assert.expect( 2 );
 
@@ -445,7 +445,7 @@ QUnit.test( "append HTML5 sectioning elements (Bug #6485)", function( assert ) {
 	assert.equal( aside.length, 1, "HTML5 elements do not collapse their children" );
 } );
 
-QUnit[ jQuery.fn.css ? "test" : "skip" ]( "HTML5 Elements inherit styles from style rules (Bug #10501)", function( assert ) {
+QUnit[ jQuery.fn.css ? "test" : "skip" ]( "HTML5 Elements inherit styles from style rules (Bug trac-10501)", function( assert ) {
 
 	assert.expect( 1 );
 
@@ -456,7 +456,7 @@ QUnit.test( "append HTML5 sectioning elements (Bug #6485)", function( assert ) {
 	assert.notEqual( jQuery( "section" ).css( "background-color" ), "transparent", "HTML5 elements inherit styles" );
 } );
 
-QUnit.test( "html(String) with HTML5 (Bug #6485)", function( assert ) {
+QUnit.test( "html(String) with HTML5 (Bug trac-6485)", function( assert ) {
 
 	assert.expect( 2 );
 
@@ -465,7 +465,7 @@ QUnit.test( "html(String) with HTML5 (Bug #6485)", function( assert ) {
 	assert.equal( jQuery( "#qunit-fixture" ).children().children().children().length, 1, "Make sure nested HTML5 elements can hold children." );
 } );
 
-QUnit.test( "html(String) tag-hyphenated elements (Bug #1987)", function( assert ) {
+QUnit.test( "html(String) tag-hyphenated elements (Bug gh-1987)", function( assert ) {
 
 	assert.expect( 27 );
 
@@ -561,7 +561,7 @@ QUnit.test( "IE8 serialization bug", function( assert ) {
 	assert.equal( wrapper.children( "link" ).length, 1, "Link elements are insertable with .html()" );
 } );
 
-QUnit.test( "html() object element #10324", function( assert ) {
+QUnit.test( "html() object element trac-10324", function( assert ) {
 
 	assert.expect( 1 );
 
@@ -959,7 +959,7 @@ QUnit.test( "before(no-op)", function( assert ) {
 	assert.equal( set.length, 1, "Insert the element before the disconnected node. should be a no-op" );
 } );
 
-QUnit.test( "before and after w/ empty object (#10812)", function( assert ) {
+QUnit.test( "before and after w/ empty object (trac-10812)", function( assert ) {
 
 	assert.expect( 1 );
 
@@ -1195,7 +1195,7 @@ function testReplaceWith( val, assert ) {
 	assert.ok( !jQuery( "#baz" )[ 0 ], "Verify that original element is gone, after element" );
 
 	jQuery( "#bar" ).replaceWith( "<div id='yahoo'></div>", "...", "<div id='baz'></div>" );
-	assert.deepEqual( jQuery( "#yahoo, #baz" ).get(), q( "yahoo", "baz" ),  "Replace element with multiple arguments (#13722)" );
+	assert.deepEqual( jQuery( "#yahoo, #baz" ).get(), q( "yahoo", "baz" ),  "Replace element with multiple arguments (trac-13722)" );
 	assert.strictEqual( jQuery( "#yahoo" )[ 0 ].nextSibling, jQuery( "#baz" )[ 0 ].previousSibling, "Argument order preserved" );
 	assert.deepEqual( jQuery( "#bar" ).get(), [], "Verify that original element is gone, after multiple arguments" );
 
@@ -1208,7 +1208,7 @@ function testReplaceWith( val, assert ) {
 	assert.ok( !jQuery( "#groups" )[ 0 ], "Verify that original element is gone, after jQuery collection" );
 
 	jQuery( "#mark, #first" ).replaceWith( val( "<span class='replacement'></span><span class='replacement'></span>" ) );
-	assert.equal( jQuery( "#qunit-fixture .replacement" ).length, 4, "Replace multiple elements (#12449)" );
+	assert.equal( jQuery( "#qunit-fixture .replacement" ).length, 4, "Replace multiple elements (trac-12449)" );
 	assert.deepEqual( jQuery( "#mark, #first" ).get(), [], "Verify that original elements are gone, after replace multiple" );
 
 	tmp = jQuery( "<b>content</b>" )[ 0 ];
@@ -1256,7 +1256,7 @@ function testReplaceWith( val, assert ) {
 		"Self-replacement" );
 	$div.replaceWith( child );
 	assert.deepEqual( jQuery( "#qunit-fixture" ).children().first().get(), child.get(),
-		"Replacement with following sibling (#13810)" );
+		"Replacement with following sibling (trac-13810)" );
 	assert.deepEqual( jQuery( ".pathological", "#qunit-fixture" ).get(), [],
 		"Replacement with following sibling (context removed)" );
 
@@ -1376,7 +1376,7 @@ QUnit.test( "replaceAll(jQuery)", function( assert ) {
 	assert.ok( !jQuery( "#yahoo" )[ 0 ], "Verify that original element is gone, after set of elements" );
 } );
 
-QUnit.test( "jQuery.clone() (#8017)", function( assert ) {
+QUnit.test( "jQuery.clone() (trac-8017)", function( assert ) {
 
 	assert.expect( 2 );
 
@@ -1388,7 +1388,7 @@ QUnit.test( "jQuery.clone() (#8017)", function( assert ) {
 	assert.equal( main.childNodes.length, clone.childNodes.length, "Simple child length to ensure a large dom tree copies correctly" );
 } );
 
-QUnit.test( "append to multiple elements (#8070)", function( assert ) {
+QUnit.test( "append to multiple elements (trac-8070)", function( assert ) {
 
 	assert.expect( 2 );
 
@@ -1543,7 +1543,7 @@ QUnit.test( "clone()", function( assert ) {
 	body.remove();
 } );
 
-QUnit.test( "clone(script type=non-javascript) (#11359)", function( assert ) {
+QUnit.test( "clone(script type=non-javascript) (trac-11359)", function( assert ) {
 
 	assert.expect( 3 );
 
@@ -1556,7 +1556,7 @@ QUnit.test( "clone(script type=non-javascript) (#11359)", function( assert ) {
 	dest.remove();
 } );
 
-QUnit.test( "clone(form element) (Bug #3879, #6655)", function( assert ) {
+QUnit.test( "clone(form element) (Bug trac-3879, trac-6655)", function( assert ) {
 
 	assert.expect( 5 );
 
@@ -1581,7 +1581,7 @@ QUnit.test( "clone(form element) (Bug #3879, #6655)", function( assert ) {
 	assert.equal( clone[ 0 ].defaultValue, "foo", "Textarea defaultValue cloned correctly" );
 } );
 
-QUnit.test( "clone(multiple selected options) (Bug #8129)", function( assert ) {
+QUnit.test( "clone(multiple selected options) (Bug trac-8129)", function( assert ) {
 
 	assert.expect( 1 );
 
@@ -1630,14 +1630,14 @@ QUnit.test( "html(undefined)", function( assert ) {
 
 	assert.expect( 1 );
 
-	assert.equal( jQuery( "#foo" ).html( "<i>test</i>" ).html( undefined ).html().toLowerCase(), "<i>test</i>", ".html(undefined) is chainable (#5571)" );
+	assert.equal( jQuery( "#foo" ).html( "<i>test</i>" ).html( undefined ).html().toLowerCase(), "<i>test</i>", ".html(undefined) is chainable (trac-5571)" );
 } );
 
 QUnit.test( "html() on empty set", function( assert ) {
 
 	assert.expect( 1 );
 
-	assert.strictEqual( jQuery().html(), undefined, ".html() returns undefined for empty sets (#11962)" );
+	assert.strictEqual( jQuery().html(), undefined, ".html() returns undefined for empty sets (trac-11962)" );
 } );
 
 function childNodeNames( node ) {
@@ -1738,7 +1738,7 @@ jQuery( "#nonnodes" ).contents().html( valueObj( "<b>bold</b>" ) ).each( functio
 	fixture.html( valueObj( "<script type='text/javascript'>QUnit.assert.ok( true, 'Injection of identical script' );</script>" ) );
 	fixture.html( valueObj( "<script type='text/javascript'>QUnit.assert.ok( true, 'Injection of identical script' );</script>" ) );
 	fixture.html( valueObj( "<script type='text/javascript'>QUnit.assert.ok( true, 'Injection of identical script' );</script>" ) );
-	fixture.html( valueObj( "foo <form><script type='text/javascript'>QUnit.assert.ok( true, 'Injection of identical script (#975)' );</script></form>" ) );
+	fixture.html( valueObj( "foo <form><script type='text/javascript'>QUnit.assert.ok( true, 'Injection of identical script (trac-975)' );</script></form>" ) );
 
 	jQuery.scriptorder = 0;
 	fixture.html( valueObj( [
@@ -1888,7 +1888,7 @@ QUnit.test( "html(Function) with incoming value -- jQuery.contents()", function(
 	} ).html().replace( />/g, "&gt;" ), " " + insert, "Verify escaped insertion." );
 } );
 
-QUnit.test( "clone()/html() don't expose jQuery/Sizzle expandos (#12858)", function( assert ) {
+QUnit.test( "clone()/html() don't expose jQuery/Sizzle expandos (trac-12858)", function( assert ) {
 
 	assert.expect( 2 );
 
@@ -1975,7 +1975,7 @@ QUnit.test( "remove() event cleaning ", function( assert ) {
 	cleanUp.remove();
 } );
 
-QUnit.test( "remove() in document order #13779", function( assert ) {
+QUnit.test( "remove() in document order trac-13779", function( assert ) {
 	assert.expect( 1 );
 
 	var last,
@@ -2336,7 +2336,7 @@ 	window.corsCallback = function( response ) {
 	}, 2000 );
 } );
 
-QUnit.test( "jQuery.clone - no exceptions for object elements #9587", function( assert ) {
+QUnit.test( "jQuery.clone - no exceptions for object elements trac-9587", function( assert ) {
 
 	assert.expect( 1 );
 
@@ -2348,7 +2348,7 @@ QUnit.test( "jQuery.clone - no exceptions for object elements #9587", function(
 	}
 } );
 
-QUnit.test( "Cloned, detached HTML5 elems (#10667,10670)", function( assert ) {
+QUnit.test( "Cloned, detached HTML5 elems (trac-10667, trac-10670)", function( assert ) {
 
 	assert.expect( 7 );
 
@@ -2428,7 +2428,7 @@ QUnit.test( "Guard against exceptions when clearing safeChildNodes", function( a
 	assert.ok( div && div.jquery, "Created nodes safely, guarded against exceptions on safeChildNodes[ -1 ]" );
 } );
 
-QUnit.test( "Ensure oldIE creates a new set on appendTo (#8894)", function( assert ) {
+QUnit.test( "Ensure oldIE creates a new set on appendTo (trac-8894)", function( assert ) {
 
 	assert.expect( 5 );
 
@@ -2439,7 +2439,7 @@ QUnit.test( "Ensure oldIE creates a new set on appendTo (#8894)", function( asse
 	assert.strictEqual( jQuery( "<p></p>" ).appendTo( "<div></div>" ).end().length, jQuery( "<p>test</p>" ).appendTo( "<div></div>" ).end().length, "Elements created with createElement and with createDocumentFragment should be treated alike" );
 } );
 
-QUnit.test( "html() - script exceptions bubble (#11743)", function( assert ) {
+QUnit.test( "html() - script exceptions bubble (trac-11743)", function( assert ) {
 	assert.expect( 2 );
 	var done = assert.async(),
 		onerror = window.onerror;
@@ -2481,7 +2481,7 @@ QUnit.test( "checked state is cloned with clone()", function( assert ) {
 	assert.equal( jQuery( elem ).clone().attr( "id", "clone" )[ 0 ].checked, true, "Checked true state correctly cloned" );
 } );
 
-QUnit.test( "manipulate mixed jQuery and text (#12384, #12346)", function( assert ) {
+QUnit.test( "manipulate mixed jQuery and text (trac-12384, trac-12346)", function( assert ) {
 
 	assert.expect( 2 );
 
@@ -2497,7 +2497,7 @@ QUnit.test( "manipulate mixed jQuery and text (#12384, #12346)", function( asser
 	assert.equal( div.find( "*" ).length, 3, "added 2 paragraphs after inner div" );
 } );
 
-QUnit.test( "script evaluation (#11795)", function( assert ) {
+QUnit.test( "script evaluation (trac-11795)", function( assert ) {
 
 	assert.expect( 13 );
 
@@ -2551,7 +2551,7 @@ 		notOk = function() {
 	}
 } );
 
-QUnit[ jQuery.ajax ? "test" : "skip" ]( "jQuery._evalUrl (#12838)", function( assert ) {
+QUnit[ jQuery.ajax ? "test" : "skip" ]( "jQuery._evalUrl (trac-12838)", function( assert ) {
 
 	assert.expect( 5 );
 
@@ -2620,7 +2620,7 @@ setTimeout( function() {
 	}, 100 );
 } );
 
-QUnit.test( "insertAfter, insertBefore, etc do not work when destination is original element. Element is removed (#4087)", function( assert ) {
+QUnit.test( "insertAfter, insertBefore, etc do not work when destination is original element. Element is removed (trac-4087)", function( assert ) {
 
 	assert.expect( 10 );
 
@@ -2654,7 +2654,7 @@ QUnit.test( "insertAfter, insertBefore, etc do not work when destination is orig
 	} );
 } );
 
-QUnit.test( "Index for function argument should be received (#13094)", function( assert ) {
+QUnit.test( "Index for function argument should be received (trac-13094)", function( assert ) {
 	assert.expect( 2 );
 
 	var i = 0;
@@ -2676,7 +2676,7 @@ QUnit.test( "Make sure jQuery.fn.remove can work on elements in documentFragment
 	assert.equal( fragment.childNodes.length, 0, "div element was removed from documentFragment" );
 } );
 
-QUnit.test( "Make sure specific elements with content created correctly (#13232)", function( assert ) {
+QUnit.test( "Make sure specific elements with content created correctly (trac-13232)", function( assert ) {
 	assert.expect( 20 );
 
 	var results = [],
@@ -2711,7 +2711,7 @@ QUnit.test( "Make sure specific elements with content created correctly (#13232)
 	} );
 } );
 
-QUnit.test( "Validate creation of multiple quantities of certain elements (#13818)", function( assert ) {
+QUnit.test( "Validate creation of multiple quantities of certain elements (trac-13818)", function( assert ) {
 	assert.expect( 22 );
 
 	var tags = [ "thead", "tbody", "tfoot", "colgroup", "col", "caption", "tr", "th", "td", "optgroup", "option" ];
diff --git a/a.js b/b.js
index 82360c87..d3af15e1 100644
--- a/a.js
+++ b/b.js
@@ -54,8 +54,8 @@ 	checkSupport = function( assert ) {
 
 QUnit.test( "empty set", function( assert ) {
 	assert.expect( 2 );
-	assert.strictEqual( jQuery().offset(), undefined, "offset() returns undefined for empty set (#11962)" );
-	assert.strictEqual( jQuery().position(), undefined, "position() returns undefined for empty set (#11962)" );
+	assert.strictEqual( jQuery().offset(), undefined, "offset() returns undefined for empty set (trac-11962)" );
+	assert.strictEqual( jQuery().position(), undefined, "position() returns undefined for empty set (trac-11962)" );
 } );
 
 QUnit.test( "disconnected element", function( assert ) {
@@ -187,7 +187,7 @@ testIframe( "absolute", "offset/absolute.html", function( assert, $ ) {
 		assert.equal( $( this.id ).position().left, this.left, "jQuery('" + this.id + "').position().left" );
 	} );
 
-	// test #5781
+	// test trac-5781
 	offset = $( "#positionTest" ).offset( { "top": 10, "left": 10 } ).offset();
 	assert.equal( offset.top,  10, "Setting offset on element with position absolute but 'auto' values." );
 	assert.equal( offset.left, 10, "Setting offset on element with position absolute but 'auto' values." );
@@ -468,8 +468,8 @@ testIframe( "scroll", "offset/scroll.html", function( assert, $, win ) {
 	assert.equal( $( "#scroll-1-1" ).scrollLeft(), 0, "jQuery('#scroll-1-1').scrollLeft()" );
 
 	// scroll method chaining
-	assert.equal( $( "#scroll-1" ).scrollTop( undefined ).scrollTop(), 5, ".scrollTop(undefined) is chainable (#5571)" );
-	assert.equal( $( "#scroll-1" ).scrollLeft( undefined ).scrollLeft(), 5, ".scrollLeft(undefined) is chainable (#5571)" );
+	assert.equal( $( "#scroll-1" ).scrollTop( undefined ).scrollTop(), 5, ".scrollTop(undefined) is chainable (trac-5571)" );
+	assert.equal( $( "#scroll-1" ).scrollLeft( undefined ).scrollLeft(), 5, ".scrollLeft(undefined) is chainable (trac-5571)" );
 
 	win.name = "test";
 
@@ -519,7 +519,7 @@ QUnit.test( "chaining", function( assert ) {
 	var coords = { "top":  1, "left":  1 };
 	assert.equal( jQuery( "#absolute-1" ).offset( coords ).jquery, jQuery.fn.jquery, "offset(coords) returns jQuery object" );
 	assert.equal( jQuery( "#non-existent" ).offset( coords ).jquery, jQuery.fn.jquery, "offset(coords) with empty jQuery set returns jQuery object" );
-	assert.equal( jQuery( "#absolute-1" ).offset( undefined ).jquery, jQuery.fn.jquery, "offset(undefined) returns jQuery object (#5571)" );
+	assert.equal( jQuery( "#absolute-1" ).offset( undefined ).jquery, jQuery.fn.jquery, "offset(undefined) returns jQuery object (trac-5571)" );
 } );
 
 // Test complex content under a variety of <html>/<body> positioning styles
@@ -729,11 +729,11 @@ QUnit.test( "offsetParent", function( assert ) {
 	area.remove();
 
 	div = jQuery( "<div>" ).css( { "position": "absolute" } ).appendTo( "body" );
-	assert.equal( div.offsetParent()[ 0 ], document.documentElement, "Absolutely positioned div returns html as offset parent, see #12139" );
+	assert.equal( div.offsetParent()[ 0 ], document.documentElement, "Absolutely positioned div returns html as offset parent, see trac-12139" );
 	div.remove();
 } );
 
-QUnit.test( "fractions (see #7730 and #7885)", function( assert ) {
+QUnit.test( "fractions (see trac-7730 and trac-7885)", function( assert ) {
 	assert.expect( 2 );
 
 	jQuery( "body" ).append( "<div id='fractions'></div>" );
diff --git a/a.js b/b.js
index 7735544b..7e124210 100644
--- a/a.js
+++ b/b.js
@@ -41,7 +41,7 @@ QUnit.test( "queue() with other types", function( assert ) {
 
 	assert.equal( $div.queue( "foo" ).length, 4, "Testing queue length" );
 
-	assert.equal( $div.queue( "foo", undefined ).queue( "foo" ).length, 4, ".queue('name',undefined) does nothing but is chainable (#5571)" );
+	assert.equal( $div.queue( "foo", undefined ).queue( "foo" ).length, 4, ".queue('name',undefined) does nothing but is chainable (trac-5571)" );
 
 	$div.dequeue( "foo" );
 
diff --git a/a.js b/b.js
index 41d9d0f7..2b0c251c 100644
--- a/a.js
+++ b/b.js
@@ -55,10 +55,10 @@ QUnit.test( "element", function( assert ) {
 	assert.deepEqual( jQuery( "p", jQuery( "#qunit-fixture" ) ).get(), q( "firstp", "ap", "sndp", "en", "sap", "first" ), "Finding elements with a jQuery object context." );
 	assert.deepEqual( jQuery( "#qunit-fixture" ).find( "p" ).get(), q( "firstp", "ap", "sndp", "en", "sap", "first" ), "Finding elements with a context via .find()." );
 
-	assert.ok( jQuery( "#length" ).length, "<input name=\"length\"> cannot be found under IE, see #945" );
-	assert.ok( jQuery( "#lengthtest input" ).length, "<input name=\"length\"> cannot be found under IE, see #945" );
+	assert.ok( jQuery( "#length" ).length, "<input name=\"length\"> cannot be found under IE, see trac-945" );
+	assert.ok( jQuery( "#lengthtest input" ).length, "<input name=\"length\"> cannot be found under IE, see trac-945" );
 
-	// #7533
+	// trac-7533
 	assert.equal( jQuery( "<div id=\"A'B~C.D[E]\"><p>foo</p></div>" ).find( "p" ).length, 1, "Find where context root is a node and has an ID with CSS3 meta characters" );
 
 	assert.equal( jQuery( "" ).length, 0, "Empty selector returns an empty array" );
@@ -142,7 +142,8 @@ QUnit.test( "element", function( assert ) {
 		"No stack or performance problems with large amounts of descendants" );
 	html.remove();
 
-	// Real use case would be using .watch in browsers with window.watch (see Issue #157)
+	// Real use case would be using .watch in browsers with window.watch
+	// (see https://github.com/jquery/sizzle/pull/157)
 	q( "qunit-fixture" )[ 0 ].appendChild( document.createElement( "toString" ) ).id = "toString";
 	assert.t( "Element name matches Object.prototype property", "toString#toString", [ "toString" ] );
 } );
@@ -169,7 +170,7 @@ QUnit.test( "XML Document Selectors", function( assert ) {
 		xml = jQuery.parseXML( "<?xml version='1.0' encoding='UTF-8'?><root><elem id='1'/></root>" );
 
 		assert.equal( jQuery( "elem:not(:has(*))", xml ).length, 1,
-			"Non-qSA path correctly handles numeric ids (jQuery #14142)" );
+			"Non-qSA path correctly handles numeric ids (jQuery trac-14142)" );
 	} else {
 		assert.ok( "skip", "namespaced elements not matching correctly in selector-native" );
 		assert.ok( "skip", ":not(complex selector) not supported in selector-native" );
@@ -214,7 +215,7 @@ QUnit.test( "broken selectors throw", function( assert ) {
 	broken( "Last-last-child", ":last-last-child" );
 	broken( "Only-last-child", ":only-last-child" );
 
-	// Make sure attribute value quoting works correctly. See: #6093
+	// Make sure attribute value quoting works correctly. See: trac-6093
 	jQuery( "<input type='hidden' value='2' name='foo.baz' id='attrbad1'/>" +
 		"<input type='hidden' value='2' name='foo[baz]' id='attrbad2'/>" )
 		.appendTo( "#qunit-fixture" );
@@ -267,7 +268,7 @@ QUnit.test( "id", function( assert ) {
 
 	fiddle.remove();
 
-	assert.t( "ID Selector, child ID present", "#form > #radio1", [ "radio1" ] ); // bug #267
+	assert.t( "ID Selector, child ID present", "#form > #radio1", [ "radio1" ] ); // bug trac-267
 	assert.t( "ID Selector, not an ancestor ID", "#form #first", [] );
 	assert.t( "ID Selector, not a child ID", "#form > #option1a", [] );
 
@@ -288,7 +289,7 @@ QUnit.test( "id", function( assert ) {
 
 	assert.t( "ID Selector on Form with an input that has a name of 'id'", "#lengthtest", [ "lengthtest" ] );
 
-	assert.t( "ID selector with non-existent ancestor", "#asdfasdf #foobar", [] ); // bug #986
+	assert.t( "ID selector with non-existent ancestor", "#asdfasdf #foobar", [] ); // bug trac-986
 
 	assert.deepEqual( jQuery( "div#form", document.body ).get(), [],
 		"ID selector within the context of another element" );
@@ -485,7 +486,7 @@ QUnit.test( "child and adjacent", function( assert ) {
 	}
 
 	if ( QUnit.jQuerySelectorsPos ) {
-		assert.equal( jQuery( "#listWithTabIndex li:eq(2) ~ li" ).length, 1, "Find by general sibling combinator (#8310)" );
+		assert.equal( jQuery( "#listWithTabIndex li:eq(2) ~ li" ).length, 1, "Find by general sibling combinator (trac-8310)" );
 
 		nothiddendiv = document.getElementById( "nothiddendiv" );
 		assert.deepEqual( jQuery( "> :first", nothiddendiv ).get(), q( "nothiddendivchild" ),
@@ -505,9 +506,9 @@ QUnit.test( "child and adjacent", function( assert ) {
 	assert.t( "Multiple combinators selects all levels", "#siblingTest > em *", [ "siblingchild", "siblinggrandchild", "siblinggreatgrandchild" ] );
 	assert.t( "Multiple sibling combinators doesn't miss general siblings", "#siblingTest > em:first-child + em ~ span", [ "siblingspan" ] );
 
-	assert.equal( jQuery( "#listWithTabIndex" ).length, 1, "Parent div for next test is found via ID (#8310)" );
-	assert.equal( jQuery( "#__sizzle__" ).length, 0, "Make sure the temporary id assigned by sizzle is cleared out (#8310)" );
-	assert.equal( jQuery( "#listWithTabIndex" ).length, 1, "Parent div for previous test is still found via ID (#8310)" );
+	assert.equal( jQuery( "#listWithTabIndex" ).length, 1, "Parent div for next test is found via ID (trac-8310)" );
+	assert.equal( jQuery( "#__sizzle__" ).length, 0, "Make sure the temporary id assigned by sizzle is cleared out (trac-8310)" );
+	assert.equal( jQuery( "#listWithTabIndex" ).length, 1, "Parent div for previous test is still found via ID (trac-8310)" );
 
 	assert.t( "Verify deep class selector", "div.blah > p > a", [] );
 	assert.t( "No element deep selector", "div.foo > span > a", [] );
@@ -555,7 +556,7 @@ QUnit.test( "attributes - equals", function( assert ) {
 	assert.t( "input[type=search]", "#form input[type=search]", [ "search" ] );
 
 	withScript = supportjQuery( "<div><span><script src=''></script></span></div>" );
-	assert.ok( withScript.find( "#moretests script[src]" ).has( "script" ), "script[src] (jQuery #13777)" );
+	assert.ok( withScript.find( "#moretests script[src]" ).has( "script" ), "script[src] (jQuery trac-13777)" );
 
 	assert.t( "Boolean attribute equals name", "#select2 option[selected='selected']", [ "option2d" ] );
 	assert.t( "for Attribute in form", "#form [for=action]", [ "label-for" ] );
@@ -642,7 +643,7 @@ QUnit.test( "attributes - special characters", function( assert ) {
 	var attrbad;
 	var div = document.createElement( "div" );
 
-	// trac-3279
+	// trac-3729
 	div.innerHTML = "<div id='foo' xml:test='something'></div>";
 	assert.deepEqual( jQuery( "[xml\\:test]", div ).get(),
 		[ div.firstChild ],
@@ -741,7 +742,7 @@ QUnit.test( "attributes - others", function( assert ) {
 	assert.t( "Object.prototype property \"constructor\"", "[constructor='foo']", [ "foo" ] );
 	assert.t( "Gecko Object.prototype property \"watch\"", "[watch='bar']", [ "foo" ] );
 
-	// #11115
+	// trac-11115
 	assert.ok( jQuery( "<input type='checkbox' checked='checked'/>" ).prop( "checked", false ).is( "[checked]" ),
 		"[checked] selects by attribute (positive)"
 	);
@@ -1283,7 +1284,7 @@ QUnit.test( "pseudo - :not", function( assert ) {
 		q( "ap" ),
 		"Seeded pos with trailing relative" );
 
-	// jQuery #12526
+	// jQuery trac-12526
 	var context = jQuery( "#qunit-fixture" ).append( "<div id='jquery12526'></div>" )[ 0 ];
 	assert.deepEqual( jQuery( ":last", context ).get(), q( "jquery12526" ),
 		"Post-manipulation positional" );
@@ -1654,7 +1655,7 @@ QUnit.test( "context", function( assert ) {
 		assert.deepEqual(
 			jQuery( "em + :not(:has(*)):not(:empty), foo", context.firstChild ).get(),
 			expected.slice( 0, 1 ),
-			"Non-qSA path correctly sets detached context for sibling selectors (jQuery #14351)"
+			"Non-qSA path correctly sets detached context for sibling selectors (jQuery trac-14351)"
 		);
 	} else {
 		assert.ok( "skip", ":has not supported in selector-native" );
@@ -1705,7 +1706,7 @@ QUnit.test( "caching does not introduce bugs", function( assert ) {
 	);
 
 	if ( QUnit.jQuerySelectorsPos ) {
-		assert.t( "Deep ancestry caching in post-positional element matcher (jQuery #14657)",
+		assert.t( "Deep ancestry caching in post-positional element matcher (jQuery trac-14657)",
 			"#qunit-fixture a:lt(3):parent",
 			[ "simon1", "google", "groups" ] );
 	} else {
@@ -1836,9 +1837,9 @@ function( assert, jQuery, window, document ) {
 		} );
 		t( "Enumerated attribute", "[spellcheck]", [ "span1" ] );
 
-		t( "tabindex selector does not retrieve all elements in IE6/7 (#8473)",
+		t( "tabindex selector does not retrieve all elements in IE6/7 (trac-8473)",
 			"form, [tabindex]", [ "form1", "text1" ] );
-		t( "Improperly named form elements do not interfere with form selections (#9570)", "form[name='formName']", [ "form1" ] );
+		t( "Improperly named form elements do not interfere with form selections (trac-9570)", "form[name='formName']", [ "form1" ] );
 	}
 );
 
@@ -1894,9 +1895,7 @@ QUnit.test( "jQuery.uniqueSort", function( assert ) {
 		}
 	}
 	Arrayish.prototype = {
-		slice: [].slice,
-		sort: [].sort,
-		splice: [].splice
+		sliceForTestOnly: [].slice
 	};
 
 	var i, tests,
@@ -1958,8 +1957,12 @@ QUnit.test( "jQuery.uniqueSort", function( assert ) {
 
 	jQuery.each( tests, function( label, test ) {
 		var length = test.length || test.input.length;
-		assert.deepEqual( jQuery.uniqueSort( test.input ).slice( 0, length ), test.expected, label + " (array)" );
-		assert.deepEqual( jQuery.uniqueSort( new Arrayish( test.input ) ).slice( 0, length ), test.expected, label + " (quasi-array)" );
+		// We duplicate `test.input` because otherwise it is modified by `uniqueSort`
+		// and the second test becomes worthless.
+		assert.deepEqual( jQuery.uniqueSort( test.input.slice( 0 ) ).slice( 0, length ),
+			test.expected, label + " (array)" );
+		assert.deepEqual( jQuery.uniqueSort( new Arrayish( test.input ) ).sliceForTestOnly( 0, length ),
+			test.expected, label + " (quasi-array)" );
 	} );
 } );
 
@@ -1987,7 +1990,7 @@ function( assert, jQuery, window, document ) {
 	}
 );
 
-QUnit.test( "Iframe dispatch should not affect jQuery (#13936)", function( assert ) {
+QUnit.test( "Iframe dispatch should not affect jQuery (trac-13936)", function( assert ) {
 	assert.expect( 1 );
 	var loaded = false,
 		thrown = false,
diff --git a/a.js b/b.js
index c4e6a6c5..18f7b299 100644
--- a/a.js
+++ b/b.js
@@ -34,7 +34,7 @@ QUnit.test( "jQuery.param()", function( assert ) {
 
 	assert.equal( decodeURIComponent( jQuery.param( { "a": [ 1, 2, 3 ], "b[]": [ 4, 5, 6 ], "c[d]": [ 7, 8, 9 ], "e": { "f": [ 10 ], "g": [ 11, 12 ], "h": 13 } } ) ), "a[]=1&a[]=2&a[]=3&b[]=4&b[]=5&b[]=6&c[d][]=7&c[d][]=8&c[d][]=9&e[f][]=10&e[g][]=11&e[g][]=12&e[h]=13", "Make sure params are not double-encoded." );
 
-	// #7945
+	// trac-7945
 	assert.equal( jQuery.param( { "jquery": "1.4.2" } ), "jquery=1.4.2", "Check that object with a jQuery property get serialized correctly" );
 
 	params = { "foo":"bar", "baz":42, "quux":"All your base are belong to us" };
diff --git a/a.js b/b.js
index f0755cbf..04c2ddcb 100644
--- a/a.js
+++ b/b.js
@@ -19,7 +19,7 @@ function getComputedSupport( support ) {
 
 if ( jQuery.css ) {
 	testIframe(
-		"body background is not lost if set prior to loading jQuery (#9239)",
+		"body background is not lost if set prior to loading jQuery (trac-9239)",
 		"support/bodyBackground.html",
 		function( assert, jQuery, window, document, color, support ) {
 			assert.expect( 2 );
diff --git a/a.js b/b.js
index 53b9f11a..eea81240 100644
--- a/a.js
+++ b/b.js
@@ -47,7 +47,7 @@ QUnit.test( "find(node|jQuery object)", function( assert ) {
 	assert.equal( $two.find( $first ).length, 0, "first is in the collection and not within two" );
 	assert.equal( $two.find( $first ).length, 0, "first is in the collection and not within two(node)" );
 
-	assert.equal( $two.find( $foo[ 0 ] ).addBack().length, 2, "find preserves the pushStack, see #12009" );
+	assert.equal( $two.find( $foo[ 0 ] ).addBack().length, 2, "find preserves the pushStack, see trac-12009" );
 } );
 
 QUnit.test( "is(falsy|invalid)", function( assert ) {
@@ -135,7 +135,7 @@ QUnit.test( "is(String)", function( assert ) {
 	assert.ok( !jQuery( disconnected ).is( "* > *" ), "child combinator fails in fragment" );
 } );
 
-QUnit.test( "is() against non-elements (#10178)", function( assert ) {
+QUnit.test( "is() against non-elements (trac-10178)", function( assert ) {
 	assert.expect( 14 );
 
 	var label, i, test,
@@ -241,10 +241,10 @@ 		isit = function( sel, match, expect ) {
 	isit( "#posp em", "#posp a em:last", true );
 	isit( "#posp em", "#posp a em:eq(2)", false );
 
-	assert.ok( jQuery( "#option1b" ).is( "#select1 option:not(:first)" ), "POS inside of :not() (#10970)" );
+	assert.ok( jQuery( "#option1b" ).is( "#select1 option:not(:first)" ), "POS inside of :not() (trac-10970)" );
 
-	assert.ok( jQuery( posp[ 0 ] ).is( "p:last" ), "context constructed from a single node (#13797)" );
-	assert.ok( !jQuery( posp[ 0 ] ).find( "#firsta" ).is( "a:first" ), "context derived from a single node (#13797)" );
+	assert.ok( jQuery( posp[ 0 ] ).is( "p:last" ), "context constructed from a single node (trac-13797)" );
+	assert.ok( !jQuery( posp[ 0 ] ).find( "#firsta" ).is( "a:first" ), "context derived from a single node (trac-13797)" );
 } );
 
 QUnit.test( "index()", function( assert ) {
@@ -405,14 +405,14 @@ QUnit.test( "closest()", function( assert ) {
 		"Non-string match target"
 	);
 
-	// Bug #7369
+	// Bug trac-7369
 	assert.equal( jQuery( "<div foo='bar'></div>" ).closest( "[foo]" ).length, 1, "Disconnected nodes with attribute selector" );
 	assert.equal( jQuery( "<div>text</div>" ).closest( "[lang]" ).length, 0, "Disconnected nodes with text and non-existent attribute selector" );
 
 	assert.ok( !jQuery( document ).closest( "#foo" ).length, "Calling closest on a document fails silently" );
 
 	jq = jQuery( "<div>text</div>" );
-	assert.deepEqual( jq.contents().closest( "*" ).get(), jq.get(), "Text node input (#13332)" );
+	assert.deepEqual( jq.contents().closest( "*" ).get(), jq.get(), "Text node input (trac-13332)" );
 } );
 
 QUnit[ QUnit.jQuerySelectorsPos ? "test" : "skip" ]( "closest() with positional selectors", function( assert ) {
@@ -624,8 +624,8 @@ QUnit.test( "siblings([String])", function( assert ) {
 
 	var set = q( "sndp", "en", "sap" );
 	assert.deepEqual( jQuery( "#en, #sndp" ).siblings().get(), set, "Check for unique results from siblings" );
-	assert.deepEqual( jQuery( "#option5a" ).siblings( "option[data-attr]" ).get(), q( "option5c" ), "Has attribute selector in siblings (#9261)" );
-	assert.equal( jQuery( "<a></a>" ).siblings().length, 0, "Detached elements have no siblings (#11370)" );
+	assert.deepEqual( jQuery( "#option5a" ).siblings( "option[data-attr]" ).get(), q( "option5c" ), "Has attribute selector in siblings (trac-9261)" );
+	assert.equal( jQuery( "<a></a>" ).siblings().length, 0, "Detached elements have no siblings (trac-11370)" );
 } );
 
 QUnit[ QUnit.jQuerySelectors ? "test" : "skip" ]( "siblings([String])", function( assert ) {
@@ -657,7 +657,7 @@ QUnit.test( "parent([String])", function( assert ) {
 	assert.deepEqual( jQuery( "#en, #sndp" ).parent().get(), q( "foo" ), "Check for unique results from parent" );
 
 	$el = jQuery( "<div>text</div>" );
-	assert.deepEqual( $el.contents().parent().get(), $el.get(), "Check for parent of text node (#13265)" );
+	assert.deepEqual( $el.contents().parent().get(), $el.get(), "Check for parent of text node (trac-13265)" );
 } );
 
 QUnit.test( "parents([String])", function( assert ) {
@@ -1067,7 +1067,7 @@ QUnit.test( "add(String, Context)", function( assert ) {
 	assert.deepEqual( jQuery( document.getElementById( "firstp" ) ).add( "#ap", document.getElementsByTagName( "body" )[ 0 ] ).get(), q( "firstp", "ap" ), "Add gEBId to selector, in context" );
 } );
 
-QUnit.test( "eq('-1') #10616", function( assert ) {
+QUnit.test( "eq('-1') trac-10616", function( assert ) {
 	assert.expect( 3 );
 	var $divs = jQuery( "div" );
 
@@ -1076,7 +1076,7 @@ QUnit.test( "eq('-1') #10616", function( assert ) {
 	assert.deepEqual( $divs.eq( "-1" ), $divs.eq( -1 ), "String and number -1 match" );
 } );
 
-QUnit.test( "index(no arg) #10977", function( assert ) {
+QUnit.test( "index(no arg) trac-10977", function( assert ) {
 	assert.expect( 2 );
 	var $list, fragment, div;
 
@@ -1091,7 +1091,7 @@ QUnit.test( "index(no arg) #10977", function( assert ) {
 	assert.equal( jQuery( div ).index(), 0, "If jQuery#index called on element whose parent is fragment, it still should work correctly" );
 } );
 
-QUnit.test( "traversing non-elements with attribute filters (#12523)", function( assert ) {
+QUnit.test( "traversing non-elements with attribute filters (trac-12523)", function( assert ) {
 	assert.expect( 5 );
 
 	var nonnodes = jQuery( "#nonnodes" ).contents();
diff --git a/a.js b/b.js
index 3c0990ea..1f920129 100644
--- a/a.js
+++ b/b.js
@@ -47,11 +47,11 @@ jQuery( "#check1" ).on( "click", function() {
 		var checkbox = this;
 
 		assert.ok(
-		checkbox.checked, "Checkbox's state is erased after wrap() action, see #769"
+		checkbox.checked, "Checkbox's state is erased after wrap() action, see trac-769"
 	);
 		jQuery( checkbox ).wrap( val( "<div id='c1' style='display:none;'></div>" ) );
 		assert.ok(
-		checkbox.checked, "Checkbox's state is erased after wrap() action, see #769"
+		checkbox.checked, "Checkbox's state is erased after wrap() action, see trac-769"
 	);
 	} ).prop( "checked", false )[ 0 ].click();
 
@@ -131,7 +131,7 @@ QUnit.test( "wrap(Function)", function( assert ) {
 	testWrap( manipulationFunctionReturningObj, assert );
 } );
 
-QUnit.test( "wrap(Function) with index (#10177)", function( assert ) {
+QUnit.test( "wrap(Function) with index (trac-10177)", function( assert ) {
 	var expectedIndex = 0,
 		targets = jQuery( "#qunit-fixture p" );
 
@@ -147,7 +147,7 @@ QUnit.test( "wrap(Function) with index (#10177)", function( assert ) {
 	} );
 } );
 
-QUnit.test( "wrap(String) consecutive elements (#10177)", function( assert ) {
+QUnit.test( "wrap(String) consecutive elements (trac-10177)", function( assert ) {
 	var targets = jQuery( "#qunit-fixture p" );
 
 	assert.expect( targets.length * 2 );
@@ -484,7 +484,7 @@ jQuery( "body" ).append(
 	jQuery( "body > span.unwrap" ).remove();
 } );
 
-QUnit.test( "jQuery(<tag>) & wrap[Inner/All]() handle unknown elems (#10667)", function( assert ) {
+QUnit.test( "jQuery(<tag>) & wrap[Inner/All]() handle unknown elems (trac-10667)", function( assert ) {
 
 	assert.expect( 2 );
 
@@ -503,7 +503,7 @@ QUnit.test( "jQuery(<tag>) & wrap[Inner/All]() handle unknown elems (#10667)", f
 	);
 } );
 
-QUnit.test( "wrapping scripts (#10470)", function( assert ) {
+QUnit.test( "wrapping scripts (trac-10470)", function( assert ) {
 
 	assert.expect( 2 );
 
diff --git a/a.js b/b.js
index 6d8b6a2d..15d624bb 100644
--- a/a.js
+++ b/b.js
@@ -16,6 +16,12 @@ function curCSS( elem, name, computed ) {
 
 		// trim whitespace for custom property (issue gh-4926)
 		if ( isCustomProp ) {
+
+			// rtrim treats U+000D CARRIAGE RETURN and U+000C FORM FEED
+			// as whitespace while CSS does not, but this is not a problem
+			// because CSS preprocessing replaces them with U+000A LINE FEED
+			// (which *is* CSS whitespace)
+			// https://www.w3.org/TR/css-syntax-3/#input-preprocessing
 			ret = ret.replace( rtrim, "$1" );
 		}
 
diff --git a/a.js b/b.js
index ad9dd6d6..7514c9a7 100644
--- a/a.js
+++ b/b.js
@@ -22,7 +22,7 @@ module.exports = function( grunt ) {
 	var fs = require( "fs" ),
 		gzip = require( "gzip-js" ),
 		oldNode = /^v10\./.test( process.version ),
-		isCi = process.env.TRAVIS || process.env.GITHUB_ACTION,
+		isCi = process.env.GITHUB_ACTION,
 		ciBrowsers = process.env.BROWSERS && process.env.BROWSERS.split( "," );
 
 	if ( !grunt.option( "filename" ) ) {
diff --git a/a.js b/b.js
index fc8ed3ef..d06ce997 100644
--- a/a.js
+++ b/b.js
@@ -613,7 +613,7 @@ ajaxTest( "jQuery.ajax() - events without context", 3, function( assert ) {
 		};
 	} );
 
-	ajaxTest( "#15118 - jQuery.ajax() - function without jQuery.event", 1, function( assert ) {
+	ajaxTest( "trac-15118 - jQuery.ajax() - function without jQuery.event", 1, function( assert ) {
 		var holder;
 		return {
 			url: url( "mock.php?action=json" ),
@@ -629,7 +629,7 @@ ajaxTest( "#15118 - jQuery.ajax() - function without jQuery.event", 1, function(
 		};
 	} );
 
-	ajaxTest( "#15160 - jQuery.ajax() - request manually aborted in ajaxSend", 3, function( assert ) {
+	ajaxTest( "trac-15160 - jQuery.ajax() - request manually aborted in ajaxSend", 3, function( assert ) {
 		return {
 			setup: function() {
 				jQuery( document ).on( "ajaxSend", function( e, jqXHR ) {
@@ -1634,12 +1634,25 @@ ajaxTest( "jQuery.ajax() - data - no processing GET", 1, function( assert ) {
 		function( label, cache ) {
 			jQuery.each(
 				{
-					"If-Modified-Since": "mock.php?action=ims",
-					"Etag": "mock.php?action=etag"
+					"If-Modified-Since": {
+						url: "mock.php?action=ims",
+						qunitMethod: "test"
+					},
+					"Etag": {
+						url: "mock.php?action=etag",
+
+						// Support: TestSwarm
+						// TestSwarm is now proxied via Cloudflare which cuts out
+						// headers relevant for ETag tests, failing them. We're still
+						// running those tests in Karma on Chrome & Firefox (including
+						// Firefox ESR).
+						qunitMethod: QUnit.isSwarm ? "skip" : "test"
+					}
 				},
-				function( type, url ) {
-					url = baseURL + url + "&ts=" + ifModifiedNow++;
-					QUnit.test( "jQuery.ajax() - " + type + " support" + label, function( assert ) {
+				function( type, data ) {
+					var url = baseURL + data.url + "&ts=" + ifModifiedNow++;
+					QUnit[ data.qunitMethod ]( "jQuery.ajax() - " + type +
+							" support" + label, function( assert ) {
 						assert.expect( 4 );
 						var done = assert.async();
 						jQuery.ajax( {
@@ -1882,7 +1895,7 @@ ajaxTest( "jQuery.ajax() - empty json gets to error callback instead of success
 		};
 	} );
 
-	ajaxTest( "#2688 - jQuery.ajax() - beforeSend, cancel request", 2, function( assert ) {
+	ajaxTest( "trac-2688 - jQuery.ajax() - beforeSend, cancel request", 2, function( assert ) {
 		return {
 			create: function() {
 				return jQuery.ajax( {
@@ -1908,7 +1921,7 @@ ajaxTest( "#2688 - jQuery.ajax() - beforeSend, cancel request", 2, function( ass
 		};
 	} );
 
-	ajaxTest( "#2806 - jQuery.ajax() - data option - evaluate function values", 1, function( assert ) {
+	ajaxTest( "trac-2806 - jQuery.ajax() - data option - evaluate function values", 1, function( assert ) {
 		return {
 			url: baseURL + "mock.php?action=echoQuery",
 			data: {
@@ -1922,7 +1935,7 @@ ajaxTest( "#2806 - jQuery.ajax() - data option - evaluate function values", 1, f
 		};
 	} );
 
-	QUnit.test( "#7531 - jQuery.ajax() - Location object as url", function( assert ) {
+	QUnit.test( "trac-7531 - jQuery.ajax() - Location object as url", function( assert ) {
 		assert.expect( 1 );
 
 		var xhr,
@@ -1940,7 +1953,7 @@ QUnit.test( "#7531 - jQuery.ajax() - Location object as url", function( assert )
 	} );
 
 	jQuery.each( [ " - Same Domain", " - Cross Domain" ], function( crossDomain, label ) {
-		ajaxTest( "#7578 - jQuery.ajax() - JSONP - default for cache option" + label, 1, function( assert ) {
+		ajaxTest( "trac-7578 - jQuery.ajax() - JSONP - default for cache option" + label, 1, function( assert ) {
 			return {
 				url: baseURL + "mock.php?action=jsonp",
 				dataType: "jsonp",
@@ -1954,7 +1967,7 @@ QUnit.test( "#7531 - jQuery.ajax() - Location object as url", function( assert )
 		} );
 	} );
 
-	ajaxTest( "#8107 - jQuery.ajax() - multiple method signatures introduced in 1.5", 4, function( assert ) {
+	ajaxTest( "trac-8107 - jQuery.ajax() - multiple method signatures introduced in 1.5", 4, function( assert ) {
 		return [
 			{
 				create: function() {
@@ -1993,7 +2006,7 @@ ajaxTest( "#8107 - jQuery.ajax() - multiple method signatures introduced in 1.5"
 	} );
 
 	jQuery.each( [ " - Same Domain", " - Cross Domain" ], function( crossDomain, label ) {
-		ajaxTest( "#8205 - jQuery.ajax() - JSONP - re-use callbacks name" + label, 4, function( assert ) {
+		ajaxTest( "trac-8205 - jQuery.ajax() - JSONP - re-use callbacks name" + label, 4, function( assert ) {
 			return {
 				url: baseURL + "mock.php?action=jsonp",
 				dataType: "jsonp",
@@ -2031,7 +2044,7 @@ ajaxTest( "#8107 - jQuery.ajax() - multiple method signatures introduced in 1.5"
 		} );
 	} );
 
-	QUnit.test( "#9887 - jQuery.ajax() - Context with circular references (#9887)", function( assert ) {
+	QUnit.test( "trac-9887 - jQuery.ajax() - Context with circular references (trac-9887)", function( assert ) {
 		assert.expect( 2 );
 
 		var success = false,
@@ -2065,7 +2078,7 @@ QUnit.test( "#9887 - jQuery.ajax() - Context with circular references (#9887)",
 			};
 		}
 
-		ajaxTest( "#10093 - jQuery.ajax() - falsy url " + title, 4, function( assert ) {
+		ajaxTest( "trac-10093 - jQuery.ajax() - falsy url " + title, 4, function( assert ) {
 			return [
 				request( assert, "", "empty string" ),
 				request( assert, false ),
@@ -2075,7 +2088,7 @@ QUnit.test( "#9887 - jQuery.ajax() - Context with circular references (#9887)",
 		} );
 	} );
 
-	ajaxTest( "#11151 - jQuery.ajax() - parse error body", 2, function( assert ) {
+	ajaxTest( "trac-11151 - jQuery.ajax() - parse error body", 2, function( assert ) {
 		return {
 			url: url( "mock.php?action=error&json=1" ),
 			dataFilter: function( string ) {
@@ -2089,7 +2102,7 @@ ajaxTest( "#11151 - jQuery.ajax() - parse error body", 2, function( assert ) {
 		};
 	} );
 
-	ajaxTest( "#11426 - jQuery.ajax() - loading binary data shouldn't throw an exception in IE", 1, function( assert ) {
+	ajaxTest( "trac-11426 - jQuery.ajax() - loading binary data shouldn't throw an exception in IE", 1, function( assert ) {
 		return {
 			url: url( "1x1.jpg" ),
 			success: function( data ) {
@@ -2122,7 +2135,7 @@ ajaxTest( "gh-2498 - jQuery.ajax() - binary data shouldn't throw an exception",
 	} );
 }
 
-	QUnit.test( "#11743 - jQuery.ajax() - script, throws exception", function( assert ) {
+	QUnit.test( "trac-11743 - jQuery.ajax() - script, throws exception", function( assert ) {
 		assert.expect( 1 );
 		var done = assert.async();
 		var onerror = window.onerror;
@@ -2157,7 +2170,7 @@ 				options.success = function( msg ) {
 		}
 
 		ajaxTest(
-			"#12004 - jQuery.ajax() - method is an alias of type - " +
+			"trac-12004 - jQuery.ajax() - method is an alias of type - " +
 			globalOption + " set globally", 3,
 			function( assert ) {
 				return {
@@ -2176,7 +2189,7 @@ 				options.success = function( msg ) {
 		);
 	} );
 
-	ajaxTest( "#13276 - jQuery.ajax() - compatibility between XML documents from ajax requests and parsed string", 1, function( assert ) {
+	ajaxTest( "trac-13276 - jQuery.ajax() - compatibility between XML documents from ajax requests and parsed string", 1, function( assert ) {
 		return {
 			url: baseURL + "dashboard.xml",
 			dataType: "xml",
@@ -2194,7 +2207,7 @@ ajaxTest( "#13276 - jQuery.ajax() - compatibility between XML documents from aja
 		};
 	} );
 
-	ajaxTest( "#13292 - jQuery.ajax() - converter is bypassed for 204 requests", 3, function( assert ) {
+	ajaxTest( "trac-13292 - jQuery.ajax() - converter is bypassed for 204 requests", 3, function( assert ) {
 		return {
 			url: baseURL + "mock.php?action=status&code=204&text=No+Content",
 			dataType: "testing",
@@ -2216,7 +2229,7 @@ ajaxTest( "#13292 - jQuery.ajax() - converter is bypassed for 204 requests", 3,
 		};
 	} );
 
-	ajaxTest( "#13388 - jQuery.ajax() - responseXML", 3, function( assert ) {
+	ajaxTest( "trac-13388 - jQuery.ajax() - responseXML", 3, function( assert ) {
 		return {
 			url: url( "with_fries.xml" ),
 			dataType: "xml",
@@ -2228,7 +2241,7 @@ ajaxTest( "#13388 - jQuery.ajax() - responseXML", 3, function( assert ) {
 		};
 	} );
 
-	ajaxTest( "#13922 - jQuery.ajax() - converter is bypassed for HEAD requests", 3, function( assert ) {
+	ajaxTest( "trac-13922 - jQuery.ajax() - converter is bypassed for HEAD requests", 3, function( assert ) {
 		return {
 			url: baseURL + "mock.php?action=json",
 			method: "HEAD",
@@ -2259,7 +2272,7 @@ ajaxTest( "#13922 - jQuery.ajax() - converter is bypassed for HEAD requests", 3,
 	// Safari 13 did similar changes. The below check will catch them both.
 	if ( !/safari/i.test( navigator.userAgent ) ) {
 		testIframe(
-			"#14379 - jQuery.ajax() on unload",
+			"trac-14379 - jQuery.ajax() on unload",
 			"ajax/onunload.html",
 			function( assert, jQuery, window, document, status ) {
 				assert.expect( 1 );
@@ -2268,7 +2281,7 @@ ajaxTest( "#13922 - jQuery.ajax() - converter is bypassed for HEAD requests", 3,
 		);
 	}
 
-	ajaxTest( "#14683 - jQuery.ajax() - Exceptions thrown synchronously by xhr.send should be caught", 4, function( assert ) {
+	ajaxTest( "trac-14683 - jQuery.ajax() - Exceptions thrown synchronously by xhr.send should be caught", 4, function( assert ) {
 		return [ {
 			url: baseURL + "mock.php?action=echoData",
 			method: "POST",
@@ -2491,7 +2504,7 @@ QUnit.test( "jQuery.ajaxSetup({ timeout: Number }) with localtimeout", function(
 
 //----------- jQuery.domManip()
 
-	QUnit.test( "#11264 - jQuery.domManip() - no side effect because of ajaxSetup or global events", function( assert ) {
+	QUnit.test( "trac-11264 - jQuery.domManip() - no side effect because of ajaxSetup or global events", function( assert ) {
 		assert.expect( 1 );
 
 		jQuery.ajaxSetup( {
@@ -2508,7 +2521,7 @@ QUnit.test( "#11264 - jQuery.domManip() - no side effect because of ajaxSetup or
 	} );
 
 	QUnit.test(
-		"jQuery#load() - always use GET method even if it overrided through ajaxSetup (#11264)",
+		"jQuery#load() - always use GET method even if it overrided through ajaxSetup (trac-11264)",
 		function( assert ) {
 			assert.expect( 1 );
 			var done = assert.async();
@@ -2545,7 +2558,7 @@ QUnit.test(
 	);
 
 	QUnit.test(
-		"#11402 - jQuery.domManip() - script in comments are properly evaluated",
+		"trac-11402 - jQuery.domManip() - script in comments are properly evaluated",
 		function( assert ) {
 			assert.expect( 2 );
 			jQuery( "#qunit-fixture" ).load( baseURL + "cleanScript.html", assert.async() );
@@ -2568,7 +2581,7 @@ QUnit.test( "jQuery.get( String, Hash, Function ) - parse xml and use text() on
 		} );
 	} );
 
-	QUnit.test( "#8277 - jQuery.get( String, Function ) - data in ajaxSettings", function( assert ) {
+	QUnit.test( "trac-8277 - jQuery.get( String, Function ) - data in ajaxSettings", function( assert ) {
 		assert.expect( 1 );
 		var done = assert.async();
 		jQuery.ajaxSetup( {
@@ -2659,7 +2672,7 @@ QUnit.test( "jQuery.getScript( String, Function ) - no callback", function( asse
 		jQuery.getScript( url( "mock.php?action=testbar" ) ).done( assert.async() );
 	} );
 
-	QUnit.test( "#8082 - jQuery.getScript( String, Function ) - source as responseText", function( assert ) {
+	QUnit.test( "trac-8082 - jQuery.getScript( String, Function ) - source as responseText", function( assert ) {
 		assert.expect( 2 );
 		var done = assert.async();
 
@@ -2746,7 +2759,7 @@ QUnit.test( "jQuery.fn.load( URL_SELECTOR )", function( assert ) {
 		} );
 	} );
 
-	// Selector should be trimmed to avoid leading spaces (#14773)
+	// Selector should be trimmed to avoid leading spaces (trac-14773)
 	QUnit.test( "jQuery.fn.load( URL_SELECTOR with spaces )", function( assert ) {
 		assert.expect( 1 );
 		var done = assert.async();
@@ -2756,9 +2769,9 @@ QUnit.test( "jQuery.fn.load( URL_SELECTOR with spaces )", function( assert ) {
 		} );
 	} );
 
-	// Selector should be trimmed to avoid leading spaces (#14773)
-	// Selector should include any valid non-HTML whitespace (#3003)
-	QUnit.test( "jQuery.fn.load( URL_SELECTOR with non-HTML whitespace(#3003) )", function( assert ) {
+	// Selector should be trimmed to avoid leading spaces (trac-14773)
+	// Selector should include any valid non-HTML whitespace (gh-3003)
+	QUnit.test( "jQuery.fn.load( URL_SELECTOR with non-HTML whitespace(gh-3003) )", function( assert ) {
 		assert.expect( 1 );
 		var done = assert.async();
 		jQuery( "#first" ).load( baseURL + "test3.html   #whitespace\\\\xA0 ", function() {
@@ -2889,7 +2902,7 @@ QUnit.test( "jQuery.fn.load() - callbacks get the correct parameters", function(
 		).always( done );
 	} );
 
-	QUnit.test( "#2046 - jQuery.fn.load( String, Function ) with ajaxSetup on dataType json", function( assert ) {
+	QUnit.test( "trac-2046 - jQuery.fn.load( String, Function ) with ajaxSetup on dataType json", function( assert ) {
 		assert.expect( 1 );
 		var done = assert.async();
 
@@ -2904,7 +2917,7 @@ QUnit.test( "#2046 - jQuery.fn.load( String, Function ) with ajaxSetup on dataTy
 		jQuery( "#first" ).load( baseURL + "test3.html" );
 	} );
 
-	QUnit.test( "#10524 - jQuery.fn.load() - data specified in ajaxSettings is merged in", function( assert ) {
+	QUnit.test( "trac-10524 - jQuery.fn.load() - data specified in ajaxSettings is merged in", function( assert ) {
 		assert.expect( 1 );
 		var done = assert.async();
 
diff --git a/a.js b/b.js
index 4ab17e8e..d06ce997 100644
--- a/a.js
+++ b/b.js
@@ -613,7 +613,7 @@ ajaxTest( "jQuery.ajax() - events without context", 3, function( assert ) {
 		};
 	} );
 
-	ajaxTest( "#15118 - jQuery.ajax() - function without jQuery.event", 1, function( assert ) {
+	ajaxTest( "trac-15118 - jQuery.ajax() - function without jQuery.event", 1, function( assert ) {
 		var holder;
 		return {
 			url: url( "mock.php?action=json" ),
@@ -629,7 +629,7 @@ ajaxTest( "#15118 - jQuery.ajax() - function without jQuery.event", 1, function(
 		};
 	} );
 
-	ajaxTest( "#15160 - jQuery.ajax() - request manually aborted in ajaxSend", 3, function( assert ) {
+	ajaxTest( "trac-15160 - jQuery.ajax() - request manually aborted in ajaxSend", 3, function( assert ) {
 		return {
 			setup: function() {
 				jQuery( document ).on( "ajaxSend", function( e, jqXHR ) {
@@ -1634,12 +1634,25 @@ ajaxTest( "jQuery.ajax() - data - no processing GET", 1, function( assert ) {
 		function( label, cache ) {
 			jQuery.each(
 				{
-					"If-Modified-Since": "mock.php?action=ims",
-					"Etag": "mock.php?action=etag"
+					"If-Modified-Since": {
+						url: "mock.php?action=ims",
+						qunitMethod: "test"
+					},
+					"Etag": {
+						url: "mock.php?action=etag",
+
+						// Support: TestSwarm
+						// TestSwarm is now proxied via Cloudflare which cuts out
+						// headers relevant for ETag tests, failing them. We're still
+						// running those tests in Karma on Chrome & Firefox (including
+						// Firefox ESR).
+						qunitMethod: QUnit.isSwarm ? "skip" : "test"
+					}
 				},
-				function( type, url ) {
-					url = baseURL + url + "&ts=" + ifModifiedNow++;
-					QUnit.test( "jQuery.ajax() - " + type + " support" + label, function( assert ) {
+				function( type, data ) {
+					var url = baseURL + data.url + "&ts=" + ifModifiedNow++;
+					QUnit[ data.qunitMethod ]( "jQuery.ajax() - " + type +
+							" support" + label, function( assert ) {
 						assert.expect( 4 );
 						var done = assert.async();
 						jQuery.ajax( {
@@ -1704,7 +1717,8 @@ QUnit.test( "jQuery.ajax() - statusText", function( assert ) {
 		var done = assert.async();
 		jQuery.ajax( url( "mock.php?action=status&code=200&text=Hello" ) ).done( function( _, statusText, jqXHR ) {
 			assert.strictEqual( statusText, "success", "callback status text ok for success" );
-			assert.ok( jqXHR.statusText === "Hello" || jqXHR.statusText === "OK", "jqXHR status text ok for success (" + jqXHR.statusText + ")" );
+			assert.ok( [ "Hello", "OK", "success" ].indexOf( jqXHR.statusText ) > -1,
+				"jqXHR status text ok for success (" + jqXHR.statusText + ")" );
 			jQuery.ajax( url( "mock.php?action=status&code=404&text=World" ) ).fail( function( jqXHR, statusText ) {
 				assert.strictEqual( statusText, "error", "callback status text ok for error" );
 				done();
@@ -1881,7 +1895,7 @@ ajaxTest( "jQuery.ajax() - empty json gets to error callback instead of success
 		};
 	} );
 
-	ajaxTest( "#2688 - jQuery.ajax() - beforeSend, cancel request", 2, function( assert ) {
+	ajaxTest( "trac-2688 - jQuery.ajax() - beforeSend, cancel request", 2, function( assert ) {
 		return {
 			create: function() {
 				return jQuery.ajax( {
@@ -1907,7 +1921,7 @@ ajaxTest( "#2688 - jQuery.ajax() - beforeSend, cancel request", 2, function( ass
 		};
 	} );
 
-	ajaxTest( "#2806 - jQuery.ajax() - data option - evaluate function values", 1, function( assert ) {
+	ajaxTest( "trac-2806 - jQuery.ajax() - data option - evaluate function values", 1, function( assert ) {
 		return {
 			url: baseURL + "mock.php?action=echoQuery",
 			data: {
@@ -1921,7 +1935,7 @@ ajaxTest( "#2806 - jQuery.ajax() - data option - evaluate function values", 1, f
 		};
 	} );
 
-	QUnit.test( "#7531 - jQuery.ajax() - Location object as url", function( assert ) {
+	QUnit.test( "trac-7531 - jQuery.ajax() - Location object as url", function( assert ) {
 		assert.expect( 1 );
 
 		var xhr,
@@ -1939,7 +1953,7 @@ QUnit.test( "#7531 - jQuery.ajax() - Location object as url", function( assert )
 	} );
 
 	jQuery.each( [ " - Same Domain", " - Cross Domain" ], function( crossDomain, label ) {
-		ajaxTest( "#7578 - jQuery.ajax() - JSONP - default for cache option" + label, 1, function( assert ) {
+		ajaxTest( "trac-7578 - jQuery.ajax() - JSONP - default for cache option" + label, 1, function( assert ) {
 			return {
 				url: baseURL + "mock.php?action=jsonp",
 				dataType: "jsonp",
@@ -1953,7 +1967,7 @@ QUnit.test( "#7531 - jQuery.ajax() - Location object as url", function( assert )
 		} );
 	} );
 
-	ajaxTest( "#8107 - jQuery.ajax() - multiple method signatures introduced in 1.5", 4, function( assert ) {
+	ajaxTest( "trac-8107 - jQuery.ajax() - multiple method signatures introduced in 1.5", 4, function( assert ) {
 		return [
 			{
 				create: function() {
@@ -1992,7 +2006,7 @@ ajaxTest( "#8107 - jQuery.ajax() - multiple method signatures introduced in 1.5"
 	} );
 
 	jQuery.each( [ " - Same Domain", " - Cross Domain" ], function( crossDomain, label ) {
-		ajaxTest( "#8205 - jQuery.ajax() - JSONP - re-use callbacks name" + label, 4, function( assert ) {
+		ajaxTest( "trac-8205 - jQuery.ajax() - JSONP - re-use callbacks name" + label, 4, function( assert ) {
 			return {
 				url: baseURL + "mock.php?action=jsonp",
 				dataType: "jsonp",
@@ -2030,7 +2044,7 @@ ajaxTest( "#8107 - jQuery.ajax() - multiple method signatures introduced in 1.5"
 		} );
 	} );
 
-	QUnit.test( "#9887 - jQuery.ajax() - Context with circular references (#9887)", function( assert ) {
+	QUnit.test( "trac-9887 - jQuery.ajax() - Context with circular references (trac-9887)", function( assert ) {
 		assert.expect( 2 );
 
 		var success = false,
@@ -2064,7 +2078,7 @@ QUnit.test( "#9887 - jQuery.ajax() - Context with circular references (#9887)",
 			};
 		}
 
-		ajaxTest( "#10093 - jQuery.ajax() - falsy url " + title, 4, function( assert ) {
+		ajaxTest( "trac-10093 - jQuery.ajax() - falsy url " + title, 4, function( assert ) {
 			return [
 				request( assert, "", "empty string" ),
 				request( assert, false ),
@@ -2074,7 +2088,7 @@ QUnit.test( "#9887 - jQuery.ajax() - Context with circular references (#9887)",
 		} );
 	} );
 
-	ajaxTest( "#11151 - jQuery.ajax() - parse error body", 2, function( assert ) {
+	ajaxTest( "trac-11151 - jQuery.ajax() - parse error body", 2, function( assert ) {
 		return {
 			url: url( "mock.php?action=error&json=1" ),
 			dataFilter: function( string ) {
@@ -2088,7 +2102,7 @@ ajaxTest( "#11151 - jQuery.ajax() - parse error body", 2, function( assert ) {
 		};
 	} );
 
-	ajaxTest( "#11426 - jQuery.ajax() - loading binary data shouldn't throw an exception in IE", 1, function( assert ) {
+	ajaxTest( "trac-11426 - jQuery.ajax() - loading binary data shouldn't throw an exception in IE", 1, function( assert ) {
 		return {
 			url: url( "1x1.jpg" ),
 			success: function( data ) {
@@ -2121,7 +2135,7 @@ ajaxTest( "gh-2498 - jQuery.ajax() - binary data shouldn't throw an exception",
 	} );
 }
 
-	QUnit.test( "#11743 - jQuery.ajax() - script, throws exception", function( assert ) {
+	QUnit.test( "trac-11743 - jQuery.ajax() - script, throws exception", function( assert ) {
 		assert.expect( 1 );
 		var done = assert.async();
 		var onerror = window.onerror;
@@ -2156,7 +2170,7 @@ 				options.success = function( msg ) {
 		}
 
 		ajaxTest(
-			"#12004 - jQuery.ajax() - method is an alias of type - " +
+			"trac-12004 - jQuery.ajax() - method is an alias of type - " +
 			globalOption + " set globally", 3,
 			function( assert ) {
 				return {
@@ -2175,7 +2189,7 @@ 				options.success = function( msg ) {
 		);
 	} );
 
-	ajaxTest( "#13276 - jQuery.ajax() - compatibility between XML documents from ajax requests and parsed string", 1, function( assert ) {
+	ajaxTest( "trac-13276 - jQuery.ajax() - compatibility between XML documents from ajax requests and parsed string", 1, function( assert ) {
 		return {
 			url: baseURL + "dashboard.xml",
 			dataType: "xml",
@@ -2193,7 +2207,7 @@ ajaxTest( "#13276 - jQuery.ajax() - compatibility between XML documents from aja
 		};
 	} );
 
-	ajaxTest( "#13292 - jQuery.ajax() - converter is bypassed for 204 requests", 3, function( assert ) {
+	ajaxTest( "trac-13292 - jQuery.ajax() - converter is bypassed for 204 requests", 3, function( assert ) {
 		return {
 			url: baseURL + "mock.php?action=status&code=204&text=No+Content",
 			dataType: "testing",
@@ -2215,7 +2229,7 @@ ajaxTest( "#13292 - jQuery.ajax() - converter is bypassed for 204 requests", 3,
 		};
 	} );
 
-	ajaxTest( "#13388 - jQuery.ajax() - responseXML", 3, function( assert ) {
+	ajaxTest( "trac-13388 - jQuery.ajax() - responseXML", 3, function( assert ) {
 		return {
 			url: url( "with_fries.xml" ),
 			dataType: "xml",
@@ -2227,7 +2241,7 @@ ajaxTest( "#13388 - jQuery.ajax() - responseXML", 3, function( assert ) {
 		};
 	} );
 
-	ajaxTest( "#13922 - jQuery.ajax() - converter is bypassed for HEAD requests", 3, function( assert ) {
+	ajaxTest( "trac-13922 - jQuery.ajax() - converter is bypassed for HEAD requests", 3, function( assert ) {
 		return {
 			url: baseURL + "mock.php?action=json",
 			method: "HEAD",
@@ -2258,7 +2272,7 @@ ajaxTest( "#13922 - jQuery.ajax() - converter is bypassed for HEAD requests", 3,
 	// Safari 13 did similar changes. The below check will catch them both.
 	if ( !/safari/i.test( navigator.userAgent ) ) {
 		testIframe(
-			"#14379 - jQuery.ajax() on unload",
+			"trac-14379 - jQuery.ajax() on unload",
 			"ajax/onunload.html",
 			function( assert, jQuery, window, document, status ) {
 				assert.expect( 1 );
@@ -2267,7 +2281,7 @@ ajaxTest( "#13922 - jQuery.ajax() - converter is bypassed for HEAD requests", 3,
 		);
 	}
 
-	ajaxTest( "#14683 - jQuery.ajax() - Exceptions thrown synchronously by xhr.send should be caught", 4, function( assert ) {
+	ajaxTest( "trac-14683 - jQuery.ajax() - Exceptions thrown synchronously by xhr.send should be caught", 4, function( assert ) {
 		return [ {
 			url: baseURL + "mock.php?action=echoData",
 			method: "POST",
@@ -2490,7 +2504,7 @@ QUnit.test( "jQuery.ajaxSetup({ timeout: Number }) with localtimeout", function(
 
 //----------- jQuery.domManip()
 
-	QUnit.test( "#11264 - jQuery.domManip() - no side effect because of ajaxSetup or global events", function( assert ) {
+	QUnit.test( "trac-11264 - jQuery.domManip() - no side effect because of ajaxSetup or global events", function( assert ) {
 		assert.expect( 1 );
 
 		jQuery.ajaxSetup( {
@@ -2507,7 +2521,7 @@ QUnit.test( "#11264 - jQuery.domManip() - no side effect because of ajaxSetup or
 	} );
 
 	QUnit.test(
-		"jQuery#load() - always use GET method even if it overrided through ajaxSetup (#11264)",
+		"jQuery#load() - always use GET method even if it overrided through ajaxSetup (trac-11264)",
 		function( assert ) {
 			assert.expect( 1 );
 			var done = assert.async();
@@ -2544,7 +2558,7 @@ QUnit.test(
 	);
 
 	QUnit.test(
-		"#11402 - jQuery.domManip() - script in comments are properly evaluated",
+		"trac-11402 - jQuery.domManip() - script in comments are properly evaluated",
 		function( assert ) {
 			assert.expect( 2 );
 			jQuery( "#qunit-fixture" ).load( baseURL + "cleanScript.html", assert.async() );
@@ -2567,7 +2581,7 @@ QUnit.test( "jQuery.get( String, Hash, Function ) - parse xml and use text() on
 		} );
 	} );
 
-	QUnit.test( "#8277 - jQuery.get( String, Function ) - data in ajaxSettings", function( assert ) {
+	QUnit.test( "trac-8277 - jQuery.get( String, Function ) - data in ajaxSettings", function( assert ) {
 		assert.expect( 1 );
 		var done = assert.async();
 		jQuery.ajaxSetup( {
@@ -2658,7 +2672,7 @@ QUnit.test( "jQuery.getScript( String, Function ) - no callback", function( asse
 		jQuery.getScript( url( "mock.php?action=testbar" ) ).done( assert.async() );
 	} );
 
-	QUnit.test( "#8082 - jQuery.getScript( String, Function ) - source as responseText", function( assert ) {
+	QUnit.test( "trac-8082 - jQuery.getScript( String, Function ) - source as responseText", function( assert ) {
 		assert.expect( 2 );
 		var done = assert.async();
 
@@ -2745,7 +2759,7 @@ QUnit.test( "jQuery.fn.load( URL_SELECTOR )", function( assert ) {
 		} );
 	} );
 
-	// Selector should be trimmed to avoid leading spaces (#14773)
+	// Selector should be trimmed to avoid leading spaces (trac-14773)
 	QUnit.test( "jQuery.fn.load( URL_SELECTOR with spaces )", function( assert ) {
 		assert.expect( 1 );
 		var done = assert.async();
@@ -2755,9 +2769,9 @@ QUnit.test( "jQuery.fn.load( URL_SELECTOR with spaces )", function( assert ) {
 		} );
 	} );
 
-	// Selector should be trimmed to avoid leading spaces (#14773)
-	// Selector should include any valid non-HTML whitespace (#3003)
-	QUnit.test( "jQuery.fn.load( URL_SELECTOR with non-HTML whitespace(#3003) )", function( assert ) {
+	// Selector should be trimmed to avoid leading spaces (trac-14773)
+	// Selector should include any valid non-HTML whitespace (gh-3003)
+	QUnit.test( "jQuery.fn.load( URL_SELECTOR with non-HTML whitespace(gh-3003) )", function( assert ) {
 		assert.expect( 1 );
 		var done = assert.async();
 		jQuery( "#first" ).load( baseURL + "test3.html   #whitespace\\\\xA0 ", function() {
@@ -2888,7 +2902,7 @@ QUnit.test( "jQuery.fn.load() - callbacks get the correct parameters", function(
 		).always( done );
 	} );
 
-	QUnit.test( "#2046 - jQuery.fn.load( String, Function ) with ajaxSetup on dataType json", function( assert ) {
+	QUnit.test( "trac-2046 - jQuery.fn.load( String, Function ) with ajaxSetup on dataType json", function( assert ) {
 		assert.expect( 1 );
 		var done = assert.async();
 
@@ -2903,7 +2917,7 @@ QUnit.test( "#2046 - jQuery.fn.load( String, Function ) with ajaxSetup on dataTy
 		jQuery( "#first" ).load( baseURL + "test3.html" );
 	} );
 
-	QUnit.test( "#10524 - jQuery.fn.load() - data specified in ajaxSettings is merged in", function( assert ) {
+	QUnit.test( "trac-10524 - jQuery.fn.load() - data specified in ajaxSettings is merged in", function( assert ) {
 		assert.expect( 1 );
 		var done = assert.async();
 
diff --git a/a.js b/b.js
index a3e4f0c4..7514c9a7 100644
--- a/a.js
+++ b/b.js
@@ -22,8 +22,8 @@ module.exports = function( grunt ) {
 	var fs = require( "fs" ),
 		gzip = require( "gzip-js" ),
 		oldNode = /^v10\./.test( process.version ),
-		isTravis = process.env.TRAVIS,
-		travisBrowsers = process.env.BROWSERS && process.env.BROWSERS.split( "," );
+		isCi = process.env.GITHUB_ACTION,
+		ciBrowsers = process.env.BROWSERS && process.env.BROWSERS.split( "," );
 
 	if ( !grunt.option( "filename" ) ) {
 		grunt.option( "filename", "jquery.js" );
@@ -241,10 +241,10 @@ module.exports = function( grunt ) {
 				singleRun: true
 			},
 			main: {
-				browsers: isTravis && travisBrowsers || [ "ChromeHeadless", "FirefoxHeadless" ]
+				browsers: isCi && ciBrowsers || [ "ChromeHeadless", "FirefoxHeadless" ]
 			},
 			esmodules: {
-				browsers: isTravis && travisBrowsers || [ "ChromeHeadless" ],
+				browsers: isCi && ciBrowsers || [ "ChromeHeadless" ],
 				options: {
 					client: {
 						qunit: {
@@ -259,7 +259,7 @@ module.exports = function( grunt ) {
 				}
 			},
 			amd: {
-				browsers: isTravis && travisBrowsers || [ "ChromeHeadless" ],
+				browsers: isCi && ciBrowsers || [ "ChromeHeadless" ],
 				options: {
 					client: {
 						qunit: {
diff --git a/a.js b/b.js
index 2773a383..d6d49773 100644
--- a/a.js
+++ b/b.js
@@ -50,7 +50,7 @@ attr: function( elem, name, value ) {
 				return ret;
 			}
 
-			elem.setAttribute( name, value + "" );
+			elem.setAttribute( name, value );
 			return value;
 		}
 
diff --git a/a.js b/b.js
index 0bd44f95..ea6a5d2b 100644
--- a/a.js
+++ b/b.js
@@ -264,6 +264,14 @@ trustedHtml: function( req, resp ) {
 		var body = fs.readFileSync( __dirname + "/data/trusted-html.html" ).toString();
 		resp.end( body );
 	},
+	trustedTypesAttributes: function( req, resp ) {
+		resp.writeHead( 200, {
+			"Content-Type": "text/html",
+			"Content-Security-Policy": "require-trusted-types-for 'script'; report-uri /base/test/data/mock.php?action=cspLog"
+		} );
+		var body = fs.readFileSync( __dirname + "/data/trusted-types-attributes.html" ).toString();
+		resp.end( body );
+	},
 	errorWithScript: function( req, resp ) {
 		if ( req.query.withScriptContentType ) {
 			resp.writeHead( 404, { "Content-Type": "application/javascript" } );
diff --git a/a.js b/b.js
index d8337517..5f2418c7 100644
--- a/a.js
+++ b/b.js
@@ -82,9 +82,9 @@ QUnit.test( "attr(String)", function( assert ) {
 	assert.equal( jQuery( "#form" ).attr( "action", "newformaction" ).attr( "action" ), "newformaction", "Check that action attribute was changed" );
 	assert.equal( jQuery( "#testForm" ).attr( "target" ), undefined, "Retrieving target does not equal the input with name=target" );
 	assert.equal( jQuery( "#testForm" ).attr( "target", "newTarget" ).attr( "target" ), "newTarget", "Set target successfully on a form" );
-	assert.equal( jQuery( "#testForm" ).removeAttr( "id" ).attr( "id" ), undefined, "Retrieving id does not equal the input with name=id after id is removed [#7472]" );
+	assert.equal( jQuery( "#testForm" ).removeAttr( "id" ).attr( "id" ), undefined, "Retrieving id does not equal the input with name=id after id is removed [trac-7472]" );
 
-	// Bug #3685 (form contains input with name="name")
+	// Bug trac-3685 (form contains input with name="name")
 	assert.equal( jQuery( "#testForm" ).attr( "name" ), undefined, "Retrieving name does not retrieve input with name=name" );
 	extras.remove();
 
@@ -142,13 +142,13 @@ jQuery( "<a></a>" ).attr( {
 	assert.ok( !!~styleElem.attr( "style" ).indexOf( "UPPERlower.gif" ), "Check style attribute getter" );
 	assert.ok( !!~styleElem.attr( "style", "position:absolute;" ).attr( "style" ).indexOf( "absolute" ), "Check style setter" );
 
-	// Check value on button element (#1954)
+	// Check value on button element (trac-1954)
 	$button = jQuery( "<button>text</button>" ).insertAfter( "#button" );
 	assert.strictEqual( $button.attr( "value" ), undefined, "Absence of value attribute on a button" );
 	assert.equal( $button.attr( "value", "foobar" ).attr( "value" ), "foobar", "Value attribute on a button does not return innerHTML" );
 	assert.equal( $button.attr( "value", "baz" ).html(), "text", "Setting the value attribute does not change innerHTML" );
 
-	// Attributes with a colon on a table element (#1591)
+	// Attributes with a colon on a table element (trac-1591)
 	assert.equal( jQuery( "#table" ).attr( "test:attrib" ), undefined, "Retrieving a non-existent attribute on a table with a colon does not throw an error." );
 	assert.equal( jQuery( "#table" ).attr( "test:attrib", "foobar" ).attr( "test:attrib" ), "foobar", "Setting an attribute on a table with a colon does not throw an error." );
 
@@ -166,11 +166,11 @@ jQuery( "<a></a>" ).attr( {
 	assert.strictEqual( jQuery( "<select><option value='property'></option></select>" ).attr( "value" ), undefined, "An unset value on a select returns undefined." );
 
 	$form = jQuery( "#form" ).attr( "enctype", "multipart/form-data" );
-	assert.equal( $form.prop( "enctype" ), "multipart/form-data", "Set the enctype of a form (encoding in IE6/7 #6743)" );
+	assert.equal( $form.prop( "enctype" ), "multipart/form-data", "Set the enctype of a form (encoding in IE6/7 trac-6743)" );
 
 } );
 
-QUnit.test( "attr(String) on cloned elements, #9646", function( assert ) {
+QUnit.test( "attr(String) on cloned elements, trac-9646", function( assert ) {
 	assert.expect( 4 );
 
 	var div,
@@ -295,7 +295,7 @@ QUnit.test( "attr(String, Object)", function( assert ) {
 	assert.equal( $input.attr( "name" ), "something", "Check element creation gets/sets the name attribute." );
 	assert.equal( $input.attr( "id" ), "specified", "Check element creation gets/sets the id attribute." );
 
-	// As of fixing #11115, we only guarantee boolean property update for checked and selected
+	// As of fixing trac-11115, we only guarantee boolean property update for checked and selected
 	$input = jQuery( "<input type='checkbox'/>" ).attr( "checked", true );
 	assert.equal( $input.prop( "checked" ), true, "Setting checked updates property (verified by .prop)" );
 	assert.equal( $input[ 0 ].checked, true, "Setting checked updates property (verified by native property)" );
@@ -377,13 +377,13 @@ QUnit.test( "attr(String, Object)", function( assert ) {
 	jQuery.each( [ commentNode, textNode, attributeNode ], function( i, elem ) {
 		var $elem = jQuery( elem );
 		$elem.attr( "nonexisting", "foo" );
-		assert.strictEqual( $elem.attr( "nonexisting" ), undefined, "attr(name, value) works correctly on comment and text nodes (bug #7500)." );
+		assert.strictEqual( $elem.attr( "nonexisting" ), undefined, "attr(name, value) works correctly on comment and text nodes (bug trac-7500)." );
 	} );
 
 	jQuery.each( [ window, document, obj, "#firstp" ], function( i, elem ) {
 		var oldVal = elem.nonexisting,
 			$elem = jQuery( elem );
-		assert.strictEqual( $elem.attr( "nonexisting" ), undefined, "attr works correctly for non existing attributes (bug #7500)." );
+		assert.strictEqual( $elem.attr( "nonexisting" ), undefined, "attr works correctly for non existing attributes (bug trac-7500)." );
 		assert.equal( $elem.attr( "nonexisting", "foo" ).attr( "nonexisting" ), "foo", "attr falls back to prop on unsupported arguments" );
 		elem.nonexisting = oldVal;
 	} );
@@ -402,7 +402,7 @@ QUnit.test( "attr(String, Object)", function( assert ) {
 
 	assert.equal( jQuery( "#area1" ).attr( "value" ), undefined, "Value attribute is distinct from value property." );
 
-	// for #1070
+	// for trac-1070
 	jQuery( "#name" ).attr( "someAttr", "0" );
 	assert.equal( jQuery( "#name" ).attr( "someAttr" ), "0", "Set attribute to a string of '0'" );
 	jQuery( "#name" ).attr( "someAttr", 0 );
@@ -462,7 +462,7 @@ QUnit.test( "attr(String, Object)", function( assert ) {
 	} ).appendTo( "#testForm" );
 	assert.equal( $radio.val(), "sup", "Value is not reset when type is set after value on a radio" );
 
-	// Setting attributes on svg elements (bug #3116)
+	// Setting attributes on svg elements (bug trac-3116)
 	$svg = jQuery(
 		"<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' baseProfile='full' width='200' height='200'>" +
 
@@ -474,9 +474,9 @@ QUnit.test( "attr(String, Object)", function( assert ) {
 
 	// undefined values are chainable
 	jQuery( "#name" ).attr( "maxlength", "5" ).removeAttr( "nonexisting" );
-	assert.equal( typeof jQuery( "#name" ).attr( "maxlength", undefined ), "object", ".attr('attribute', undefined) is chainable (#5571)" );
-	assert.equal( jQuery( "#name" ).attr( "maxlength", undefined ).attr( "maxlength" ), "5", ".attr('attribute', undefined) does not change value (#5571)" );
-	assert.equal( jQuery( "#name" ).attr( "nonexisting", undefined ).attr( "nonexisting" ), undefined, ".attr('attribute', undefined) does not create attribute (#5571)" );
+	assert.equal( typeof jQuery( "#name" ).attr( "maxlength", undefined ), "object", ".attr('attribute', undefined) is chainable (trac-5571)" );
+	assert.equal( jQuery( "#name" ).attr( "maxlength", undefined ).attr( "maxlength" ), "5", ".attr('attribute', undefined) does not change value (trac-5571)" );
+	assert.equal( jQuery( "#name" ).attr( "nonexisting", undefined ).attr( "nonexisting" ), undefined, ".attr('attribute', undefined) does not create attribute (trac-5571)" );
 } );
 
 QUnit.test( "attr(non-ASCII)", function( assert ) {
@@ -573,7 +573,7 @@ QUnit.test( "removeAttr(String)", function( assert ) {
 	assert.equal( jQuery( "#form" ).removeAttr( "id" ).attr( "id" ), undefined, "Remove id" );
 	assert.equal( jQuery( "#foo" ).attr( "style", "position:absolute;" ).removeAttr( "style" ).attr( "style" ), undefined, "Check removing style attribute" );
 	assert.equal( jQuery( "#form" ).attr( "style", "position:absolute;" ).removeAttr( "style" ).attr( "style" ), undefined, "Check removing style attribute on a form" );
-	assert.equal( jQuery( "<div style='position: absolute'></div>" ).appendTo( "#foo" ).removeAttr( "style" ).prop( "style" ).cssText, "", "Check removing style attribute (#9699 Webkit)" );
+	assert.equal( jQuery( "<div style='position: absolute'></div>" ).appendTo( "#foo" ).removeAttr( "style" ).prop( "style" ).cssText, "", "Check removing style attribute (trac-9699 Webkit)" );
 	assert.equal( jQuery( "#fx-test-group" ).attr( "height", "3px" ).removeAttr( "height" ).get( 0 ).style.height, "1px", "Removing height attribute has no effect on height set with style attribute" );
 
 	jQuery( "#check1" ).removeAttr( "checked" ).prop( "checked", true ).removeAttr( "checked" );
@@ -582,13 +582,13 @@ QUnit.test( "removeAttr(String)", function( assert ) {
 	assert.equal( document.getElementById( "text1" ).readOnly, false, "removeAttr sets boolean properties to false" );
 
 	jQuery( "#option2c" ).removeAttr( "selected" );
-	assert.equal( jQuery( "#option2d" ).attr( "selected" ), "selected", "Removing `selected` from an option that is not selected does not remove selected from the currently selected option (#10870)" );
+	assert.equal( jQuery( "#option2d" ).attr( "selected" ), "selected", "Removing `selected` from an option that is not selected does not remove selected from the currently selected option (trac-10870)" );
 
 	try {
 		$first = jQuery( "#first" ).attr( "contenteditable", "true" ).removeAttr( "contenteditable" );
 		assert.equal( $first.attr( "contenteditable" ), undefined, "Remove the contenteditable attribute" );
 	} catch ( e ) {
-		assert.ok( false, "Removing contenteditable threw an error (#10429)" );
+		assert.ok( false, "Removing contenteditable threw an error (trac-10429)" );
 	}
 
 	$first = jQuery( "<div Case='mixed'></div>" );
@@ -714,26 +714,26 @@ QUnit.test( "prop(String, Object) on null/undefined", function( assert ) {
 	select.appendChild( optgroup );
 
 	assert.equal( jQuery( option ).prop( "selected" ), true, "Make sure that a single option is selected, even when in an optgroup." );
-	assert.equal( jQuery( document ).prop( "nodeName" ), "#document", "prop works correctly on document nodes (bug #7451)." );
+	assert.equal( jQuery( document ).prop( "nodeName" ), "#document", "prop works correctly on document nodes (bug trac-7451)." );
 
 	attributeNode = document.createAttribute( "irrelevant" );
 	commentNode = document.createComment( "some comment" );
 	textNode = document.createTextNode( "some text" );
 	obj = {};
 	jQuery.each( [ document, attributeNode, commentNode, textNode, obj, "#firstp" ], function( i, ele ) {
-		assert.strictEqual( jQuery( ele ).prop( "nonexisting" ), undefined, "prop works correctly for non existing attributes (bug #7500)." );
+		assert.strictEqual( jQuery( ele ).prop( "nonexisting" ), undefined, "prop works correctly for non existing attributes (bug trac-7500)." );
 	} );
 
 	obj = {};
 	jQuery.each( [ document, obj ], function( i, ele ) {
 		var $ele = jQuery( ele );
 		$ele.prop( "nonexisting", "foo" );
-		assert.equal( $ele.prop( "nonexisting" ), "foo", "prop(name, value) works correctly for non existing attributes (bug #7500)." );
+		assert.equal( $ele.prop( "nonexisting" ), "foo", "prop(name, value) works correctly for non existing attributes (bug trac-7500)." );
 	} );
 	jQuery( document ).removeProp( "nonexisting" );
 
 	$form = jQuery( "#form" ).prop( "enctype", "multipart/form-data" );
-	assert.equal( $form.prop( "enctype" ), "multipart/form-data", "Set the enctype of a form (encoding in IE6/7 #6743)" );
+	assert.equal( $form.prop( "enctype" ), "multipart/form-data", "Set the enctype of a form (encoding in IE6/7 trac-6743)" );
 } );
 
 QUnit.test( "prop('tabindex')", function( assert ) {
@@ -856,12 +856,12 @@ QUnit.test( "removeProp(String)", function( assert ) {
 	jQuery.each( [ document, obj ], function( i, ele ) {
 		var $ele = jQuery( ele );
 		$ele.prop( "nonexisting", "foo" ).removeProp( "nonexisting" );
-		assert.strictEqual( ele[ "nonexisting" ], undefined, "removeProp works correctly on non DOM element nodes (bug #7500)." );
+		assert.strictEqual( ele[ "nonexisting" ], undefined, "removeProp works correctly on non DOM element nodes (bug trac-7500)." );
 	} );
 	jQuery.each( [ commentNode, textNode, attributeNode ], function( i, ele ) {
 		var $ele = jQuery( ele );
 		$ele.prop( "nonexisting", "foo" ).removeProp( "nonexisting" );
-		assert.strictEqual( ele[ "nonexisting" ], undefined, "removeProp works correctly on non DOM element nodes (bug #7500)." );
+		assert.strictEqual( ele[ "nonexisting" ], undefined, "removeProp works correctly on non DOM element nodes (bug trac-7500)." );
 	} );
 } );
 
@@ -880,7 +880,7 @@ QUnit.test( "val()", function( assert ) {
 	var checks, $button;
 	assert.equal( jQuery( "#text1" ).val(), "Test", "Check for value of input element" );
 
-	// ticket #1714 this caused a JS error in IE
+	// ticket trac-1714 this caused a JS error in IE
 	assert.equal( jQuery( "#first" ).val(), "", "Check a paragraph element to see if it has a value" );
 	assert.ok( jQuery( [] ).val() === undefined, "Check an empty jQuery object will return undefined from val" );
 
@@ -918,7 +918,7 @@ QUnit.test( "val()", function( assert ) {
 	assert.strictEqual(
 		jQuery( "<select name='select12584' id='select12584'><option value='1' disabled='disabled'>1</option></select>" ).val(),
 		null,
-		"Select-one with only option disabled (#12584)"
+		"Select-one with only option disabled (trac-12584)"
 	);
 
 	if ( jQuery.fn.serialize ) {
@@ -966,7 +966,7 @@ QUnit.test( "val() with non-matching values on dropdown list", function( assert
 	select6.remove();
 } );
 
-QUnit.test( "val() respects numbers without exception (Bug #9319) - progress",
+QUnit.test( "val() respects numbers without exception (Bug trac-9319) - progress",
 	function( assert ) {
 
 	assert.expect( 2 );
@@ -983,7 +983,7 @@ function( assert ) {
 } );
 
 // IE doesn't support <meter>
-QUnit.testUnlessIE( "val() respects numbers without exception (Bug #9319) - meter",
+QUnit.testUnlessIE( "val() respects numbers without exception (Bug trac-9319) - meter",
 	function( assert ) {
 
 	assert.expect( 2 );
@@ -1045,7 +1045,7 @@ QUnit.test( "val(Function)", function( assert ) {
 	testVal( functionReturningObj, assert );
 } );
 
-QUnit.test( "val(Array of Numbers) (Bug #7123)", function( assert ) {
+QUnit.test( "val(Array of Numbers) (Bug trac-7123)", function( assert ) {
 	assert.expect( 4 );
 	jQuery( "#form" ).append( "<input type='checkbox' name='arrayTest' value='1' /><input type='checkbox' name='arrayTest' value='2' /><input type='checkbox' name='arrayTest' value='3' checked='checked' /><input type='checkbox' name='arrayTest' value='4' />" );
 	var elements = jQuery( "#form input[name=arrayTest]" ).val( [ 1, 2 ] );
@@ -1109,7 +1109,7 @@ jQuery( "#select1" ).val( function( i, val ) {
 } );
 
 // testing if a form.reset() breaks a subsequent call to a select element's .val() (in IE only)
-QUnit.test( "val(select) after form.reset() (Bug #2551)", function( assert ) {
+QUnit.test( "val(select) after form.reset() (Bug trac-2551)", function( assert ) {
 	assert.expect( 3 );
 
 	jQuery( "<form id='kk' name='kk'><select id='kkk'><option value='cf'>cf</option><option value='gf'>gf</option></select></form>" ).appendTo( "#qunit-fixture" );
@@ -1644,6 +1644,44 @@ QUnit.test( "addClass, removeClass, hasClass on elements with classes with non-H
 	testMatches();
 } );
 
+( function() {
+	var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;
+
+	function expectClasses( assert, elem, classes ) {
+		var actualClassesSorted = ( elem.attr( "class" ).match( rnothtmlwhite ) || [] )
+			.sort().join( " " );
+		var classesSorted = classes.slice()
+			.sort().join( " " );
+		assert.equal( actualClassesSorted, classesSorted, "Expected classes present" );
+	}
+
+	QUnit.test( "addClass on arrays with falsy elements (gh-4998)", function( assert ) {
+		assert.expect( 3 );
+
+		var elem = jQuery( "<div class='a'></div>" );
+
+		elem.addClass( [ "b", "", "c" ] );
+		expectClasses( assert, elem, [ "a", "b", "c" ] );
+		elem.addClass( [ "", "d" ] );
+		expectClasses( assert, elem, [ "a", "b", "c", "d" ] );
+		elem.addClass( [ "e", "" ] );
+		expectClasses( assert, elem, [ "a", "b", "c", "d", "e" ] );
+	} );
+
+	QUnit.test( "removeClass on arrays with falsy elements (gh-4998)", function( assert ) {
+		assert.expect( 3 );
+
+		var elem = jQuery( "<div class='a b c d e'></div>" );
+
+		elem.removeClass( [ "e", "" ] );
+		expectClasses( assert, elem, [ "a", "b", "c", "d" ] );
+		elem.removeClass( [ "", "d" ] );
+		expectClasses( assert, elem, [ "a", "b", "c" ] );
+		elem.removeClass( [ "b", "", "c" ] );
+		expectClasses( assert, elem, [ "a" ] );
+	} );
+} )();
+
 QUnit.test( "contents().hasClass() returns correct values", function( assert ) {
 	assert.expect( 2 );
 
@@ -1654,7 +1692,7 @@ QUnit.test( "contents().hasClass() returns correct values", function( assert ) {
 	assert.ok( !$contents.hasClass( "undefined" ), "Did not find 'undefined' in $contents (correctly)" );
 } );
 
-QUnit.test( "hasClass correctly interprets non-space separators (#13835)", function( assert ) {
+QUnit.test( "hasClass correctly interprets non-space separators (trac-13835)", function( assert ) {
 	assert.expect( 4 );
 
 	var
@@ -1674,7 +1712,7 @@ QUnit.test( "hasClass correctly interprets non-space separators (#13835)", funct
 	} );
 } );
 
-QUnit.test( "coords returns correct values in IE6/IE7, see #10828", function( assert ) {
+QUnit.test( "coords returns correct values in IE6/IE7, see trac-10828", function( assert ) {
 	assert.expect( 1 );
 
 	var area,
@@ -1684,7 +1722,7 @@ QUnit.test( "coords returns correct values in IE6/IE7, see #10828", function( as
 	assert.equal( area.attr( "coords" ), "0,0,0,0", "did not retrieve coords correctly" );
 } );
 
-QUnit.test( "should not throw at $(option).val() (#14686)", function( assert ) {
+QUnit.test( "should not throw at $(option).val() (trac-14686)", function( assert ) {
 	assert.expect( 1 );
 
 	try {
@@ -1700,7 +1738,7 @@ QUnit.test( "option value not trimmed when setting via parent select", function(
 	assert.equal( jQuery( "<select><option> 2</option></select>" ).val( "2" ).val(), "2" );
 } );
 
-QUnit.test( "Insignificant white space returned for $(option).val() (#14858, gh-2978)", function( assert ) {
+QUnit.test( "Insignificant white space returned for $(option).val() (trac-14858, gh-2978)", function( assert ) {
 	assert.expect( 16 );
 
 	var val = jQuery( "<option></option>" ).val();
@@ -1764,3 +1802,23 @@ QUnit.test( "non-lowercase boolean attribute getters should not crash", function
 		}
 	} );
 } );
+
+
+// Test trustedTypes support in browsers where they're supported (currently Chrome 83+).
+// Browsers with no TrustedScriptURL support still run tests on object wrappers with
+// a proper `toString` function.
+testIframe(
+	"Basic TrustedScriptURL support (gh-4948)",
+	"mock.php?action=trustedTypesAttributes",
+	function( assert, jQuery, window, document, test ) {
+		var done = assert.async();
+
+		assert.expect( 1 );
+
+		test.forEach( function( result ) {
+			assert.deepEqual( result.actual, result.expected, result.message );
+		} );
+
+		supportjQuery.get( baseURL + "mock.php?action=cspClean" ).then( done );
+	}
+);
diff --git a/a.js b/b.js
index b10ebb2d..7514c9a7 100644
--- a/a.js
+++ b/b.js
@@ -22,8 +22,8 @@ module.exports = function( grunt ) {
 	var fs = require( "fs" ),
 		gzip = require( "gzip-js" ),
 		oldNode = /^v10\./.test( process.version ),
-		isTravis = process.env.TRAVIS,
-		travisBrowsers = process.env.BROWSERS && process.env.BROWSERS.split( "," );
+		isCi = process.env.GITHUB_ACTION,
+		ciBrowsers = process.env.BROWSERS && process.env.BROWSERS.split( "," );
 
 	if ( !grunt.option( "filename" ) ) {
 		grunt.option( "filename", "jquery.js" );
@@ -232,15 +232,19 @@ module.exports = function( grunt ) {
 				],
 				reporters: [ "dots" ],
 				autoWatch: false,
+
+				// 2 minutes; has to be longer than QUnit.config.testTimeout
+				browserNoActivityTimeout: 120e3,
+
 				concurrency: 3,
 				captureTimeout: 20 * 1000,
 				singleRun: true
 			},
 			main: {
-				browsers: isTravis && travisBrowsers || [ "ChromeHeadless", "FirefoxHeadless" ]
+				browsers: isCi && ciBrowsers || [ "ChromeHeadless", "FirefoxHeadless" ]
 			},
 			esmodules: {
-				browsers: isTravis && travisBrowsers || [ "ChromeHeadless" ],
+				browsers: isCi && ciBrowsers || [ "ChromeHeadless" ],
 				options: {
 					client: {
 						qunit: {
@@ -255,7 +259,7 @@ module.exports = function( grunt ) {
 				}
 			},
 			amd: {
-				browsers: isTravis && travisBrowsers || [ "ChromeHeadless" ],
+				browsers: isCi && ciBrowsers || [ "ChromeHeadless" ],
 				options: {
 					client: {
 						qunit: {
diff --git a/a.js b/b.js
index fc35a843..7514c9a7 100644
--- a/a.js
+++ b/b.js
@@ -12,11 +12,18 @@ module.exports = function( grunt ) {
 		return data;
 	}
 
+	// Support: Node.js <12
+	// Skip running tasks that dropped support for Node.js 10
+	// in this Node version.
+	function runIfNewNode( task ) {
+		return oldNode ? "print_old_node_message:" + task : task;
+	}
+
 	var fs = require( "fs" ),
 		gzip = require( "gzip-js" ),
-		isTravis = process.env.TRAVIS,
-		travisBrowsers = process.env.BROWSERS && process.env.BROWSERS.split( "," ),
-		CLIEngine = require( "eslint" ).CLIEngine;
+		oldNode = /^v10\./.test( process.version ),
+		isCi = process.env.GITHUB_ACTION,
+		ciBrowsers = process.env.BROWSERS && process.env.BROWSERS.split( "," );
 
 	if ( !grunt.option( "filename" ) ) {
 		grunt.option( "filename", "jquery.js" );
@@ -117,9 +124,14 @@ module.exports = function( grunt ) {
 
 					// Ignore files from .eslintignore
 					// See https://github.com/sindresorhus/grunt-eslint/issues/119
-					...new CLIEngine()
-						.getConfigForFile( "Gruntfile.js" )
-						.ignorePatterns.map( ( p ) => `!${ p }` )
+					...fs
+						.readFileSync( `${ __dirname }/.eslintignore`, "utf-8" )
+						.split( "\n" )
+						.filter( filePath => filePath )
+						.map( filePath => filePath[ 0 ] === "!" ?
+							filePath.slice( 1 ) :
+							`!${ filePath }`
+						)
 				]
 			}
 		},
@@ -220,15 +232,19 @@ module.exports = function( grunt ) {
 				],
 				reporters: [ "dots" ],
 				autoWatch: false,
+
+				// 2 minutes; has to be longer than QUnit.config.testTimeout
+				browserNoActivityTimeout: 120e3,
+
 				concurrency: 3,
 				captureTimeout: 20 * 1000,
 				singleRun: true
 			},
 			main: {
-				browsers: isTravis && travisBrowsers || [ "ChromeHeadless", "FirefoxHeadless" ]
+				browsers: isCi && ciBrowsers || [ "ChromeHeadless", "FirefoxHeadless" ]
 			},
 			esmodules: {
-				browsers: isTravis && travisBrowsers || [ "ChromeHeadless" ],
+				browsers: isCi && ciBrowsers || [ "ChromeHeadless" ],
 				options: {
 					client: {
 						qunit: {
@@ -243,7 +259,7 @@ module.exports = function( grunt ) {
 				}
 			},
 			amd: {
-				browsers: isTravis && travisBrowsers || [ "ChromeHeadless" ],
+				browsers: isCi && ciBrowsers || [ "ChromeHeadless" ],
 				options: {
 					client: {
 						qunit: {
@@ -334,11 +350,18 @@ module.exports = function( grunt ) {
 	} );
 
 	// Load grunt tasks from NPM packages
-	require( "load-grunt-tasks" )( grunt );
+	require( "load-grunt-tasks" )( grunt, {
+		pattern: oldNode ? [ "grunt-*", "!grunt-eslint" ] : [ "grunt-*" ]
+	} );
 
 	// Integrate jQuery specific tasks
 	grunt.loadTasks( "build/tasks" );
 
+	grunt.registerTask( "print_old_node_message", ( ...args ) => {
+		var task = args.join( ":" );
+		grunt.log.writeln( "Old Node.js detected, running the task \"" + task + "\" skipped..." );
+	} );
+
 	grunt.registerTask( "lint", [
 		"jsonlint",
 
@@ -346,16 +369,16 @@ module.exports = function( grunt ) {
 		// would run the dist target first which would point to errors in the built
 		// file, making it harder to fix them. We want to check the built file only
 		// if we already know the source files pass the linter.
-		"eslint:dev",
-		"eslint:dist"
+		runIfNewNode( "eslint:dev" ),
+		runIfNewNode( "eslint:dist" )
 	] );
 
 	grunt.registerTask( "lint:newer", [
 		"newer:jsonlint",
 
 		// Don't replace it with just the task; see the above comment.
-		"newer:eslint:dev",
-		"newer:eslint:dist"
+		runIfNewNode( "newer:eslint:dev" ),
+		runIfNewNode( "newer:eslint:dist" )
 	] );
 
 	grunt.registerTask( "test:fast", "node_smoke_tests" );
@@ -378,7 +401,7 @@ module.exports = function( grunt ) {
 
 	grunt.registerTask( "dev", [
 		"build:*:*",
-		"newer:eslint:dev",
+		runIfNewNode( "newer:eslint:dev" ),
 		"newer:uglify",
 		"remove_map_comment",
 		"dist:*",
@@ -387,14 +410,14 @@ module.exports = function( grunt ) {
 	] );
 
 	grunt.registerTask( "default", [
-		"eslint:dev",
+		runIfNewNode( "eslint:dev" ),
 		"build:*:*",
 		"amd",
 		"uglify",
 		"remove_map_comment",
 		"dist:*",
 		"test:prepare",
-		"eslint:dist",
+		runIfNewNode( "eslint:dist" ),
 		"test:fast",
 		"compare_size"
 	] );
diff --git a/a.js b/b.js
index 31d749dd..4f5731ae 100644
--- a/a.js
+++ b/b.js
@@ -10,9 +10,8 @@
 import fnToString from "./var/fnToString.js";
 import ObjectFunctionString from "./var/ObjectFunctionString.js";
 import support from "./var/support.js";
-import isWindow from "./var/isWindow.js";
+import isArrayLike from "./core/isArrayLike.js";
 import DOMEval from "./core/DOMEval.js";
-import toType from "./core/toType.js";
 
 var version = "@VERSION",
 
@@ -398,17 +397,4 @@ function( _i, name ) {
 		class2type[ "[object " + name + "]" ] = name.toLowerCase();
 	} );
 
-function isArrayLike( obj ) {
-
-	var length = !!obj && obj.length,
-		type = toType( obj );
-
-	if ( typeof obj === "function" || isWindow( obj ) ) {
-		return false;
-	}
-
-	return type === "array" || length === 0 ||
-		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
-}
-
 export default jQuery;
diff --git a/a.js b/b.js
index a97fc106..9fea5e6d 100644
--- a/a.js
+++ b/b.js
@@ -2,6 +2,7 @@
 import jQuery from "../core.js";
 import document from "../var/document.js";
 import rsingleTag from "./var/rsingleTag.js";
+import isObviousHtml from "./isObviousHtml.js";
 
 import "../traversing/findFilter.js";
 
@@ -9,8 +10,8 @@
 var rootjQuery,
 
 	// A simple way to check for HTML strings
-	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
-	// Strict HTML recognition (#11290: must start with <)
+	// Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)
+	// Strict HTML recognition (trac-11290: must start with <)
 	// Shortcut simple #id case for speed
 	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
 
@@ -26,20 +27,41 @@ 	init = jQuery.fn.init = function( selector, context, root ) {
 		// so migrate can support jQuery.sub (gh-2101)
 		root = root || rootjQuery;
 
-		// Handle HTML strings
-		if ( typeof selector === "string" ) {
-			if ( selector[ 0 ] === "<" &&
-				selector[ selector.length - 1 ] === ">" &&
-				selector.length >= 3 ) {
+		// HANDLE: $(DOMElement)
+		if ( selector.nodeType ) {
+			this[ 0 ] = selector;
+			this.length = 1;
+			return this;
+
+		// HANDLE: $(function)
+		// Shortcut for document ready
+		} else if ( typeof selector === "function" ) {
+			return root.ready !== undefined ?
+				root.ready( selector ) :
+
+				// Execute immediately if ready is not present
+				selector( jQuery );
+
+		} else {
 
-				// Assume that strings that start and end with <> are HTML and skip the regex check
+			// Handle obvious HTML strings
+			match = selector + "";
+			if ( isObviousHtml( match ) ) {
+
+				// Assume that strings that start and end with <> are HTML and skip
+				// the regex check. This also handles browser-supported HTML wrappers
+				// like TrustedHTML.
 				match = [ null, selector, null ];
 
-			} else {
+			// Handle HTML strings or selectors
+			} else if ( typeof selector === "string" ) {
 				match = rquickExpr.exec( selector );
+			} else {
+				return jQuery.makeArray( selector, this );
 			}
 
 			// Match html or make sure no context is specified for #id
+			// Note: match[1] may be a string or a TrustedHTML wrapper
 			if ( match && ( match[ 1 ] || !context ) ) {
 
 				// HANDLE: $(html) -> $(array)
@@ -84,7 +106,7 @@ 	init = jQuery.fn.init = function( selector, context, root ) {
 					return this;
 				}
 
-			// HANDLE: $(expr, $(...))
+			// HANDLE: $(expr) & $(expr, $(...))
 			} else if ( !context || context.jquery ) {
 				return ( context || root ).find( selector );
 
@@ -93,24 +115,8 @@ 	init = jQuery.fn.init = function( selector, context, root ) {
 			} else {
 				return this.constructor( context ).find( selector );
 			}
-
-		// HANDLE: $(DOMElement)
-		} else if ( selector.nodeType ) {
-			this[ 0 ] = selector;
-			this.length = 1;
-			return this;
-
-		// HANDLE: $(function)
-		// Shortcut for document ready
-		} else if ( typeof selector === "function" ) {
-			return root.ready !== undefined ?
-				root.ready( selector ) :
-
-				// Execute immediately if ready is not present
-				selector( jQuery );
 		}
 
-		return jQuery.makeArray( selector, this );
 	};
 
 // Give the init function the jQuery prototype for later instantiation
diff --git a/a.js b/b.js
index 15278fa0..b522a5f7 100644
--- a/a.js
+++ b/b.js
@@ -2,13 +2,14 @@
 import document from "../var/document.js";
 import rsingleTag from "./var/rsingleTag.js";
 import buildFragment from "../manipulation/buildFragment.js";
+import isObviousHtml from "./isObviousHtml.js";
 
-// Argument "data" should be string of html
+// Argument "data" should be string of html or a TrustedHTML wrapper of obvious HTML
 // context (optional): If specified, the fragment will be created in this context,
 // defaults to document
 // keepScripts (optional): If true, will include scripts passed in the html string
 jQuery.parseHTML = function( data, context, keepScripts ) {
-	if ( typeof data !== "string" ) {
+	if ( typeof data !== "string" && !isObviousHtml( data + "" ) ) {
 		return [];
 	}
 	if ( typeof context === "boolean" ) {
diff --git a/a.js b/b.js
index 9ac71acc..dd0d673e 100644
--- a/a.js
+++ b/b.js
@@ -7,6 +7,7 @@
 import wrapMap from "./wrapMap.js";
 import getAll from "./getAll.js";
 import setGlobalEval from "./setGlobalEval.js";
+import isArrayLike from "../core/isArrayLike.js";
 
 var rhtml = /<|&#?\w+;/;
 
@@ -23,7 +24,7 @@ function buildFragment( elems, context, scripts, selection, ignored ) {
 		if ( elem || elem === 0 ) {
 
 			// Add nodes directly
-			if ( toType( elem ) === "object" ) {
+			if ( toType( elem ) === "object" && ( elem.nodeType || isArrayLike( elem ) ) ) {
 				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );
 
 			// Convert non-html into a text node
@@ -51,7 +52,7 @@ function buildFragment( elems, context, scripts, selection, ignored ) {
 				// Remember the top-level container
 				tmp = fragment.firstChild;
 
-				// Ensure the created nodes are orphaned (#12392)
+				// Ensure the created nodes are orphaned (trac-12392)
 				tmp.textContent = "";
 			}
 		}
diff --git a/a.js b/b.js
index 04b01d65..ea6a5d2b 100644
--- a/a.js
+++ b/b.js
@@ -222,7 +222,7 @@ testHTML: function( req, resp ) {
 	cspFrame: function( req, resp ) {
 		resp.writeHead( 200, {
 			"Content-Type": "text/html",
-			"Content-Security-Policy": "default-src 'self'; report-uri /base/test/data/mock.php?action=cspLog"
+			"Content-Security-Policy": "default-src 'self'; require-trusted-types-for 'script'; report-uri /base/test/data/mock.php?action=cspLog"
 		} );
 		var body = fs.readFileSync( __dirname + "/data/csp.include.html" ).toString();
 		resp.end( body );
@@ -256,6 +256,22 @@ cspClean: function( req, resp ) {
 		resp.writeHead( 200 );
 		resp.end();
 	},
+	trustedHtml: function( req, resp ) {
+		resp.writeHead( 200, {
+			"Content-Type": "text/html",
+			"Content-Security-Policy": "require-trusted-types-for 'script'; report-uri /base/test/data/mock.php?action=cspLog"
+		} );
+		var body = fs.readFileSync( __dirname + "/data/trusted-html.html" ).toString();
+		resp.end( body );
+	},
+	trustedTypesAttributes: function( req, resp ) {
+		resp.writeHead( 200, {
+			"Content-Type": "text/html",
+			"Content-Security-Policy": "require-trusted-types-for 'script'; report-uri /base/test/data/mock.php?action=cspLog"
+		} );
+		var body = fs.readFileSync( __dirname + "/data/trusted-types-attributes.html" ).toString();
+		resp.end( body );
+	},
 	errorWithScript: function( req, resp ) {
 		if ( req.query.withScriptContentType ) {
 			resp.writeHead( 404, { "Content-Type": "application/javascript" } );
diff --git a/a.js b/b.js
index 8262516a..52e17a9e 100644
--- a/a.js
+++ b/b.js
@@ -39,9 +39,9 @@ QUnit.test( "text()", function( assert ) {
 
 	// Check serialization of text values
 	assert.equal( jQuery( document.createTextNode( "foo" ) ).text(), "foo", "Text node was retrieved from .text()." );
-	assert.notEqual( jQuery( document ).text(), "", "Retrieving text for the document retrieves all text (#10724)." );
+	assert.notEqual( jQuery( document ).text(), "", "Retrieving text for the document retrieves all text (trac-10724)." );
 
-	// Retrieve from document fragments #10864
+	// Retrieve from document fragments trac-10864
 	frag = document.createDocumentFragment();
 	frag.appendChild( document.createTextNode( "foo" ) );
 
@@ -49,7 +49,7 @@ QUnit.test( "text()", function( assert ) {
 
 	$newLineTest = jQuery( "<div>test<br/>testy</div>" ).appendTo( "#moretests" );
 	$newLineTest.find( "br" ).replaceWith( "\n" );
-	assert.equal( $newLineTest.text(), "test\ntesty", "text() does not remove new lines (#11153)" );
+	assert.equal( $newLineTest.text(), "test\ntesty", "text() does not remove new lines (trac-11153)" );
 
 	$newLineTest.remove();
 } );
@@ -58,7 +58,7 @@ QUnit.test( "text(undefined)", function( assert ) {
 
 	assert.expect( 1 );
 
-	assert.equal( jQuery( "#foo" ).text( "<div" ).text( undefined )[ 0 ].innerHTML, "&lt;div", ".text(undefined) is chainable (#5571)" );
+	assert.equal( jQuery( "#foo" ).text( "<div" ).text( undefined )[ 0 ].innerHTML, "&lt;div", ".text(undefined) is chainable (trac-5571)" );
 } );
 
 function testText( valueObj, assert ) {
@@ -78,16 +78,16 @@ function testText( valueObj, assert ) {
 
 	assert.equal( j[ 2 ].nodeType, 8, "Check node,textnode,comment with text()" );
 
-	// Update multiple elements #11809
+	// Update multiple elements trac-11809
 	expected = "New";
 
 	$multipleElements = jQuery( "<div>Hello</div>" ).add( "<div>World</div>" );
 	$multipleElements.text( expected );
 
-	assert.equal( $multipleElements.eq( 0 ).text(), expected, "text() updates multiple elements (#11809)" );
-	assert.equal( $multipleElements.eq( 1 ).text(), expected, "text() updates multiple elements (#11809)" );
+	assert.equal( $multipleElements.eq( 0 ).text(), expected, "text() updates multiple elements (trac-11809)" );
+	assert.equal( $multipleElements.eq( 1 ).text(), expected, "text() updates multiple elements (trac-11809)" );
 
-	// Prevent memory leaks #11809
+	// Prevent memory leaks trac-11809
 	$childDiv = jQuery( "<div></div>" );
 	$childDiv.data( "leak", true );
 	$parentDiv = jQuery( "<div></div>" );
@@ -187,7 +187,7 @@ function testAppendForObject( valueObj, isFragment, assert ) {
 
 	assert.equal( $base.clone().append( valueObj( document.getElementById( "form" ).cloneNode( true ) ) ).children( "form" ).length,
 		1,
-		"Check for appending a form (#910)" + type
+		"Check for appending a form (trac-910)" + type
 	);
 }
 
@@ -272,7 +272,7 @@ jQuery( "#form" )
 		.append( valueObj( "<select id='appendSelect2'><option>Test</option></select>" ) );
 	assert.t( "Append Select", "#appendSelect1, #appendSelect2", [ "appendSelect1", "appendSelect2" ] );
 
-	assert.equal( "Two nodes", jQuery( "<div></div>" ).append( "Two", " nodes" ).text(), "Appending two text nodes (#4011)" );
+	assert.equal( "Two nodes", jQuery( "<div></div>" ).append( "Two", " nodes" ).text(), "Appending two text nodes (trac-4011)" );
 	assert.equal( jQuery( "<div></div>" ).append( "1", "", 3 ).text(), "13", "If median is false-like value, subsequent arguments should not be ignored" );
 
 	// using contents will get comments regular, text, and comment nodes
@@ -310,7 +310,7 @@ QUnit.test( "append(Function)", function( assert ) {
 	testAppend( manipulationFunctionReturningObj, assert );
 } );
 
-QUnit.test( "append(param) to object, see #11280", function( assert ) {
+QUnit.test( "append(param) to object, see trac-11280", function( assert ) {
 
 	assert.expect( 5 );
 
@@ -402,7 +402,7 @@ jQuery( "#sap" ).append( function( i, val ) {
 	assert.ok( jQuery( "#sap" )[ 0 ].innerHTML.match( /5$/ ), "Check for appending a number" );
 } );
 
-QUnit.test( "XML DOM manipulation (#9960)", function( assert ) {
+QUnit.test( "XML DOM manipulation (trac-9960)", function( assert ) {
 
 	assert.expect( 5 );
 
@@ -430,7 +430,7 @@ QUnit.test( "XML DOM manipulation (#9960)", function( assert ) {
 	assert.deepEqual( jQuery( "state", xml2 ).get(), scxml1.find( "state" ).get(), "replaceWith" );
 } );
 
-QUnit.test( "append HTML5 sectioning elements (Bug #6485)", function( assert ) {
+QUnit.test( "append HTML5 sectioning elements (Bug trac-6485)", function( assert ) {
 
 	assert.expect( 2 );
 
@@ -445,7 +445,7 @@ QUnit.test( "append HTML5 sectioning elements (Bug #6485)", function( assert ) {
 	assert.equal( aside.length, 1, "HTML5 elements do not collapse their children" );
 } );
 
-QUnit[ jQuery.fn.css ? "test" : "skip" ]( "HTML5 Elements inherit styles from style rules (Bug #10501)", function( assert ) {
+QUnit[ jQuery.fn.css ? "test" : "skip" ]( "HTML5 Elements inherit styles from style rules (Bug trac-10501)", function( assert ) {
 
 	assert.expect( 1 );
 
@@ -456,7 +456,7 @@ QUnit.test( "append HTML5 sectioning elements (Bug #6485)", function( assert ) {
 	assert.notEqual( jQuery( "section" ).css( "background-color" ), "transparent", "HTML5 elements inherit styles" );
 } );
 
-QUnit.test( "html(String) with HTML5 (Bug #6485)", function( assert ) {
+QUnit.test( "html(String) with HTML5 (Bug trac-6485)", function( assert ) {
 
 	assert.expect( 2 );
 
@@ -465,7 +465,7 @@ QUnit.test( "html(String) with HTML5 (Bug #6485)", function( assert ) {
 	assert.equal( jQuery( "#qunit-fixture" ).children().children().children().length, 1, "Make sure nested HTML5 elements can hold children." );
 } );
 
-QUnit.test( "html(String) tag-hyphenated elements (Bug #1987)", function( assert ) {
+QUnit.test( "html(String) tag-hyphenated elements (Bug gh-1987)", function( assert ) {
 
 	assert.expect( 27 );
 
@@ -561,7 +561,7 @@ QUnit.test( "IE8 serialization bug", function( assert ) {
 	assert.equal( wrapper.children( "link" ).length, 1, "Link elements are insertable with .html()" );
 } );
 
-QUnit.test( "html() object element #10324", function( assert ) {
+QUnit.test( "html() object element trac-10324", function( assert ) {
 
 	assert.expect( 1 );
 
@@ -959,7 +959,7 @@ QUnit.test( "before(no-op)", function( assert ) {
 	assert.equal( set.length, 1, "Insert the element before the disconnected node. should be a no-op" );
 } );
 
-QUnit.test( "before and after w/ empty object (#10812)", function( assert ) {
+QUnit.test( "before and after w/ empty object (trac-10812)", function( assert ) {
 
 	assert.expect( 1 );
 
@@ -1195,7 +1195,7 @@ function testReplaceWith( val, assert ) {
 	assert.ok( !jQuery( "#baz" )[ 0 ], "Verify that original element is gone, after element" );
 
 	jQuery( "#bar" ).replaceWith( "<div id='yahoo'></div>", "...", "<div id='baz'></div>" );
-	assert.deepEqual( jQuery( "#yahoo, #baz" ).get(), q( "yahoo", "baz" ),  "Replace element with multiple arguments (#13722)" );
+	assert.deepEqual( jQuery( "#yahoo, #baz" ).get(), q( "yahoo", "baz" ),  "Replace element with multiple arguments (trac-13722)" );
 	assert.strictEqual( jQuery( "#yahoo" )[ 0 ].nextSibling, jQuery( "#baz" )[ 0 ].previousSibling, "Argument order preserved" );
 	assert.deepEqual( jQuery( "#bar" ).get(), [], "Verify that original element is gone, after multiple arguments" );
 
@@ -1208,7 +1208,7 @@ function testReplaceWith( val, assert ) {
 	assert.ok( !jQuery( "#groups" )[ 0 ], "Verify that original element is gone, after jQuery collection" );
 
 	jQuery( "#mark, #first" ).replaceWith( val( "<span class='replacement'></span><span class='replacement'></span>" ) );
-	assert.equal( jQuery( "#qunit-fixture .replacement" ).length, 4, "Replace multiple elements (#12449)" );
+	assert.equal( jQuery( "#qunit-fixture .replacement" ).length, 4, "Replace multiple elements (trac-12449)" );
 	assert.deepEqual( jQuery( "#mark, #first" ).get(), [], "Verify that original elements are gone, after replace multiple" );
 
 	tmp = jQuery( "<b>content</b>" )[ 0 ];
@@ -1256,7 +1256,7 @@ function testReplaceWith( val, assert ) {
 		"Self-replacement" );
 	$div.replaceWith( child );
 	assert.deepEqual( jQuery( "#qunit-fixture" ).children().first().get(), child.get(),
-		"Replacement with following sibling (#13810)" );
+		"Replacement with following sibling (trac-13810)" );
 	assert.deepEqual( jQuery( ".pathological", "#qunit-fixture" ).get(), [],
 		"Replacement with following sibling (context removed)" );
 
@@ -1376,7 +1376,7 @@ QUnit.test( "replaceAll(jQuery)", function( assert ) {
 	assert.ok( !jQuery( "#yahoo" )[ 0 ], "Verify that original element is gone, after set of elements" );
 } );
 
-QUnit.test( "jQuery.clone() (#8017)", function( assert ) {
+QUnit.test( "jQuery.clone() (trac-8017)", function( assert ) {
 
 	assert.expect( 2 );
 
@@ -1388,7 +1388,7 @@ QUnit.test( "jQuery.clone() (#8017)", function( assert ) {
 	assert.equal( main.childNodes.length, clone.childNodes.length, "Simple child length to ensure a large dom tree copies correctly" );
 } );
 
-QUnit.test( "append to multiple elements (#8070)", function( assert ) {
+QUnit.test( "append to multiple elements (trac-8070)", function( assert ) {
 
 	assert.expect( 2 );
 
@@ -1543,7 +1543,7 @@ QUnit.test( "clone()", function( assert ) {
 	body.remove();
 } );
 
-QUnit.test( "clone(script type=non-javascript) (#11359)", function( assert ) {
+QUnit.test( "clone(script type=non-javascript) (trac-11359)", function( assert ) {
 
 	assert.expect( 3 );
 
@@ -1556,7 +1556,7 @@ QUnit.test( "clone(script type=non-javascript) (#11359)", function( assert ) {
 	dest.remove();
 } );
 
-QUnit.test( "clone(form element) (Bug #3879, #6655)", function( assert ) {
+QUnit.test( "clone(form element) (Bug trac-3879, trac-6655)", function( assert ) {
 
 	assert.expect( 5 );
 
@@ -1581,7 +1581,7 @@ QUnit.test( "clone(form element) (Bug #3879, #6655)", function( assert ) {
 	assert.equal( clone[ 0 ].defaultValue, "foo", "Textarea defaultValue cloned correctly" );
 } );
 
-QUnit.test( "clone(multiple selected options) (Bug #8129)", function( assert ) {
+QUnit.test( "clone(multiple selected options) (Bug trac-8129)", function( assert ) {
 
 	assert.expect( 1 );
 
@@ -1630,14 +1630,14 @@ QUnit.test( "html(undefined)", function( assert ) {
 
 	assert.expect( 1 );
 
-	assert.equal( jQuery( "#foo" ).html( "<i>test</i>" ).html( undefined ).html().toLowerCase(), "<i>test</i>", ".html(undefined) is chainable (#5571)" );
+	assert.equal( jQuery( "#foo" ).html( "<i>test</i>" ).html( undefined ).html().toLowerCase(), "<i>test</i>", ".html(undefined) is chainable (trac-5571)" );
 } );
 
 QUnit.test( "html() on empty set", function( assert ) {
 
 	assert.expect( 1 );
 
-	assert.strictEqual( jQuery().html(), undefined, ".html() returns undefined for empty sets (#11962)" );
+	assert.strictEqual( jQuery().html(), undefined, ".html() returns undefined for empty sets (trac-11962)" );
 } );
 
 function childNodeNames( node ) {
@@ -1738,7 +1738,7 @@ jQuery( "#nonnodes" ).contents().html( valueObj( "<b>bold</b>" ) ).each( functio
 	fixture.html( valueObj( "<script type='text/javascript'>QUnit.assert.ok( true, 'Injection of identical script' );</script>" ) );
 	fixture.html( valueObj( "<script type='text/javascript'>QUnit.assert.ok( true, 'Injection of identical script' );</script>" ) );
 	fixture.html( valueObj( "<script type='text/javascript'>QUnit.assert.ok( true, 'Injection of identical script' );</script>" ) );
-	fixture.html( valueObj( "foo <form><script type='text/javascript'>QUnit.assert.ok( true, 'Injection of identical script (#975)' );</script></form>" ) );
+	fixture.html( valueObj( "foo <form><script type='text/javascript'>QUnit.assert.ok( true, 'Injection of identical script (trac-975)' );</script></form>" ) );
 
 	jQuery.scriptorder = 0;
 	fixture.html( valueObj( [
@@ -1888,7 +1888,7 @@ QUnit.test( "html(Function) with incoming value -- jQuery.contents()", function(
 	} ).html().replace( />/g, "&gt;" ), " " + insert, "Verify escaped insertion." );
 } );
 
-QUnit.test( "clone()/html() don't expose jQuery/Sizzle expandos (#12858)", function( assert ) {
+QUnit.test( "clone()/html() don't expose jQuery/Sizzle expandos (trac-12858)", function( assert ) {
 
 	assert.expect( 2 );
 
@@ -1975,7 +1975,7 @@ QUnit.test( "remove() event cleaning ", function( assert ) {
 	cleanUp.remove();
 } );
 
-QUnit.test( "remove() in document order #13779", function( assert ) {
+QUnit.test( "remove() in document order trac-13779", function( assert ) {
 	assert.expect( 1 );
 
 	var last,
@@ -2336,7 +2336,7 @@ 	window.corsCallback = function( response ) {
 	}, 2000 );
 } );
 
-QUnit.test( "jQuery.clone - no exceptions for object elements #9587", function( assert ) {
+QUnit.test( "jQuery.clone - no exceptions for object elements trac-9587", function( assert ) {
 
 	assert.expect( 1 );
 
@@ -2348,7 +2348,7 @@ QUnit.test( "jQuery.clone - no exceptions for object elements #9587", function(
 	}
 } );
 
-QUnit.test( "Cloned, detached HTML5 elems (#10667,10670)", function( assert ) {
+QUnit.test( "Cloned, detached HTML5 elems (trac-10667, trac-10670)", function( assert ) {
 
 	assert.expect( 7 );
 
@@ -2428,7 +2428,7 @@ QUnit.test( "Guard against exceptions when clearing safeChildNodes", function( a
 	assert.ok( div && div.jquery, "Created nodes safely, guarded against exceptions on safeChildNodes[ -1 ]" );
 } );
 
-QUnit.test( "Ensure oldIE creates a new set on appendTo (#8894)", function( assert ) {
+QUnit.test( "Ensure oldIE creates a new set on appendTo (trac-8894)", function( assert ) {
 
 	assert.expect( 5 );
 
@@ -2439,7 +2439,7 @@ QUnit.test( "Ensure oldIE creates a new set on appendTo (#8894)", function( asse
 	assert.strictEqual( jQuery( "<p></p>" ).appendTo( "<div></div>" ).end().length, jQuery( "<p>test</p>" ).appendTo( "<div></div>" ).end().length, "Elements created with createElement and with createDocumentFragment should be treated alike" );
 } );
 
-QUnit.test( "html() - script exceptions bubble (#11743)", function( assert ) {
+QUnit.test( "html() - script exceptions bubble (trac-11743)", function( assert ) {
 	assert.expect( 2 );
 	var done = assert.async(),
 		onerror = window.onerror;
@@ -2481,7 +2481,7 @@ QUnit.test( "checked state is cloned with clone()", function( assert ) {
 	assert.equal( jQuery( elem ).clone().attr( "id", "clone" )[ 0 ].checked, true, "Checked true state correctly cloned" );
 } );
 
-QUnit.test( "manipulate mixed jQuery and text (#12384, #12346)", function( assert ) {
+QUnit.test( "manipulate mixed jQuery and text (trac-12384, trac-12346)", function( assert ) {
 
 	assert.expect( 2 );
 
@@ -2497,7 +2497,7 @@ QUnit.test( "manipulate mixed jQuery and text (#12384, #12346)", function( asser
 	assert.equal( div.find( "*" ).length, 3, "added 2 paragraphs after inner div" );
 } );
 
-QUnit.test( "script evaluation (#11795)", function( assert ) {
+QUnit.test( "script evaluation (trac-11795)", function( assert ) {
 
 	assert.expect( 13 );
 
@@ -2551,7 +2551,7 @@ 		notOk = function() {
 	}
 } );
 
-QUnit[ jQuery.ajax ? "test" : "skip" ]( "jQuery._evalUrl (#12838)", function( assert ) {
+QUnit[ jQuery.ajax ? "test" : "skip" ]( "jQuery._evalUrl (trac-12838)", function( assert ) {
 
 	assert.expect( 5 );
 
@@ -2620,7 +2620,7 @@ setTimeout( function() {
 	}, 100 );
 } );
 
-QUnit.test( "insertAfter, insertBefore, etc do not work when destination is original element. Element is removed (#4087)", function( assert ) {
+QUnit.test( "insertAfter, insertBefore, etc do not work when destination is original element. Element is removed (trac-4087)", function( assert ) {
 
 	assert.expect( 10 );
 
@@ -2654,7 +2654,7 @@ QUnit.test( "insertAfter, insertBefore, etc do not work when destination is orig
 	} );
 } );
 
-QUnit.test( "Index for function argument should be received (#13094)", function( assert ) {
+QUnit.test( "Index for function argument should be received (trac-13094)", function( assert ) {
 	assert.expect( 2 );
 
 	var i = 0;
@@ -2676,7 +2676,7 @@ QUnit.test( "Make sure jQuery.fn.remove can work on elements in documentFragment
 	assert.equal( fragment.childNodes.length, 0, "div element was removed from documentFragment" );
 } );
 
-QUnit.test( "Make sure specific elements with content created correctly (#13232)", function( assert ) {
+QUnit.test( "Make sure specific elements with content created correctly (trac-13232)", function( assert ) {
 	assert.expect( 20 );
 
 	var results = [],
@@ -2711,7 +2711,7 @@ QUnit.test( "Make sure specific elements with content created correctly (#13232)
 	} );
 } );
 
-QUnit.test( "Validate creation of multiple quantities of certain elements (#13818)", function( assert ) {
+QUnit.test( "Validate creation of multiple quantities of certain elements (trac-13818)", function( assert ) {
 	assert.expect( 22 );
 
 	var tags = [ "thead", "tbody", "tfoot", "colgroup", "col", "caption", "tr", "th", "td", "optgroup", "option" ];
@@ -3008,3 +3008,19 @@ QUnit.test( "Works with invalid attempts to close the table wrapper", function(
 	assert.strictEqual( elem[ 0 ].nodeName.toLowerCase(), "td", "First element is td" );
 	assert.strictEqual( elem[ 1 ].nodeName.toLowerCase(), "td", "Second element is td" );
 } );
+
+// Test trustedTypes support in browsers where they're supported (currently Chrome 83+).
+// Browsers with no TrustedHTML support still run tests on object wrappers with
+// a proper `toString` function.
+testIframe(
+	"Basic TrustedHTML support (gh-4409)",
+	"mock.php?action=trustedHtml",
+	function( assert, jQuery, window, document, test ) {
+
+		assert.expect( 5 );
+
+		test.forEach( function( result ) {
+			assert.deepEqual( result.actual, result.expected, result.message );
+		} );
+	}
+);
diff --git a/a.js b/b.js
index c9b9c45a..37f5b556 100644
--- a/a.js
+++ b/b.js
@@ -386,7 +386,7 @@ require( [ parentUrl + "test/data/testrunner.js" ], function() {
 
 				// Load the TestSwarm listener if swarmURL is in the address.
 				if ( QUnit.isSwarm ) {
-					require( [ "http://swarm.jquery.org/js/inject.js?" + ( new Date() ).getTime() ],
+					require( [ "https://swarm.jquery.org/js/inject.js?" + ( new Date() ).getTime() ],
 					function() {
 						QUnit.start();
 					} );
diff --git a/a.js b/b.js
index c82a08c5..29dca0e4 100644
--- a/a.js
+++ b/b.js
@@ -4,6 +4,7 @@
 import rcssNum from "./var/rcssNum.js";
 import isIE from "./var/isIE.js";
 import rnumnonpx from "./css/var/rnumnonpx.js";
+import rcustomProp from "./css/var/rcustomProp.js";
 import cssExpand from "./css/var/cssExpand.js";
 import isAutoPx from "./css/isAutoPx.js";
 import cssCamelCase from "./css/cssCamelCase.js";
@@ -24,7 +25,6 @@
 	// except "table", "table-cell", or "table-caption"
 	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
 	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
-	rcustomProp = /^--/,
 	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
 	cssNormalTransform = {
 		letterSpacing: "0",
@@ -220,15 +220,15 @@ style: function( elem, name, value, extra ) {
 		if ( value !== undefined ) {
 			type = typeof value;
 
-			// Convert "+=" or "-=" to relative numbers (#7345)
+			// Convert "+=" or "-=" to relative numbers (trac-7345)
 			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
 				value = adjustCSS( elem, name, ret );
 
-				// Fixes bug #9237
+				// Fixes bug trac-9237
 				type = "number";
 			}
 
-			// Make sure that null and NaN values aren't set (#7116)
+			// Make sure that null and NaN values aren't set (trac-7116)
 			if ( value == null || value !== value ) {
 				return;
 			}
@@ -239,7 +239,7 @@ style: function( elem, name, value, extra ) {
 			}
 
 			// Support: IE <=9 - 11+
-			// background-* props of a cloned element affect the source element (#8908)
+			// background-* props of a cloned element affect the source element (trac-8908)
 			if ( isIE && value === "" && name.indexOf( "background" ) === 0 ) {
 				style[ name ] = "inherit";
 			}
diff --git a/a.js b/b.js
index 59a639f6..15d624bb 100644
--- a/a.js
+++ b/b.js
@@ -1,9 +1,12 @@
 import jQuery from "../core.js";
 import isAttached from "../core/isAttached.js";
 import getStyles from "./var/getStyles.js";
+import rcustomProp from "./var/rcustomProp.js";
+import rtrim from "../var/rtrim.js";
 
 function curCSS( elem, name, computed ) {
-	var ret;
+	var ret,
+		isCustomProp = rcustomProp.test( name );
 
 	computed = computed || getStyles( elem );
 
@@ -11,6 +14,17 @@ function curCSS( elem, name, computed ) {
 	if ( computed ) {
 		ret = computed.getPropertyValue( name ) || computed[ name ];
 
+		// trim whitespace for custom property (issue gh-4926)
+		if ( isCustomProp ) {
+
+			// rtrim treats U+000D CARRIAGE RETURN and U+000C FORM FEED
+			// as whitespace while CSS does not, but this is not a problem
+			// because CSS preprocessing replaces them with U+000A LINE FEED
+			// (which *is* CSS whitespace)
+			// https://www.w3.org/TR/css-syntax-3/#input-preprocessing
+			ret = ret.replace( rtrim, "$1" );
+		}
+
 		if ( ret === "" && !isAttached( elem ) ) {
 			ret = jQuery.style( elem, name );
 		}
diff --git a/a.js b/b.js
index f7e8d9b6..bc60e61e 100644
--- a/a.js
+++ b/b.js
@@ -5,8 +5,9 @@
 import indexOf from "./var/indexOf.js";
 import pop from "./var/pop.js";
 import push from "./var/push.js";
-import whitespace from "./selector/var/whitespace.js";
+import whitespace from "./var/whitespace.js";
 import rbuggyQSA from "./selector/rbuggyQSA.js";
+import rtrim from "./var/rtrim.js";
 import isIE from "./var/isIE.js";
 
 // The following utils are attached directly to the jQuery object.
@@ -71,7 +72,6 @@
 
 	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
 	rwhitespace = new RegExp( whitespace + "+", "g" ),
-	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),
 
 	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
 	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" +
@@ -282,7 +282,8 @@ function createCache() {
 
 	function cache( key, value ) {
 
-		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
+		// Use (key + " ") to avoid collision with native prototype properties
+		// (see https://github.com/jquery/sizzle/issues/157)
 		if ( keys.push( key + " " ) > Expr.cacheLength ) {
 
 			// Only keep the most recent entries
@@ -432,7 +433,7 @@ function setDocument( node ) {
 	documentIsHTML = !jQuery.isXMLDoc( document );
 
 	// Support: IE 9 - 11+
-	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
+	// Accessing iframe documents after unload throws "permission denied" errors (see trac-13936)
 	// Support: IE 11+
 	// IE sometimes throws a "Permission denied" error when strict-comparing
 	// two documents; shallow comparisons work.
@@ -843,7 +844,8 @@ find.matchesSelector = function( elem, expr ) {
 					input[ 0 ] = elem;
 					matcher( input, null, xml, results );
 
-					// Don't keep the element (issue #299)
+					// Don't keep the element
+					// (see https://github.com/jquery/sizzle/issues/299)
 					input[ 0 ] = null;
 					return !results.pop();
 				};
@@ -1348,7 +1350,8 @@ function matcherFromTokens( tokens ) {
 					matchContext( elem, context, xml ) :
 					matchAnyContext( elem, context, xml ) );
 
-			// Avoid hanging onto element (issue #299)
+			// Avoid hanging onto element
+			// (see https://github.com/jquery/sizzle/issues/299)
 			checkContext = null;
 			return ret;
 		} ];
diff --git a/a.js b/b.js
index 7a621073..bae05398 100644
--- a/a.js
+++ b/b.js
@@ -1,5 +1,5 @@
 import isIE from "../var/isIE.js";
-import whitespace from "./var/whitespace.js";
+import whitespace from "../var/whitespace.js";
 
 var rbuggyQSA = isIE && new RegExp(
 
diff --git a/a.js b/b.js
index 8ade482f..1c207e9f 100644
--- a/a.js
+++ b/b.js
@@ -33,7 +33,7 @@ QUnit.test( "css(String|Hash)", function( assert ) {
 
 	div2.remove();
 
-	// handle negative numbers by setting to zero #11604
+	// handle negative numbers by setting to zero trac-11604
 	jQuery( "#nothiddendiv" ).css( { "width": 1, "height": 1 } );
 
 	width = parseFloat( jQuery( "#nothiddendiv" ).css( "width" ) );
@@ -113,7 +113,7 @@ QUnit.test( "css(String|Hash)", function( assert ) {
 
 	div = jQuery( "<div></div>" ).css( { position: "absolute", "z-index": 1000 } ).appendTo( "#qunit-fixture" );
 	assert.strictEqual( div.css( "z-index" ), "1000",
-		"Make sure that a string z-index is returned from css('z-index') (#14432)." );
+		"Make sure that a string z-index is returned from css('z-index') (trac-14432)." );
 } );
 
 QUnit.test( "css() explicit and relative values", function( assert ) {
@@ -325,11 +325,11 @@ QUnit.test( "css(String, Object)", function( assert ) {
 	catch ( e ) {
 		success = false;
 	}
-	assert.ok( success, "Setting RGBA values does not throw Error (#5509)" );
+	assert.ok( success, "Setting RGBA values does not throw Error (trac-5509)" );
 
 	jQuery( "#foo" ).css( "font", "7px/21px sans-serif" );
 	assert.strictEqual( jQuery( "#foo" ).css( "line-height" ), "21px",
-		"Set font shorthand property (#14759)" );
+		"Set font shorthand property (trac-14759)" );
 } );
 
 QUnit.test( "css(String, Object) with negative values", function( assert ) {
@@ -699,7 +699,7 @@ QUnit.test( "show/hide detached nodes", function( assert ) {
 	} );
 } );
 
-QUnit.test( "hide hidden elements (bug #7141)", function( assert ) {
+QUnit.test( "hide hidden elements (bug trac-7141)", function( assert ) {
 	assert.expect( 3 );
 
 	var div = jQuery( "<div style='display:none'></div>" ).appendTo( "#qunit-fixture" );
@@ -712,7 +712,7 @@ QUnit.test( "hide hidden elements (bug #7141)", function( assert ) {
 	div.remove();
 } );
 
-QUnit.test( "show() after hide() should always set display to initial value (#14750)", function( assert ) {
+QUnit.test( "show() after hide() should always set display to initial value (trac-14750)", function( assert ) {
 	assert.expect( 1 );
 
 	var div = jQuery( "<div></div>" ),
@@ -988,7 +988,7 @@ QUnit.test( "show/hide 3.0, inline hidden", function( assert ) {
 	assert.strictEqual( x.toggle().css( "display" ), "none", "is hidden" );
 	assert.strictEqual( x.toggle().css( "display" ), "block", "is visible" );
 
-	// Ensure hide() is called when toggled (#12148)
+	// Ensure hide() is called when toggled (trac-12148)
 	oldHide = jQuery.fn.hide;
 	jQuery.fn.hide = function() {
 		assert.ok( true, name + " method called on toggle" );
@@ -1048,7 +1048,7 @@ 	jQuery.fn.hide = function() {
 	assert.strictEqual( $shadowChild.css( "display" ), "block", "is visible" );
 } );
 
-QUnit.test( "jQuery.css(elem, 'height') doesn't clear radio buttons (bug #1095)", function( assert ) {
+QUnit.test( "jQuery.css(elem, 'height') doesn't clear radio buttons (bug trac-1095)", function( assert ) {
 	assert.expect( 4 );
 
 	var $checkedtest = jQuery( "#checkedtest" );
@@ -1060,7 +1060,7 @@ QUnit.test( "jQuery.css(elem, 'height') doesn't clear radio buttons (bug #1095)"
 	assert.ok( !jQuery( "input[type='checkbox']", $checkedtest ).last().attr( "checked" ), "Check last checkbox still NOT checked." );
 } );
 
-QUnit.test( "internal ref to elem.runtimeStyle (bug #7608)", function( assert ) {
+QUnit.test( "internal ref to elem.runtimeStyle (bug trac-7608)", function( assert ) {
 	assert.expect( 1 );
 	var result = true;
 
@@ -1099,18 +1099,18 @@ QUnit.test( "internal ref to elem.runtimeStyle (bug #7608)", function( assert )
 	assert.equal( $child.css( "marginLeft" ), "25px", "auto margins are computed to pixels" );
 } );
 
-QUnit.test( "box model properties incorrectly returning % instead of px, see #10639 and #12088", function( assert ) {
+QUnit.test( "box model properties incorrectly returning % instead of px, see trac-10639 and trac-12088", function( assert ) {
 	assert.expect( 2 );
 
 	var container = jQuery( "<div></div>" ).width( 400 ).appendTo( "#qunit-fixture" ),
 		el = jQuery( "<div></div>" ).css( { "width": "50%", "marginRight": "50%" } ).appendTo( container ),
 		el2 = jQuery( "<div></div>" ).css( { "width": "50%", "minWidth": "300px", "marginLeft": "25%" } ).appendTo( container );
 
-	assert.equal( el.css( "marginRight" ), "200px", "css('marginRight') returning % instead of px, see #10639" );
-	assert.equal( el2.css( "marginLeft" ), "100px", "css('marginLeft') returning incorrect pixel value, see #12088" );
+	assert.equal( el.css( "marginRight" ), "200px", "css('marginRight') returning % instead of px, see trac-10639" );
+	assert.equal( el2.css( "marginLeft" ), "100px", "css('marginLeft') returning incorrect pixel value, see trac-12088" );
 } );
 
-QUnit.test( "widows & orphans #8936", function( assert ) {
+QUnit.test( "widows & orphans trac-8936", function( assert ) {
 
 	var $p = jQuery( "<p>" ).appendTo( "#qunit-fixture" );
 
@@ -1127,15 +1127,15 @@ QUnit.test( "widows & orphans #8936", function( assert ) {
 	$p.remove();
 } );
 
-QUnit.test( "can't get css for disconnected in IE<9, see #10254 and #8388", function( assert ) {
+QUnit.test( "can't get css for disconnected in IE<9, see trac-10254 and trac-8388", function( assert ) {
 	assert.expect( 2 );
 	var span, div;
 
 	span = jQuery( "<span></span>" ).css( "background-image", "url(" + baseURL + "1x1.jpg)" );
-	assert.notEqual( span.css( "background-image" ), null, "can't get background-image in IE<9, see #10254" );
+	assert.notEqual( span.css( "background-image" ), null, "can't get background-image in IE<9, see trac-10254" );
 
 	div = jQuery( "<div></div>" ).css( "top", 10 );
-	assert.equal( div.css( "top" ), "10px", "can't get top in IE<9, see #8388" );
+	assert.equal( div.css( "top" ), "10px", "can't get top in IE<9, see trac-8388" );
 } );
 
 QUnit.test( "Ensure styles are retrieving from parsed html on document fragments", function( assert ) {
@@ -1148,7 +1148,7 @@ QUnit.test( "Ensure styles are retrieving from parsed html on document fragments
 	assert.equal( $span.css( "font-size" ), "14px", "Font-size retrievable on parsed HTML node" );
 } );
 
-QUnit.test( "can't get background-position in IE<9, see #10796", function( assert ) {
+QUnit.test( "can't get background-position in IE<9, see trac-10796", function( assert ) {
 	var div = jQuery( "<div></div>" ).appendTo( "#qunit-fixture" ),
 		units = [
 			"0 0",
@@ -1167,22 +1167,22 @@ QUnit.test( "can't get background-position in IE<9, see #10796", function( asser
 
 	for ( ; i < l; i++ ) {
 		div.css( "background-position", units [ i ] );
-		assert.ok( div.css( "background-position" ), "can't get background-position in IE<9, see #10796" );
+		assert.ok( div.css( "background-position" ), "can't get background-position in IE<9, see trac-10796" );
 	}
 } );
 
 if ( jQuery.fn.offset ) {
-	QUnit.test( "percentage properties for left and top should be transformed to pixels, see #9505", function( assert ) {
+	QUnit.test( "percentage properties for left and top should be transformed to pixels, see trac-9505", function( assert ) {
 		assert.expect( 2 );
 		var parent = jQuery( "<div style='position:relative;width:200px;height:200px;margin:0;padding:0;border-width:0'></div>" ).appendTo( "#qunit-fixture" ),
 			div = jQuery( "<div style='position: absolute; width: 20px; height: 20px; top:50%; left:50%'></div>" ).appendTo( parent );
 
-		assert.equal( div.css( "top" ), "100px", "position properties not transformed to pixels, see #9505" );
-		assert.equal( div.css( "left" ), "100px", "position properties not transformed to pixels, see #9505" );
+		assert.equal( div.css( "top" ), "100px", "position properties not transformed to pixels, see trac-9505" );
+		assert.equal( div.css( "left" ), "100px", "position properties not transformed to pixels, see trac-9505" );
 	} );
 }
 
-QUnit.test( "Do not append px (#9548, #12990, #2792)", function( assert ) {
+QUnit.test( "Do not append px (trac-9548, trac-12990, gh-2792)", function( assert ) {
 	assert.expect( 4 );
 
 	var $div = jQuery( "<div>" ).appendTo( "#qunit-fixture" );
@@ -1335,16 +1335,16 @@ QUnit.test( "Append px to whitelisted properties", function( assert ) {
 	}
 } );
 
-QUnit.test( "css('width') and css('height') should respect box-sizing, see #11004", function( assert ) {
+QUnit.test( "css('width') and css('height') should respect box-sizing, see trac-11004", function( assert ) {
 	assert.expect( 4 );
 
 	var el_dis = jQuery( "<div style='width:300px;height:300px;margin:2px;padding:2px;box-sizing:border-box;'>test</div>" ),
 		el = el_dis.clone().appendTo( "#qunit-fixture" );
 
-	assert.equal( el.css( "width" ), el.css( "width", el.css( "width" ) ).css( "width" ), "css('width') is not respecting box-sizing, see #11004" );
-	assert.equal( el_dis.css( "width" ), el_dis.css( "width", el_dis.css( "width" ) ).css( "width" ), "css('width') is not respecting box-sizing for disconnected element, see #11004" );
-	assert.equal( el.css( "height" ), el.css( "height", el.css( "height" ) ).css( "height" ), "css('height') is not respecting box-sizing, see #11004" );
-	assert.equal( el_dis.css( "height" ), el_dis.css( "height", el_dis.css( "height" ) ).css( "height" ), "css('height') is not respecting box-sizing for disconnected element, see #11004" );
+	assert.equal( el.css( "width" ), el.css( "width", el.css( "width" ) ).css( "width" ), "css('width') is not respecting box-sizing, see trac-11004" );
+	assert.equal( el_dis.css( "width" ), el_dis.css( "width", el_dis.css( "width" ) ).css( "width" ), "css('width') is not respecting box-sizing for disconnected element, see trac-11004" );
+	assert.equal( el.css( "height" ), el.css( "height", el.css( "height" ) ).css( "height" ), "css('height') is not respecting box-sizing, see trac-11004" );
+	assert.equal( el_dis.css( "height" ), el_dis.css( "height", el_dis.css( "height" ) ).css( "height" ), "css('height') is not respecting box-sizing for disconnected element, see trac-11004" );
 } );
 
 QUnit.test( "table rows width/height should be unaffected by inline styles", function( assert ) {
@@ -1368,7 +1368,7 @@ QUnit.test( "table rows width/height should be unaffected by inline styles", fun
 } );
 
 testIframe(
-	"css('width') should work correctly before document ready (#14084)",
+	"css('width') should work correctly before document ready (trac-14084)",
 	"css/cssWidthBeforeDocReady.html",
 	function( assert, jQuery, window, document, cssWidthBeforeDocReady ) {
 		assert.expect( 1 );
@@ -1409,13 +1409,13 @@ function( assert, jQuery, window, document, widthBeforeSet, widthAfterSet ) {
 		"css('height') should return fractional values" );
 } );
 
-QUnit.test( "certain css values of 'normal' should be convertable to a number, see #8627", function( assert ) {
+QUnit.test( "certain css values of 'normal' should be convertable to a number, see trac-8627", function( assert ) {
 	assert.expect( 3 );
 
 	var el = jQuery( "<div style='letter-spacing:normal;font-weight:normal;'>test</div>" ).appendTo( "#qunit-fixture" );
 
-	assert.ok( !isNaN( parseFloat( el.css( "letterSpacing" ) ) ), "css('letterSpacing') not convertable to number, see #8627" );
-	assert.ok( !isNaN( parseFloat( el.css( "fontWeight" ) ) ), "css('fontWeight') not convertable to number, see #8627" );
+	assert.ok( !isNaN( parseFloat( el.css( "letterSpacing" ) ) ), "css('letterSpacing') not convertable to number, see trac-8627" );
+	assert.ok( !isNaN( parseFloat( el.css( "fontWeight" ) ) ), "css('fontWeight') not convertable to number, see trac-8627" );
 	assert.equal( typeof el.css( "fontWeight" ), "string", ".css() returns a string" );
 } );
 
@@ -1459,7 +1459,7 @@ QUnit.test( "cssHooks - expand", function( assert ) {
 
 } );
 
-QUnit.test( "css opacity consistency across browsers (#12685)", function( assert ) {
+QUnit.test( "css opacity consistency across browsers (trac-12685)", function( assert ) {
 	assert.expect( 3 );
 
 	var el,
@@ -1487,8 +1487,8 @@ QUnit.test( "css opacity consistency across browsers (#12685)", function( assert
 	assert.ok( !jQuery( "#nothiddendiv" ).is( ":visible" ), "Modified CSS display: Assert element is hidden" );
 	jQuery( "#nothiddendiv" ).css( { "display": "block" } );
 	assert.ok( jQuery( "#nothiddendiv" ).is( ":visible" ), "Modified CSS display: Assert element is visible" );
-	assert.ok( !jQuery( window ).is( ":visible" ), "Calling is(':visible') on window does not throw an exception (#10267)." );
-	assert.ok( !jQuery( document ).is( ":visible" ), "Calling is(':visible') on document does not throw an exception (#10267)." );
+	assert.ok( !jQuery( window ).is( ":visible" ), "Calling is(':visible') on window does not throw an exception (trac-10267)." );
+	assert.ok( !jQuery( document ).is( ":visible" ), "Calling is(':visible') on document does not throw an exception (trac-10267)." );
 
 	assert.ok( jQuery( "#nothiddendiv" ).is( ":visible" ), "Modifying CSS display: Assert element is visible" );
 	jQuery( "#nothiddendiv" ).css( "display", "none" );
@@ -1507,9 +1507,9 @@ QUnit.test( "css opacity consistency across browsers (#12685)", function( assert
 
 	$table = jQuery( "#table" );
 	$table.html( "<tr><td style='display:none'>cell</td><td>cell</td></tr>" );
-	assert.equal( jQuery( "#table td:visible" ).length, 1, "hidden cell is not perceived as visible (#4512). Works on table elements" );
+	assert.equal( jQuery( "#table td:visible" ).length, 1, "hidden cell is not perceived as visible (trac-4512). Works on table elements" );
 	$table.css( "display", "none" ).html( "<tr><td>cell</td><td>cell</td></tr>" );
-	assert.equal( jQuery( "#table td:visible" ).length, 0, "hidden cell children not perceived as visible (#4512)" );
+	assert.equal( jQuery( "#table td:visible" ).length, 0, "hidden cell children not perceived as visible (trac-4512)" );
 
 	if ( QUnit.jQuerySelectorsPos ) {
 		assert.t( "Is Visible", "#qunit-fixture div:visible:lt(2)", [ "foo", "nothiddendiv" ] );
@@ -1524,7 +1524,7 @@ QUnit.test( "css opacity consistency across browsers (#12685)", function( assert
 	assert.ok( $a.is( ":visible" ), "Anchor tag with flow content is visible (gh-2227)" );
 } );
 
-QUnit.test( "Keep the last style if the new one isn't recognized by the browser (#14836)", function( assert ) {
+QUnit.test( "Keep the last style if the new one isn't recognized by the browser (trac-14836)", function( assert ) {
 	assert.expect( 1 );
 
 	var el = jQuery( "<div></div>" ).css( "position", "absolute" ).css( "position", "fake value" );
@@ -1551,7 +1551,7 @@ QUnit.test( "Reset the style if set to an empty string", function( assert ) {
 } );
 
 QUnit.test(
-	"Clearing a Cloned Element's Style Shouldn't Clear the Original Element's Style (#8908)",
+	"Clearing a Cloned Element's Style Shouldn't Clear the Original Element's Style (trac-8908)",
 	function( assert ) {
 		assert.expect( 24 );
 		var done = assert.async();
@@ -1626,7 +1626,7 @@ function( assert ) {
 	}
 );
 
-QUnit.test( "Don't append px to CSS \"order\" value (#14049)", function( assert ) {
+QUnit.test( "Don't append px to CSS \"order\" value (trac-14049)", function( assert ) {
 	assert.expect( 1 );
 
 	var $elem = jQuery( "<div></div>" );
@@ -1635,7 +1635,7 @@ QUnit.test( "Don't append px to CSS \"order\" value (#14049)", function( assert
 	assert.equal( $elem.css( "order" ), "2", "2 on order" );
 } );
 
-QUnit.test( "Do not throw on frame elements from css method (#15098)", function( assert ) {
+QUnit.test( "Do not throw on frame elements from css method (trac-15098)", function( assert ) {
 	assert.expect( 1 );
 
 	var frameWin, frameDoc,
@@ -1738,9 +1738,16 @@ jQuery( "#qunit-fixture" ).append(
 		"    .test__customProperties {\n" +
 		"        --prop1:val1;\n" +
 		"        --prop2: val2;\n" +
-		"        --prop3:val3 ;\n" +
-		"        --prop4:\"val4\";\n" +
-		"        --prop5:'val5';\n" +
+		"        --prop3:   val3;\n" +
+		"        --prop4:val4 ;\n" +
+		"        --prop5:val5   ;\n" +
+		"        --prop6: val6 ;\n" +
+		"        --prop7:   val7   ;\n" +
+		"        --prop8:\"val8\";\n" +
+		"        --prop9:'val9';\n" +
+		"        --prop10:\f\r\n\t val10 \f\r\n\t;\n" +
+		"        --prop11:\u000C\u000D\u000A\u0009\u0020val11\u0020\u0009\u000A\u000D\u000C;\n" +
+		"        --prop12:\u000Bval12\u000B;\n" +
 		"    }\n" +
 		"</style>"
 	);
@@ -1749,7 +1756,7 @@ jQuery( "#qunit-fixture" ).append(
 		$elem = jQuery( "<div>" ).addClass( "test__customProperties" )
 			.appendTo( "#qunit-fixture" ),
 		webkitOrBlink = /\bsafari\b/i.test( navigator.userAgent ),
-		expected = 10;
+		expected = 17;
 
 	if ( webkitOrBlink ) {
 		expected -= 2;
@@ -1777,16 +1784,24 @@ jQuery( "#qunit-fixture" ).append(
 
 	assert.equal( $elem.css( "--prop1" ), "val1", "Basic CSS custom property" );
 
-	assert.equal( $elem.css( "--prop2" ), " val2", "Preceding whitespace maintained" );
-	assert.equal( $elem.css( "--prop3" ), "val3 ", "Following whitespace maintained" );
+	assert.equal( $elem.css( "--prop2" ), "val2", "Preceding whitespace trimmed" );
+	assert.equal( $elem.css( "--prop3" ), "val3", "Multiple preceding whitespace trimmed" );
+	assert.equal( $elem.css( "--prop4" ), "val4", "Following whitespace trimmed" );
+	assert.equal( $elem.css( "--prop5" ), "val5", "Multiple Following whitespace trimmed" );
+	assert.equal( $elem.css( "--prop6" ), "val6", "Preceding and Following whitespace trimmed" );
+	assert.equal( $elem.css( "--prop7" ), "val7", "Multiple preceding and following whitespace trimmed" );
 
 	// Support: Chrome <=49 - 73+, Safari <=9.1 - 12.1+
 	// Chrome treats single quotes as double ones.
 	// Safari treats double quotes as single ones.
 	if ( !webkitOrBlink ) {
-		assert.equal( $elem.css( "--prop4" ), "\"val4\"", "Works with double quotes" );
-		assert.equal( $elem.css( "--prop5" ), "'val5'", "Works with single quotes" );
+		assert.equal( $elem.css( "--prop8" ), "\"val8\"", "Works with double quotes" );
+		assert.equal( $elem.css( "--prop9" ), "'val9'", "Works with single quotes" );
 	}
+
+	assert.equal( $elem.css( "--prop10" ), "val10", "Multiple preceding and following escaped unicode whitespace trimmed" );
+	assert.equal( $elem.css( "--prop11" ), "val11", "Multiple preceding and following unicode whitespace trimmed" );
+	assert.equal( $elem.css( "--prop12" ), "\u000Bval12\u000B", "Multiple preceding and following non-CSS whitespace reserved" );
 } );
 
 // IE doesn't support CSS variables.
diff --git a/a.js b/b.js
index f86bd9ab..cad13bd9 100644
--- a/a.js
+++ b/b.js
@@ -25,9 +25,7 @@
 
 	// Support: IE <=10 - 11+
 	// In IE using regex groups here causes severe slowdowns.
-	rnoInnerhtml = /<script|<style|<link/i,
-
-	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
+	rnoInnerhtml = /<script|<style|<link/i;
 
 // Prefer a tbody over its parent table for containing new rows
 function manipulationTarget( elem, content ) {
@@ -122,7 +120,7 @@ function domManip( collection, args, callback, ignored ) {
 
 			// Use the original fragment for the last item
 			// instead of the first because it can end up
-			// being emptied incorrectly in certain situations (#8070).
+			// being emptied incorrectly in certain situations (trac-8070).
 			for ( ; i < l; i++ ) {
 				node = fragment;
 
@@ -161,7 +159,7 @@ function domManip( collection, args, callback, ignored ) {
 								}, doc );
 							}
 						} else {
-							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
+							DOMEval( node.textContent, node, doc );
 						}
 					}
 				}
diff --git a/a.js b/b.js
index 13110944..52e17a9e 100644
--- a/a.js
+++ b/b.js
@@ -39,9 +39,9 @@ QUnit.test( "text()", function( assert ) {
 
 	// Check serialization of text values
 	assert.equal( jQuery( document.createTextNode( "foo" ) ).text(), "foo", "Text node was retrieved from .text()." );
-	assert.notEqual( jQuery( document ).text(), "", "Retrieving text for the document retrieves all text (#10724)." );
+	assert.notEqual( jQuery( document ).text(), "", "Retrieving text for the document retrieves all text (trac-10724)." );
 
-	// Retrieve from document fragments #10864
+	// Retrieve from document fragments trac-10864
 	frag = document.createDocumentFragment();
 	frag.appendChild( document.createTextNode( "foo" ) );
 
@@ -49,7 +49,7 @@ QUnit.test( "text()", function( assert ) {
 
 	$newLineTest = jQuery( "<div>test<br/>testy</div>" ).appendTo( "#moretests" );
 	$newLineTest.find( "br" ).replaceWith( "\n" );
-	assert.equal( $newLineTest.text(), "test\ntesty", "text() does not remove new lines (#11153)" );
+	assert.equal( $newLineTest.text(), "test\ntesty", "text() does not remove new lines (trac-11153)" );
 
 	$newLineTest.remove();
 } );
@@ -58,7 +58,7 @@ QUnit.test( "text(undefined)", function( assert ) {
 
 	assert.expect( 1 );
 
-	assert.equal( jQuery( "#foo" ).text( "<div" ).text( undefined )[ 0 ].innerHTML, "&lt;div", ".text(undefined) is chainable (#5571)" );
+	assert.equal( jQuery( "#foo" ).text( "<div" ).text( undefined )[ 0 ].innerHTML, "&lt;div", ".text(undefined) is chainable (trac-5571)" );
 } );
 
 function testText( valueObj, assert ) {
@@ -78,16 +78,16 @@ function testText( valueObj, assert ) {
 
 	assert.equal( j[ 2 ].nodeType, 8, "Check node,textnode,comment with text()" );
 
-	// Update multiple elements #11809
+	// Update multiple elements trac-11809
 	expected = "New";
 
 	$multipleElements = jQuery( "<div>Hello</div>" ).add( "<div>World</div>" );
 	$multipleElements.text( expected );
 
-	assert.equal( $multipleElements.eq( 0 ).text(), expected, "text() updates multiple elements (#11809)" );
-	assert.equal( $multipleElements.eq( 1 ).text(), expected, "text() updates multiple elements (#11809)" );
+	assert.equal( $multipleElements.eq( 0 ).text(), expected, "text() updates multiple elements (trac-11809)" );
+	assert.equal( $multipleElements.eq( 1 ).text(), expected, "text() updates multiple elements (trac-11809)" );
 
-	// Prevent memory leaks #11809
+	// Prevent memory leaks trac-11809
 	$childDiv = jQuery( "<div></div>" );
 	$childDiv.data( "leak", true );
 	$parentDiv = jQuery( "<div></div>" );
@@ -187,7 +187,7 @@ function testAppendForObject( valueObj, isFragment, assert ) {
 
 	assert.equal( $base.clone().append( valueObj( document.getElementById( "form" ).cloneNode( true ) ) ).children( "form" ).length,
 		1,
-		"Check for appending a form (#910)" + type
+		"Check for appending a form (trac-910)" + type
 	);
 }
 
@@ -272,7 +272,7 @@ jQuery( "#form" )
 		.append( valueObj( "<select id='appendSelect2'><option>Test</option></select>" ) );
 	assert.t( "Append Select", "#appendSelect1, #appendSelect2", [ "appendSelect1", "appendSelect2" ] );
 
-	assert.equal( "Two nodes", jQuery( "<div></div>" ).append( "Two", " nodes" ).text(), "Appending two text nodes (#4011)" );
+	assert.equal( "Two nodes", jQuery( "<div></div>" ).append( "Two", " nodes" ).text(), "Appending two text nodes (trac-4011)" );
 	assert.equal( jQuery( "<div></div>" ).append( "1", "", 3 ).text(), "13", "If median is false-like value, subsequent arguments should not be ignored" );
 
 	// using contents will get comments regular, text, and comment nodes
@@ -310,7 +310,7 @@ QUnit.test( "append(Function)", function( assert ) {
 	testAppend( manipulationFunctionReturningObj, assert );
 } );
 
-QUnit.test( "append(param) to object, see #11280", function( assert ) {
+QUnit.test( "append(param) to object, see trac-11280", function( assert ) {
 
 	assert.expect( 5 );
 
@@ -402,7 +402,7 @@ jQuery( "#sap" ).append( function( i, val ) {
 	assert.ok( jQuery( "#sap" )[ 0 ].innerHTML.match( /5$/ ), "Check for appending a number" );
 } );
 
-QUnit.test( "XML DOM manipulation (#9960)", function( assert ) {
+QUnit.test( "XML DOM manipulation (trac-9960)", function( assert ) {
 
 	assert.expect( 5 );
 
@@ -430,7 +430,7 @@ QUnit.test( "XML DOM manipulation (#9960)", function( assert ) {
 	assert.deepEqual( jQuery( "state", xml2 ).get(), scxml1.find( "state" ).get(), "replaceWith" );
 } );
 
-QUnit.test( "append HTML5 sectioning elements (Bug #6485)", function( assert ) {
+QUnit.test( "append HTML5 sectioning elements (Bug trac-6485)", function( assert ) {
 
 	assert.expect( 2 );
 
@@ -445,7 +445,7 @@ QUnit.test( "append HTML5 sectioning elements (Bug #6485)", function( assert ) {
 	assert.equal( aside.length, 1, "HTML5 elements do not collapse their children" );
 } );
 
-QUnit[ jQuery.fn.css ? "test" : "skip" ]( "HTML5 Elements inherit styles from style rules (Bug #10501)", function( assert ) {
+QUnit[ jQuery.fn.css ? "test" : "skip" ]( "HTML5 Elements inherit styles from style rules (Bug trac-10501)", function( assert ) {
 
 	assert.expect( 1 );
 
@@ -456,7 +456,7 @@ QUnit.test( "append HTML5 sectioning elements (Bug #6485)", function( assert ) {
 	assert.notEqual( jQuery( "section" ).css( "background-color" ), "transparent", "HTML5 elements inherit styles" );
 } );
 
-QUnit.test( "html(String) with HTML5 (Bug #6485)", function( assert ) {
+QUnit.test( "html(String) with HTML5 (Bug trac-6485)", function( assert ) {
 
 	assert.expect( 2 );
 
@@ -465,7 +465,7 @@ QUnit.test( "html(String) with HTML5 (Bug #6485)", function( assert ) {
 	assert.equal( jQuery( "#qunit-fixture" ).children().children().children().length, 1, "Make sure nested HTML5 elements can hold children." );
 } );
 
-QUnit.test( "html(String) tag-hyphenated elements (Bug #1987)", function( assert ) {
+QUnit.test( "html(String) tag-hyphenated elements (Bug gh-1987)", function( assert ) {
 
 	assert.expect( 27 );
 
@@ -561,7 +561,7 @@ QUnit.test( "IE8 serialization bug", function( assert ) {
 	assert.equal( wrapper.children( "link" ).length, 1, "Link elements are insertable with .html()" );
 } );
 
-QUnit.test( "html() object element #10324", function( assert ) {
+QUnit.test( "html() object element trac-10324", function( assert ) {
 
 	assert.expect( 1 );
 
@@ -959,7 +959,7 @@ QUnit.test( "before(no-op)", function( assert ) {
 	assert.equal( set.length, 1, "Insert the element before the disconnected node. should be a no-op" );
 } );
 
-QUnit.test( "before and after w/ empty object (#10812)", function( assert ) {
+QUnit.test( "before and after w/ empty object (trac-10812)", function( assert ) {
 
 	assert.expect( 1 );
 
@@ -1195,7 +1195,7 @@ function testReplaceWith( val, assert ) {
 	assert.ok( !jQuery( "#baz" )[ 0 ], "Verify that original element is gone, after element" );
 
 	jQuery( "#bar" ).replaceWith( "<div id='yahoo'></div>", "...", "<div id='baz'></div>" );
-	assert.deepEqual( jQuery( "#yahoo, #baz" ).get(), q( "yahoo", "baz" ),  "Replace element with multiple arguments (#13722)" );
+	assert.deepEqual( jQuery( "#yahoo, #baz" ).get(), q( "yahoo", "baz" ),  "Replace element with multiple arguments (trac-13722)" );
 	assert.strictEqual( jQuery( "#yahoo" )[ 0 ].nextSibling, jQuery( "#baz" )[ 0 ].previousSibling, "Argument order preserved" );
 	assert.deepEqual( jQuery( "#bar" ).get(), [], "Verify that original element is gone, after multiple arguments" );
 
@@ -1208,7 +1208,7 @@ function testReplaceWith( val, assert ) {
 	assert.ok( !jQuery( "#groups" )[ 0 ], "Verify that original element is gone, after jQuery collection" );
 
 	jQuery( "#mark, #first" ).replaceWith( val( "<span class='replacement'></span><span class='replacement'></span>" ) );
-	assert.equal( jQuery( "#qunit-fixture .replacement" ).length, 4, "Replace multiple elements (#12449)" );
+	assert.equal( jQuery( "#qunit-fixture .replacement" ).length, 4, "Replace multiple elements (trac-12449)" );
 	assert.deepEqual( jQuery( "#mark, #first" ).get(), [], "Verify that original elements are gone, after replace multiple" );
 
 	tmp = jQuery( "<b>content</b>" )[ 0 ];
@@ -1256,7 +1256,7 @@ function testReplaceWith( val, assert ) {
 		"Self-replacement" );
 	$div.replaceWith( child );
 	assert.deepEqual( jQuery( "#qunit-fixture" ).children().first().get(), child.get(),
-		"Replacement with following sibling (#13810)" );
+		"Replacement with following sibling (trac-13810)" );
 	assert.deepEqual( jQuery( ".pathological", "#qunit-fixture" ).get(), [],
 		"Replacement with following sibling (context removed)" );
 
@@ -1376,7 +1376,7 @@ QUnit.test( "replaceAll(jQuery)", function( assert ) {
 	assert.ok( !jQuery( "#yahoo" )[ 0 ], "Verify that original element is gone, after set of elements" );
 } );
 
-QUnit.test( "jQuery.clone() (#8017)", function( assert ) {
+QUnit.test( "jQuery.clone() (trac-8017)", function( assert ) {
 
 	assert.expect( 2 );
 
@@ -1388,7 +1388,7 @@ QUnit.test( "jQuery.clone() (#8017)", function( assert ) {
 	assert.equal( main.childNodes.length, clone.childNodes.length, "Simple child length to ensure a large dom tree copies correctly" );
 } );
 
-QUnit.test( "append to multiple elements (#8070)", function( assert ) {
+QUnit.test( "append to multiple elements (trac-8070)", function( assert ) {
 
 	assert.expect( 2 );
 
@@ -1543,7 +1543,7 @@ QUnit.test( "clone()", function( assert ) {
 	body.remove();
 } );
 
-QUnit.test( "clone(script type=non-javascript) (#11359)", function( assert ) {
+QUnit.test( "clone(script type=non-javascript) (trac-11359)", function( assert ) {
 
 	assert.expect( 3 );
 
@@ -1556,7 +1556,7 @@ QUnit.test( "clone(script type=non-javascript) (#11359)", function( assert ) {
 	dest.remove();
 } );
 
-QUnit.test( "clone(form element) (Bug #3879, #6655)", function( assert ) {
+QUnit.test( "clone(form element) (Bug trac-3879, trac-6655)", function( assert ) {
 
 	assert.expect( 5 );
 
@@ -1581,7 +1581,7 @@ QUnit.test( "clone(form element) (Bug #3879, #6655)", function( assert ) {
 	assert.equal( clone[ 0 ].defaultValue, "foo", "Textarea defaultValue cloned correctly" );
 } );
 
-QUnit.test( "clone(multiple selected options) (Bug #8129)", function( assert ) {
+QUnit.test( "clone(multiple selected options) (Bug trac-8129)", function( assert ) {
 
 	assert.expect( 1 );
 
@@ -1630,14 +1630,14 @@ QUnit.test( "html(undefined)", function( assert ) {
 
 	assert.expect( 1 );
 
-	assert.equal( jQuery( "#foo" ).html( "<i>test</i>" ).html( undefined ).html().toLowerCase(), "<i>test</i>", ".html(undefined) is chainable (#5571)" );
+	assert.equal( jQuery( "#foo" ).html( "<i>test</i>" ).html( undefined ).html().toLowerCase(), "<i>test</i>", ".html(undefined) is chainable (trac-5571)" );
 } );
 
 QUnit.test( "html() on empty set", function( assert ) {
 
 	assert.expect( 1 );
 
-	assert.strictEqual( jQuery().html(), undefined, ".html() returns undefined for empty sets (#11962)" );
+	assert.strictEqual( jQuery().html(), undefined, ".html() returns undefined for empty sets (trac-11962)" );
 } );
 
 function childNodeNames( node ) {
@@ -1738,7 +1738,7 @@ jQuery( "#nonnodes" ).contents().html( valueObj( "<b>bold</b>" ) ).each( functio
 	fixture.html( valueObj( "<script type='text/javascript'>QUnit.assert.ok( true, 'Injection of identical script' );</script>" ) );
 	fixture.html( valueObj( "<script type='text/javascript'>QUnit.assert.ok( true, 'Injection of identical script' );</script>" ) );
 	fixture.html( valueObj( "<script type='text/javascript'>QUnit.assert.ok( true, 'Injection of identical script' );</script>" ) );
-	fixture.html( valueObj( "foo <form><script type='text/javascript'>QUnit.assert.ok( true, 'Injection of identical script (#975)' );</script></form>" ) );
+	fixture.html( valueObj( "foo <form><script type='text/javascript'>QUnit.assert.ok( true, 'Injection of identical script (trac-975)' );</script></form>" ) );
 
 	jQuery.scriptorder = 0;
 	fixture.html( valueObj( [
@@ -1888,7 +1888,7 @@ QUnit.test( "html(Function) with incoming value -- jQuery.contents()", function(
 	} ).html().replace( />/g, "&gt;" ), " " + insert, "Verify escaped insertion." );
 } );
 
-QUnit.test( "clone()/html() don't expose jQuery/Sizzle expandos (#12858)", function( assert ) {
+QUnit.test( "clone()/html() don't expose jQuery/Sizzle expandos (trac-12858)", function( assert ) {
 
 	assert.expect( 2 );
 
@@ -1975,7 +1975,7 @@ QUnit.test( "remove() event cleaning ", function( assert ) {
 	cleanUp.remove();
 } );
 
-QUnit.test( "remove() in document order #13779", function( assert ) {
+QUnit.test( "remove() in document order trac-13779", function( assert ) {
 	assert.expect( 1 );
 
 	var last,
@@ -2233,19 +2233,31 @@ jQuery( [
 		"</script>"
 	].join( "\n" ) ).appendTo( "#qunit-fixture" );
 
+	// This test requires XHTML mode as CDATA is not recognized in HTML.
+	// jQuery( [
+	// 	"<script type='text/javascript'>",
+	// 	"<![CDATA[",
+	// 	"QUnit.assert.ok( true, '<![CDATA[ handled' );",
+	// 	"//]]>",
+	// 	"</script>"
+	// ].join( "\n" ) ).appendTo( "#qunit-fixture" );
+
 	jQuery( [
 		"<script type='text/javascript'>",
-		"<![CDATA[",
-		"QUnit.assert.ok( true, '<![CDATA[ handled' );",
-		"//]]>",
+		"<!--//--><![CDATA[//><!--",
+		"QUnit.assert.ok( true, '<!--//--><![CDATA[//><!-- (Drupal case) handled' );",
+		"//--><!]]>",
 		"</script>"
 	].join( "\n" ) ).appendTo( "#qunit-fixture" );
 
+	// ES2015 in Annex B requires HTML-style comment delimiters (`<!--` & `-->`) to act as
+	// single-line comment delimiters; i.e. they should be treated as `//`.
+	// See gh-4904
 	jQuery( [
 		"<script type='text/javascript'>",
-		"<!--//--><![CDATA[//><!--",
-		"QUnit.assert.ok( true, '<!--//--><![CDATA[//><!-- (Drupal case) handled' );",
-		"//--><!]]>",
+		"<!-- Same-line HTML comment",
+		"QUnit.assert.ok( true, '<!-- Same-line HTML comment' );",
+		"-->",
 		"</script>"
 	].join( "\n" ) ).appendTo( "#qunit-fixture" );
 } );
@@ -2324,7 +2336,7 @@ 	window.corsCallback = function( response ) {
 	}, 2000 );
 } );
 
-QUnit.test( "jQuery.clone - no exceptions for object elements #9587", function( assert ) {
+QUnit.test( "jQuery.clone - no exceptions for object elements trac-9587", function( assert ) {
 
 	assert.expect( 1 );
 
@@ -2336,7 +2348,7 @@ QUnit.test( "jQuery.clone - no exceptions for object elements #9587", function(
 	}
 } );
 
-QUnit.test( "Cloned, detached HTML5 elems (#10667,10670)", function( assert ) {
+QUnit.test( "Cloned, detached HTML5 elems (trac-10667, trac-10670)", function( assert ) {
 
 	assert.expect( 7 );
 
@@ -2416,7 +2428,7 @@ QUnit.test( "Guard against exceptions when clearing safeChildNodes", function( a
 	assert.ok( div && div.jquery, "Created nodes safely, guarded against exceptions on safeChildNodes[ -1 ]" );
 } );
 
-QUnit.test( "Ensure oldIE creates a new set on appendTo (#8894)", function( assert ) {
+QUnit.test( "Ensure oldIE creates a new set on appendTo (trac-8894)", function( assert ) {
 
 	assert.expect( 5 );
 
@@ -2427,7 +2439,7 @@ QUnit.test( "Ensure oldIE creates a new set on appendTo (#8894)", function( asse
 	assert.strictEqual( jQuery( "<p></p>" ).appendTo( "<div></div>" ).end().length, jQuery( "<p>test</p>" ).appendTo( "<div></div>" ).end().length, "Elements created with createElement and with createDocumentFragment should be treated alike" );
 } );
 
-QUnit.test( "html() - script exceptions bubble (#11743)", function( assert ) {
+QUnit.test( "html() - script exceptions bubble (trac-11743)", function( assert ) {
 	assert.expect( 2 );
 	var done = assert.async(),
 		onerror = window.onerror;
@@ -2469,7 +2481,7 @@ QUnit.test( "checked state is cloned with clone()", function( assert ) {
 	assert.equal( jQuery( elem ).clone().attr( "id", "clone" )[ 0 ].checked, true, "Checked true state correctly cloned" );
 } );
 
-QUnit.test( "manipulate mixed jQuery and text (#12384, #12346)", function( assert ) {
+QUnit.test( "manipulate mixed jQuery and text (trac-12384, trac-12346)", function( assert ) {
 
 	assert.expect( 2 );
 
@@ -2485,7 +2497,7 @@ QUnit.test( "manipulate mixed jQuery and text (#12384, #12346)", function( asser
 	assert.equal( div.find( "*" ).length, 3, "added 2 paragraphs after inner div" );
 } );
 
-QUnit.test( "script evaluation (#11795)", function( assert ) {
+QUnit.test( "script evaluation (trac-11795)", function( assert ) {
 
 	assert.expect( 13 );
 
@@ -2539,7 +2551,7 @@ 		notOk = function() {
 	}
 } );
 
-QUnit[ jQuery.ajax ? "test" : "skip" ]( "jQuery._evalUrl (#12838)", function( assert ) {
+QUnit[ jQuery.ajax ? "test" : "skip" ]( "jQuery._evalUrl (trac-12838)", function( assert ) {
 
 	assert.expect( 5 );
 
@@ -2608,7 +2620,7 @@ setTimeout( function() {
 	}, 100 );
 } );
 
-QUnit.test( "insertAfter, insertBefore, etc do not work when destination is original element. Element is removed (#4087)", function( assert ) {
+QUnit.test( "insertAfter, insertBefore, etc do not work when destination is original element. Element is removed (trac-4087)", function( assert ) {
 
 	assert.expect( 10 );
 
@@ -2642,7 +2654,7 @@ QUnit.test( "insertAfter, insertBefore, etc do not work when destination is orig
 	} );
 } );
 
-QUnit.test( "Index for function argument should be received (#13094)", function( assert ) {
+QUnit.test( "Index for function argument should be received (trac-13094)", function( assert ) {
 	assert.expect( 2 );
 
 	var i = 0;
@@ -2664,7 +2676,7 @@ QUnit.test( "Make sure jQuery.fn.remove can work on elements in documentFragment
 	assert.equal( fragment.childNodes.length, 0, "div element was removed from documentFragment" );
 } );
 
-QUnit.test( "Make sure specific elements with content created correctly (#13232)", function( assert ) {
+QUnit.test( "Make sure specific elements with content created correctly (trac-13232)", function( assert ) {
 	assert.expect( 20 );
 
 	var results = [],
@@ -2699,7 +2711,7 @@ QUnit.test( "Make sure specific elements with content created correctly (#13232)
 	} );
 } );
 
-QUnit.test( "Validate creation of multiple quantities of certain elements (#13818)", function( assert ) {
+QUnit.test( "Validate creation of multiple quantities of certain elements (trac-13818)", function( assert ) {
 	assert.expect( 22 );
 
 	var tags = [ "thead", "tbody", "tfoot", "colgroup", "col", "caption", "tr", "th", "td", "optgroup", "option" ];
@@ -2996,3 +3008,19 @@ QUnit.test( "Works with invalid attempts to close the table wrapper", function(
 	assert.strictEqual( elem[ 0 ].nodeName.toLowerCase(), "td", "First element is td" );
 	assert.strictEqual( elem[ 1 ].nodeName.toLowerCase(), "td", "Second element is td" );
 } );
+
+// Test trustedTypes support in browsers where they're supported (currently Chrome 83+).
+// Browsers with no TrustedHTML support still run tests on object wrappers with
+// a proper `toString` function.
+testIframe(
+	"Basic TrustedHTML support (gh-4409)",
+	"mock.php?action=trustedHtml",
+	function( assert, jQuery, window, document, test ) {
+
+		assert.expect( 5 );
+
+		test.forEach( function( result ) {
+			assert.deepEqual( result.actual, result.expected, result.message );
+		} );
+	}
+);
diff --git a/a.js b/b.js
index 6d2983f8..1c207e9f 100644
--- a/a.js
+++ b/b.js
@@ -33,7 +33,7 @@ QUnit.test( "css(String|Hash)", function( assert ) {
 
 	div2.remove();
 
-	// handle negative numbers by setting to zero #11604
+	// handle negative numbers by setting to zero trac-11604
 	jQuery( "#nothiddendiv" ).css( { "width": 1, "height": 1 } );
 
 	width = parseFloat( jQuery( "#nothiddendiv" ).css( "width" ) );
@@ -113,7 +113,7 @@ QUnit.test( "css(String|Hash)", function( assert ) {
 
 	div = jQuery( "<div></div>" ).css( { position: "absolute", "z-index": 1000 } ).appendTo( "#qunit-fixture" );
 	assert.strictEqual( div.css( "z-index" ), "1000",
-		"Make sure that a string z-index is returned from css('z-index') (#14432)." );
+		"Make sure that a string z-index is returned from css('z-index') (trac-14432)." );
 } );
 
 QUnit.test( "css() explicit and relative values", function( assert ) {
@@ -325,11 +325,11 @@ QUnit.test( "css(String, Object)", function( assert ) {
 	catch ( e ) {
 		success = false;
 	}
-	assert.ok( success, "Setting RGBA values does not throw Error (#5509)" );
+	assert.ok( success, "Setting RGBA values does not throw Error (trac-5509)" );
 
 	jQuery( "#foo" ).css( "font", "7px/21px sans-serif" );
 	assert.strictEqual( jQuery( "#foo" ).css( "line-height" ), "21px",
-		"Set font shorthand property (#14759)" );
+		"Set font shorthand property (trac-14759)" );
 } );
 
 QUnit.test( "css(String, Object) with negative values", function( assert ) {
@@ -699,7 +699,7 @@ QUnit.test( "show/hide detached nodes", function( assert ) {
 	} );
 } );
 
-QUnit.test( "hide hidden elements (bug #7141)", function( assert ) {
+QUnit.test( "hide hidden elements (bug trac-7141)", function( assert ) {
 	assert.expect( 3 );
 
 	var div = jQuery( "<div style='display:none'></div>" ).appendTo( "#qunit-fixture" );
@@ -712,7 +712,7 @@ QUnit.test( "hide hidden elements (bug #7141)", function( assert ) {
 	div.remove();
 } );
 
-QUnit.test( "show() after hide() should always set display to initial value (#14750)", function( assert ) {
+QUnit.test( "show() after hide() should always set display to initial value (trac-14750)", function( assert ) {
 	assert.expect( 1 );
 
 	var div = jQuery( "<div></div>" ),
@@ -988,7 +988,7 @@ QUnit.test( "show/hide 3.0, inline hidden", function( assert ) {
 	assert.strictEqual( x.toggle().css( "display" ), "none", "is hidden" );
 	assert.strictEqual( x.toggle().css( "display" ), "block", "is visible" );
 
-	// Ensure hide() is called when toggled (#12148)
+	// Ensure hide() is called when toggled (trac-12148)
 	oldHide = jQuery.fn.hide;
 	jQuery.fn.hide = function() {
 		assert.ok( true, name + " method called on toggle" );
@@ -1048,7 +1048,7 @@ 	jQuery.fn.hide = function() {
 	assert.strictEqual( $shadowChild.css( "display" ), "block", "is visible" );
 } );
 
-QUnit.test( "jQuery.css(elem, 'height') doesn't clear radio buttons (bug #1095)", function( assert ) {
+QUnit.test( "jQuery.css(elem, 'height') doesn't clear radio buttons (bug trac-1095)", function( assert ) {
 	assert.expect( 4 );
 
 	var $checkedtest = jQuery( "#checkedtest" );
@@ -1060,7 +1060,7 @@ QUnit.test( "jQuery.css(elem, 'height') doesn't clear radio buttons (bug #1095)"
 	assert.ok( !jQuery( "input[type='checkbox']", $checkedtest ).last().attr( "checked" ), "Check last checkbox still NOT checked." );
 } );
 
-QUnit.test( "internal ref to elem.runtimeStyle (bug #7608)", function( assert ) {
+QUnit.test( "internal ref to elem.runtimeStyle (bug trac-7608)", function( assert ) {
 	assert.expect( 1 );
 	var result = true;
 
@@ -1099,18 +1099,18 @@ QUnit.test( "internal ref to elem.runtimeStyle (bug #7608)", function( assert )
 	assert.equal( $child.css( "marginLeft" ), "25px", "auto margins are computed to pixels" );
 } );
 
-QUnit.test( "box model properties incorrectly returning % instead of px, see #10639 and #12088", function( assert ) {
+QUnit.test( "box model properties incorrectly returning % instead of px, see trac-10639 and trac-12088", function( assert ) {
 	assert.expect( 2 );
 
 	var container = jQuery( "<div></div>" ).width( 400 ).appendTo( "#qunit-fixture" ),
 		el = jQuery( "<div></div>" ).css( { "width": "50%", "marginRight": "50%" } ).appendTo( container ),
 		el2 = jQuery( "<div></div>" ).css( { "width": "50%", "minWidth": "300px", "marginLeft": "25%" } ).appendTo( container );
 
-	assert.equal( el.css( "marginRight" ), "200px", "css('marginRight') returning % instead of px, see #10639" );
-	assert.equal( el2.css( "marginLeft" ), "100px", "css('marginLeft') returning incorrect pixel value, see #12088" );
+	assert.equal( el.css( "marginRight" ), "200px", "css('marginRight') returning % instead of px, see trac-10639" );
+	assert.equal( el2.css( "marginLeft" ), "100px", "css('marginLeft') returning incorrect pixel value, see trac-12088" );
 } );
 
-QUnit.test( "widows & orphans #8936", function( assert ) {
+QUnit.test( "widows & orphans trac-8936", function( assert ) {
 
 	var $p = jQuery( "<p>" ).appendTo( "#qunit-fixture" );
 
@@ -1127,15 +1127,15 @@ QUnit.test( "widows & orphans #8936", function( assert ) {
 	$p.remove();
 } );
 
-QUnit.test( "can't get css for disconnected in IE<9, see #10254 and #8388", function( assert ) {
+QUnit.test( "can't get css for disconnected in IE<9, see trac-10254 and trac-8388", function( assert ) {
 	assert.expect( 2 );
 	var span, div;
 
 	span = jQuery( "<span></span>" ).css( "background-image", "url(" + baseURL + "1x1.jpg)" );
-	assert.notEqual( span.css( "background-image" ), null, "can't get background-image in IE<9, see #10254" );
+	assert.notEqual( span.css( "background-image" ), null, "can't get background-image in IE<9, see trac-10254" );
 
 	div = jQuery( "<div></div>" ).css( "top", 10 );
-	assert.equal( div.css( "top" ), "10px", "can't get top in IE<9, see #8388" );
+	assert.equal( div.css( "top" ), "10px", "can't get top in IE<9, see trac-8388" );
 } );
 
 QUnit.test( "Ensure styles are retrieving from parsed html on document fragments", function( assert ) {
@@ -1148,7 +1148,7 @@ QUnit.test( "Ensure styles are retrieving from parsed html on document fragments
 	assert.equal( $span.css( "font-size" ), "14px", "Font-size retrievable on parsed HTML node" );
 } );
 
-QUnit.test( "can't get background-position in IE<9, see #10796", function( assert ) {
+QUnit.test( "can't get background-position in IE<9, see trac-10796", function( assert ) {
 	var div = jQuery( "<div></div>" ).appendTo( "#qunit-fixture" ),
 		units = [
 			"0 0",
@@ -1167,22 +1167,22 @@ QUnit.test( "can't get background-position in IE<9, see #10796", function( asser
 
 	for ( ; i < l; i++ ) {
 		div.css( "background-position", units [ i ] );
-		assert.ok( div.css( "background-position" ), "can't get background-position in IE<9, see #10796" );
+		assert.ok( div.css( "background-position" ), "can't get background-position in IE<9, see trac-10796" );
 	}
 } );
 
 if ( jQuery.fn.offset ) {
-	QUnit.test( "percentage properties for left and top should be transformed to pixels, see #9505", function( assert ) {
+	QUnit.test( "percentage properties for left and top should be transformed to pixels, see trac-9505", function( assert ) {
 		assert.expect( 2 );
 		var parent = jQuery( "<div style='position:relative;width:200px;height:200px;margin:0;padding:0;border-width:0'></div>" ).appendTo( "#qunit-fixture" ),
 			div = jQuery( "<div style='position: absolute; width: 20px; height: 20px; top:50%; left:50%'></div>" ).appendTo( parent );
 
-		assert.equal( div.css( "top" ), "100px", "position properties not transformed to pixels, see #9505" );
-		assert.equal( div.css( "left" ), "100px", "position properties not transformed to pixels, see #9505" );
+		assert.equal( div.css( "top" ), "100px", "position properties not transformed to pixels, see trac-9505" );
+		assert.equal( div.css( "left" ), "100px", "position properties not transformed to pixels, see trac-9505" );
 	} );
 }
 
-QUnit.test( "Do not append px (#9548, #12990, #2792)", function( assert ) {
+QUnit.test( "Do not append px (trac-9548, trac-12990, gh-2792)", function( assert ) {
 	assert.expect( 4 );
 
 	var $div = jQuery( "<div>" ).appendTo( "#qunit-fixture" );
@@ -1335,16 +1335,16 @@ QUnit.test( "Append px to whitelisted properties", function( assert ) {
 	}
 } );
 
-QUnit.test( "css('width') and css('height') should respect box-sizing, see #11004", function( assert ) {
+QUnit.test( "css('width') and css('height') should respect box-sizing, see trac-11004", function( assert ) {
 	assert.expect( 4 );
 
 	var el_dis = jQuery( "<div style='width:300px;height:300px;margin:2px;padding:2px;box-sizing:border-box;'>test</div>" ),
 		el = el_dis.clone().appendTo( "#qunit-fixture" );
 
-	assert.equal( el.css( "width" ), el.css( "width", el.css( "width" ) ).css( "width" ), "css('width') is not respecting box-sizing, see #11004" );
-	assert.equal( el_dis.css( "width" ), el_dis.css( "width", el_dis.css( "width" ) ).css( "width" ), "css('width') is not respecting box-sizing for disconnected element, see #11004" );
-	assert.equal( el.css( "height" ), el.css( "height", el.css( "height" ) ).css( "height" ), "css('height') is not respecting box-sizing, see #11004" );
-	assert.equal( el_dis.css( "height" ), el_dis.css( "height", el_dis.css( "height" ) ).css( "height" ), "css('height') is not respecting box-sizing for disconnected element, see #11004" );
+	assert.equal( el.css( "width" ), el.css( "width", el.css( "width" ) ).css( "width" ), "css('width') is not respecting box-sizing, see trac-11004" );
+	assert.equal( el_dis.css( "width" ), el_dis.css( "width", el_dis.css( "width" ) ).css( "width" ), "css('width') is not respecting box-sizing for disconnected element, see trac-11004" );
+	assert.equal( el.css( "height" ), el.css( "height", el.css( "height" ) ).css( "height" ), "css('height') is not respecting box-sizing, see trac-11004" );
+	assert.equal( el_dis.css( "height" ), el_dis.css( "height", el_dis.css( "height" ) ).css( "height" ), "css('height') is not respecting box-sizing for disconnected element, see trac-11004" );
 } );
 
 QUnit.test( "table rows width/height should be unaffected by inline styles", function( assert ) {
@@ -1368,7 +1368,7 @@ QUnit.test( "table rows width/height should be unaffected by inline styles", fun
 } );
 
 testIframe(
-	"css('width') should work correctly before document ready (#14084)",
+	"css('width') should work correctly before document ready (trac-14084)",
 	"css/cssWidthBeforeDocReady.html",
 	function( assert, jQuery, window, document, cssWidthBeforeDocReady ) {
 		assert.expect( 1 );
@@ -1409,13 +1409,13 @@ function( assert, jQuery, window, document, widthBeforeSet, widthAfterSet ) {
 		"css('height') should return fractional values" );
 } );
 
-QUnit.test( "certain css values of 'normal' should be convertable to a number, see #8627", function( assert ) {
+QUnit.test( "certain css values of 'normal' should be convertable to a number, see trac-8627", function( assert ) {
 	assert.expect( 3 );
 
 	var el = jQuery( "<div style='letter-spacing:normal;font-weight:normal;'>test</div>" ).appendTo( "#qunit-fixture" );
 
-	assert.ok( !isNaN( parseFloat( el.css( "letterSpacing" ) ) ), "css('letterSpacing') not convertable to number, see #8627" );
-	assert.ok( !isNaN( parseFloat( el.css( "fontWeight" ) ) ), "css('fontWeight') not convertable to number, see #8627" );
+	assert.ok( !isNaN( parseFloat( el.css( "letterSpacing" ) ) ), "css('letterSpacing') not convertable to number, see trac-8627" );
+	assert.ok( !isNaN( parseFloat( el.css( "fontWeight" ) ) ), "css('fontWeight') not convertable to number, see trac-8627" );
 	assert.equal( typeof el.css( "fontWeight" ), "string", ".css() returns a string" );
 } );
 
@@ -1459,7 +1459,7 @@ QUnit.test( "cssHooks - expand", function( assert ) {
 
 } );
 
-QUnit.test( "css opacity consistency across browsers (#12685)", function( assert ) {
+QUnit.test( "css opacity consistency across browsers (trac-12685)", function( assert ) {
 	assert.expect( 3 );
 
 	var el,
@@ -1487,8 +1487,8 @@ QUnit.test( "css opacity consistency across browsers (#12685)", function( assert
 	assert.ok( !jQuery( "#nothiddendiv" ).is( ":visible" ), "Modified CSS display: Assert element is hidden" );
 	jQuery( "#nothiddendiv" ).css( { "display": "block" } );
 	assert.ok( jQuery( "#nothiddendiv" ).is( ":visible" ), "Modified CSS display: Assert element is visible" );
-	assert.ok( !jQuery( window ).is( ":visible" ), "Calling is(':visible') on window does not throw an exception (#10267)." );
-	assert.ok( !jQuery( document ).is( ":visible" ), "Calling is(':visible') on document does not throw an exception (#10267)." );
+	assert.ok( !jQuery( window ).is( ":visible" ), "Calling is(':visible') on window does not throw an exception (trac-10267)." );
+	assert.ok( !jQuery( document ).is( ":visible" ), "Calling is(':visible') on document does not throw an exception (trac-10267)." );
 
 	assert.ok( jQuery( "#nothiddendiv" ).is( ":visible" ), "Modifying CSS display: Assert element is visible" );
 	jQuery( "#nothiddendiv" ).css( "display", "none" );
@@ -1507,9 +1507,9 @@ QUnit.test( "css opacity consistency across browsers (#12685)", function( assert
 
 	$table = jQuery( "#table" );
 	$table.html( "<tr><td style='display:none'>cell</td><td>cell</td></tr>" );
-	assert.equal( jQuery( "#table td:visible" ).length, 1, "hidden cell is not perceived as visible (#4512). Works on table elements" );
+	assert.equal( jQuery( "#table td:visible" ).length, 1, "hidden cell is not perceived as visible (trac-4512). Works on table elements" );
 	$table.css( "display", "none" ).html( "<tr><td>cell</td><td>cell</td></tr>" );
-	assert.equal( jQuery( "#table td:visible" ).length, 0, "hidden cell children not perceived as visible (#4512)" );
+	assert.equal( jQuery( "#table td:visible" ).length, 0, "hidden cell children not perceived as visible (trac-4512)" );
 
 	if ( QUnit.jQuerySelectorsPos ) {
 		assert.t( "Is Visible", "#qunit-fixture div:visible:lt(2)", [ "foo", "nothiddendiv" ] );
@@ -1524,7 +1524,7 @@ QUnit.test( "css opacity consistency across browsers (#12685)", function( assert
 	assert.ok( $a.is( ":visible" ), "Anchor tag with flow content is visible (gh-2227)" );
 } );
 
-QUnit.test( "Keep the last style if the new one isn't recognized by the browser (#14836)", function( assert ) {
+QUnit.test( "Keep the last style if the new one isn't recognized by the browser (trac-14836)", function( assert ) {
 	assert.expect( 1 );
 
 	var el = jQuery( "<div></div>" ).css( "position", "absolute" ).css( "position", "fake value" );
@@ -1551,46 +1551,38 @@ QUnit.test( "Reset the style if set to an empty string", function( assert ) {
 } );
 
 QUnit.test(
-	"Clearing a Cloned Element's Style Shouldn't Clear the Original Element's Style (#8908)",
+	"Clearing a Cloned Element's Style Shouldn't Clear the Original Element's Style (trac-8908)",
 	function( assert ) {
 		assert.expect( 24 );
 		var done = assert.async();
 		var styles = [ {
 				name: "backgroundAttachment",
-				value: [ "fixed" ],
-				expected: [ "scroll" ]
+				value: [ "fixed" ]
 			}, {
 				name: "backgroundColor",
-				value: [ "rgb(255, 0, 0)", "rgb(255,0,0)", "#ff0000" ],
-				expected: [ "transparent" ]
+				value: [ "rgb(255, 0, 0)", "rgb(255,0,0)", "#ff0000" ]
 			}, {
 
 				// Firefox returns auto's value
 				name: "backgroundImage",
-				value: [ "url('test.png')", "url(" + baseURL + "test.png)", "url(\"" + baseURL + "test.png\")" ],
-				expected: [ "none", "url(\"https://static.jquery.com/files/rocker/images/logo_jquery_215x53.gif\")" ]
+				value: [ "url('test.png')", "url(" + baseURL + "test.png)", "url(\"" + baseURL + "test.png\")" ]
 			}, {
 				name: "backgroundPosition",
-				value: [ "5% 5%" ],
-				expected: [ "0% 0%", "-1000px 0px", "-1000px 0%" ]
+				value: [ "5% 5%" ]
 			}, {
 
 				// Firefox returns no-repeat
 				name: "backgroundRepeat",
-				value: [ "repeat-y" ],
-				expected: [ "repeat", "no-repeat" ]
+				value: [ "repeat-y" ]
 			}, {
 				name: "backgroundClip",
-				value: [ "padding-box" ],
-				expected: [ "border-box" ]
+				value: [ "padding-box" ]
 			}, {
 				name: "backgroundOrigin",
-				value: [ "content-box" ],
-				expected: [ "padding-box" ]
+				value: [ "content-box" ]
 			}, {
 				name: "backgroundSize",
-				value: [ "80px 60px" ],
-				expected: [ "auto auto" ]
+				value: [ "80px 60px" ]
 		} ];
 
 		jQuery.each( styles, function( index, style ) {
@@ -1599,8 +1591,6 @@ function( assert ) {
 				source = $source[ 0 ],
 				$children = $source.children();
 
-			style.expected = style.expected.concat( [ "", "auto" ] );
-
 			if ( source.style[ style.name ] === undefined ) {
 				assert.ok( true, style.name +  ": style isn't supported and therefore not an issue" );
 				assert.ok( true );
@@ -1636,7 +1626,7 @@ function( assert ) {
 	}
 );
 
-QUnit.test( "Don't append px to CSS \"order\" value (#14049)", function( assert ) {
+QUnit.test( "Don't append px to CSS \"order\" value (trac-14049)", function( assert ) {
 	assert.expect( 1 );
 
 	var $elem = jQuery( "<div></div>" );
@@ -1645,7 +1635,7 @@ QUnit.test( "Don't append px to CSS \"order\" value (#14049)", function( assert
 	assert.equal( $elem.css( "order" ), "2", "2 on order" );
 } );
 
-QUnit.test( "Do not throw on frame elements from css method (#15098)", function( assert ) {
+QUnit.test( "Do not throw on frame elements from css method (trac-15098)", function( assert ) {
 	assert.expect( 1 );
 
 	var frameWin, frameDoc,
@@ -1748,9 +1738,16 @@ jQuery( "#qunit-fixture" ).append(
 		"    .test__customProperties {\n" +
 		"        --prop1:val1;\n" +
 		"        --prop2: val2;\n" +
-		"        --prop3:val3 ;\n" +
-		"        --prop4:\"val4\";\n" +
-		"        --prop5:'val5';\n" +
+		"        --prop3:   val3;\n" +
+		"        --prop4:val4 ;\n" +
+		"        --prop5:val5   ;\n" +
+		"        --prop6: val6 ;\n" +
+		"        --prop7:   val7   ;\n" +
+		"        --prop8:\"val8\";\n" +
+		"        --prop9:'val9';\n" +
+		"        --prop10:\f\r\n\t val10 \f\r\n\t;\n" +
+		"        --prop11:\u000C\u000D\u000A\u0009\u0020val11\u0020\u0009\u000A\u000D\u000C;\n" +
+		"        --prop12:\u000Bval12\u000B;\n" +
 		"    }\n" +
 		"</style>"
 	);
@@ -1759,7 +1756,7 @@ jQuery( "#qunit-fixture" ).append(
 		$elem = jQuery( "<div>" ).addClass( "test__customProperties" )
 			.appendTo( "#qunit-fixture" ),
 		webkitOrBlink = /\bsafari\b/i.test( navigator.userAgent ),
-		expected = 10;
+		expected = 17;
 
 	if ( webkitOrBlink ) {
 		expected -= 2;
@@ -1787,16 +1784,24 @@ jQuery( "#qunit-fixture" ).append(
 
 	assert.equal( $elem.css( "--prop1" ), "val1", "Basic CSS custom property" );
 
-	assert.equal( $elem.css( "--prop2" ), " val2", "Preceding whitespace maintained" );
-	assert.equal( $elem.css( "--prop3" ), "val3 ", "Following whitespace maintained" );
+	assert.equal( $elem.css( "--prop2" ), "val2", "Preceding whitespace trimmed" );
+	assert.equal( $elem.css( "--prop3" ), "val3", "Multiple preceding whitespace trimmed" );
+	assert.equal( $elem.css( "--prop4" ), "val4", "Following whitespace trimmed" );
+	assert.equal( $elem.css( "--prop5" ), "val5", "Multiple Following whitespace trimmed" );
+	assert.equal( $elem.css( "--prop6" ), "val6", "Preceding and Following whitespace trimmed" );
+	assert.equal( $elem.css( "--prop7" ), "val7", "Multiple preceding and following whitespace trimmed" );
 
 	// Support: Chrome <=49 - 73+, Safari <=9.1 - 12.1+
 	// Chrome treats single quotes as double ones.
 	// Safari treats double quotes as single ones.
 	if ( !webkitOrBlink ) {
-		assert.equal( $elem.css( "--prop4" ), "\"val4\"", "Works with double quotes" );
-		assert.equal( $elem.css( "--prop5" ), "'val5'", "Works with single quotes" );
+		assert.equal( $elem.css( "--prop8" ), "\"val8\"", "Works with double quotes" );
+		assert.equal( $elem.css( "--prop9" ), "'val9'", "Works with single quotes" );
 	}
+
+	assert.equal( $elem.css( "--prop10" ), "val10", "Multiple preceding and following escaped unicode whitespace trimmed" );
+	assert.equal( $elem.css( "--prop11" ), "val11", "Multiple preceding and following unicode whitespace trimmed" );
+	assert.equal( $elem.css( "--prop12" ), "\u000Bval12\u000B", "Multiple preceding and following non-CSS whitespace reserved" );
 } );
 
 // IE doesn't support CSS variables.
diff --git a/a.js b/b.js
index 48ee8d17..0c66d385 100644
--- a/a.js
+++ b/b.js
@@ -369,15 +369,15 @@ handlers: function( event, handlers ) {
 
 			for ( ; cur !== this; cur = cur.parentNode || this ) {
 
-				// Don't check non-elements (#13208)
-				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
+				// Don't check non-elements (trac-13208)
+				// Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)
 				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
 					matchedHandlers = [];
 					matchedSelectors = {};
 					for ( i = 0; i < delegateCount; i++ ) {
 						handleObj = handlers[ i ];
 
-						// Don't conflict with Object.prototype properties (#13203)
+						// Don't conflict with Object.prototype properties (trac-13203)
 						sel = handleObj.selector + " ";
 
 						if ( matchedSelectors[ sel ] === undefined ) {
@@ -746,10 +746,10 @@ stopImmediatePropagation: function() {
 			return true;
 		},
 
-		// Suppress native focus or blur as it's already being fired
-		// in leverageNative.
-		_default: function() {
-			return true;
+		// Suppress native focus or blur if we're currently inside
+		// a leveraged native-event stack
+		_default: function( event ) {
+			return dataPriv.get( event.target, type );
 		},
 
 		delegateType: delegateType
diff --git a/a.js b/b.js
index edd9ecae..8ca06ced 100644
--- a/a.js
+++ b/b.js
@@ -8,7 +8,7 @@ beforeEach: function() {
 QUnit.test( "null or undefined handler", function( assert ) {
 	assert.expect( 4 );
 
-	// Supports Fixes bug #7229
+	// Supports Fixes bug trac-7229
 	try {
 		jQuery( "#firstp" ).on( "click", null );
 		assert.ok( true, "Passing a null handler will not throw an exception" );
@@ -484,7 +484,7 @@ 		neverCallMe = function() {
 QUnit.test( "on(), iframes", function( assert ) {
 	assert.expect( 1 );
 
-	// events don't work with iframes, see #939 - this test fails in IE because of contentDocument
+	// events don't work with iframes, see trac-939 - this test fails in IE because of contentDocument
 	var doc = jQuery( "#loadediframe" ).contents();
 
 	jQuery( "div", doc ).on( "click", function() {
@@ -552,7 +552,7 @@ jQuery( "#nonnodes" ).contents().on( "tester", function() {
 		assert.equal( this.nodeType, 1, "Check node,textnode,comment on just does real nodes" );
 	} ).trigger( "tester" );
 
-	// Make sure events stick with appendTo'd elements (which are cloned) #2027
+	// Make sure events stick with appendTo'd elements (which are cloned) trac-2027
 	jQuery( "<a href='#fail' class='test'>test</a>" ).on( "click", function() { return false; } ).appendTo( "#qunit-fixture" );
 	assert.ok( jQuery( "a.test" ).eq( 0 ).triggerHandler( "click" ) === false, "Handler is bound to appendTo'd elements" );
 } );
@@ -589,7 +589,7 @@ jQuery( "#firstp" ).on( "click.test.abc", function() {
 		check( "click.test.abc", "Namespaced click triggered" );
 	} );
 
-	// Those would not trigger/off (#5303)
+	// Those would not trigger/off (trac-5303)
 	jQuery( "#firstp" ).trigger( "click.a.test" );
 	jQuery( "#firstp" ).off( "click.a.test" );
 
@@ -812,7 +812,7 @@ QUnit.test( "off(type)", function( assert ) {
 		.off( "error1 error2", error )
 		.trigger( "error1" ).triggerHandler( "error2" );
 
-	message = "unbind many"; // #3538
+	message = "unbind many"; // trac-3538
 	$elem.on( "error1 error2", error )
 		.off( "error1 error2" )
 		.trigger( "error1" ).triggerHandler( "error2" );
@@ -1041,7 +1041,7 @@ 	$elem[ 0 ].click = function() {
 	} catch ( e ) {
 		pass = false;
 	}
-	assert.ok( pass, "Trigger on a table with a colon in the even type, see #3533" );
+	assert.ok( pass, "Trigger on a table with a colon in the even type, see trac-3533" );
 
 	form = jQuery( "<form action=''></form>" ).appendTo( "body" );
 
@@ -1069,7 +1069,7 @@ jQuery( document ).on( "submit", function() {
 	form.remove();
 } );
 
-QUnit.test( "submit event bubbles on copied forms (#11649)", function( assert ) {
+QUnit.test( "submit event bubbles on copied forms (trac-11649)", function( assert ) {
 	assert.expect( 3 );
 
 	var $formByClone, $formByHTML,
@@ -1105,7 +1105,7 @@ QUnit.test( "submit event bubbles on copied forms (#11649)", function( assert )
 	$testForm.off( "submit", noSubmit );
 } );
 
-QUnit.test( "change event bubbles on copied forms (#11796)", function( assert ) {
+QUnit.test( "change event bubbles on copied forms (trac-11796)", function( assert ) {
 	assert.expect( 3 );
 
 	var $formByClone, $formByHTML,
@@ -1227,7 +1227,7 @@ QUnit.test( "trigger(eventObject, [data], [fn])", function( assert ) {
 	assert.equal( event.isDefaultPrevented(), false, "default not prevented" );
 } );
 
-QUnit.test( ".trigger() bubbling on disconnected elements (#10489)", function( assert ) {
+QUnit.test( ".trigger() bubbling on disconnected elements (trac-10489)", function( assert ) {
 	assert.expect( 2 );
 
 	jQuery( window ).on( "click", function() {
@@ -1251,7 +1251,7 @@ jQuery( "<div><p>hi</p></div>" )
 	jQuery( window ).off( "click" );
 } );
 
-QUnit.test( ".trigger() doesn't bubble load event (#10717)", function( assert ) {
+QUnit.test( ".trigger() doesn't bubble load event (trac-10717)", function( assert ) {
 	assert.expect( 1 );
 
 	jQuery( window ).on( "load", function() {
@@ -1269,7 +1269,7 @@ jQuery( "<img src='" + baseURL + "1x1.jpg' />" )
 	jQuery( window ).off( "load" );
 } );
 
-QUnit.test( "Delegated events in SVG (#10791; #13180)", function( assert ) {
+QUnit.test( "Delegated events in SVG (trac-10791; trac-13180)", function( assert ) {
 	assert.expect( 2 );
 
 	var useElem, e,
@@ -1295,7 +1295,7 @@ jQuery( "#qunit-fixture" )
 		.end();
 
 	// Fire a native click on an SVGElementInstance (the instance tree of an SVG <use>)
-	// to confirm that it doesn't break our event delegation handling (#13180)
+	// to confirm that it doesn't break our event delegation handling (trac-13180)
 	useElem = svg.find( "#use" )[ 0 ];
 	if ( document.createEvent && useElem && useElem.instanceRoot ) {
 		e = document.createEvent( "MouseEvents" );
@@ -1321,7 +1321,7 @@ QUnit.test( "Delegated events with malformed selectors (gh-3071)", function( ass
 	assert.ok( true, "malformed selector does not throw on event" );
 } );
 
-QUnit.test( "Delegated events in forms (#10844; #11145; #8165; #11382, #11764)", function( assert ) {
+QUnit.test( "Delegated events in forms (trac-10844; trac-11145; trac-8165; trac-11382, trac-11764)", function( assert ) {
 	assert.expect( 5 );
 
 	// Alias names like "id" cause havoc
@@ -1376,7 +1376,7 @@ jQuery( "body" )
 	form.remove();
 } );
 
-QUnit.test( "Submit event can be stopped (#11049)", function( assert ) {
+QUnit.test( "Submit event can be stopped (trac-11049)", function( assert ) {
 	assert.expect( 1 );
 
 	// Since we manually bubble in IE, make sure inner handlers get a chance to cancel
@@ -1450,7 +1450,7 @@ 			handler = function( event ) {
 	assert.equal( event.type, "keydown", "Verify type" );
 
 	// ensure "type" in props won't clobber the one set by constructor
-	assert.equal( jQuery.inArray( "type", jQuery.event.props ), -1, "'type' property not in props (#10375)" );
+	assert.equal( jQuery.inArray( "type", jQuery.event.props ), -1, "'type' property not in props (trac-10375)" );
 
 	assert.ok( "keyCode" in event, "Special 'keyCode' property exists" );
 
@@ -1844,7 +1844,7 @@ function( assert ) {
 	assert.expect( 3 );
 	var markup = jQuery( "<div><ul><li><a id=\"a0\"></a><ul id=\"ul0\"><li class=test><a id=\"a0_0\"></a></li><li><a id=\"a0_1\"></a></li></ul></li></ul></div>" ).appendTo( "#qunit-fixture" );
 
-	// Non-positional selector (#12383)
+	// Non-positional selector (trac-12383)
 	markup.find( "#ul0" )
 		.on( "click", "div li a", function() {
 			assert.ok( false, "div is ABOVE the delegation point!" );
@@ -1859,7 +1859,7 @@ function( assert ) {
 		.off( "click" );
 
 	if ( QUnit.jQuerySelectorsPos ) {
-		// Positional selector (#11315)
+		// Positional selector (trac-11315)
 		markup.find( "ul" ).eq( 0 )
 			.on( "click", ">li>a", function() {
 				assert.ok( this.id === "a0", "child li was clicked" );
@@ -1879,7 +1879,7 @@ function( assert ) {
 	markup.remove();
 } );
 
-QUnit.test( "delegated event with selector matching Object.prototype property (#13203)", function( assert ) {
+QUnit.test( "delegated event with selector matching Object.prototype property (trac-13203)", function( assert ) {
 	assert.expect( 1 );
 
 	var matched = 0;
@@ -1893,7 +1893,7 @@ jQuery( "#foo" ).on( "click", "toString", function() {
 	assert.equal( matched, 0, "Nothing matched 'toString'" );
 } );
 
-QUnit.test( "delegated event with intermediate DOM manipulation (#13208)", function( assert ) {
+QUnit.test( "delegated event with intermediate DOM manipulation (trac-13208)", function( assert ) {
 	assert.expect( 1 );
 
 	jQuery( "#foo" ).on( "click", "[id=sap]", function() {} );
@@ -2187,7 +2187,7 @@ jQuery( "body" ).on( "focusin.focusinBubblesTest", function() {
 	jQuery( "body" ).off( "focusin.focusinBubblesTest" );
 } );
 
-QUnit.test( "custom events with colons (#3533, #8272)", function( assert ) {
+QUnit.test( "custom events with colons (trac-3533, trac-8272)", function( assert ) {
 	assert.expect( 1 );
 
 	var tab = jQuery( "<table><tr><td>trigger</td></tr></table>" ).appendTo( "body" );
@@ -2370,7 +2370,7 @@ jQuery( "<p>Gut Feeling</p>" )
 	delete jQuery.event.special[ "gutfeeling" ];
 } );
 
-QUnit.test( ".on and .off, selective mixed removal (#10705)", function( assert ) {
+QUnit.test( ".on and .off, selective mixed removal (trac-10705)", function( assert ) {
 	assert.expect( 7 );
 
 	var timingx = function( e ) {
@@ -2392,7 +2392,7 @@ jQuery( "<p>Strange Pursuit</p>" )
 		.trigger( "click" );	// 0
 } );
 
-QUnit.test( ".on( event-map, null-selector, data ) #11130", function( assert ) {
+QUnit.test( ".on( event-map, null-selector, data ) trac-11130", function( assert ) {
 
 	assert.expect( 1 );
 
@@ -2408,7 +2408,7 @@ QUnit.test( ".on( event-map, null-selector, data ) #11130", function( assert ) {
 	$p.on( map, null, data ).trigger( "foo" );
 } );
 
-QUnit.test( "clone() delegated events (#11076)", function( assert ) {
+QUnit.test( "clone() delegated events (trac-11076)", function( assert ) {
 	assert.expect( 3 );
 
 	var counter = { "center": 0, "fold": 0, "centerfold": 0 },
@@ -2745,7 +2745,7 @@ QUnit.test( "trigger click on checkbox, fires change event", function( assert )
 	} ).trigger( "click" );
 } );
 
-QUnit.test( "Namespace preserved when passed an Event (#12739)", function( assert ) {
+QUnit.test( "Namespace preserved when passed an Event (trac-12739)", function( assert ) {
 	assert.expect( 4 );
 
 	var markup = jQuery(
@@ -2833,7 +2833,7 @@ QUnit.test( "make sure events cloned correctly", function( assert ) {
 	clone.find( "#check1" ).trigger( "change" ); // 0 events should fire
 } );
 
-QUnit.test( "String.prototype.namespace does not cause trigger() to throw (#13360)", function( assert ) {
+QUnit.test( "String.prototype.namespace does not cause trigger() to throw (trac-13360)", function( assert ) {
 	assert.expect( 1 );
 	var errored = false;
 
@@ -2848,7 +2848,7 @@ QUnit.test( "String.prototype.namespace does not cause trigger() to throw (#1336
 	delete String.prototype.namespace;
 } );
 
-QUnit.test( "Inline event result is returned (#13993)", function( assert ) {
+QUnit.test( "Inline event result is returned (trac-13993)", function( assert ) {
 	assert.expect( 1 );
 
 	var result = jQuery( "<p onclick='return 42'>hello</p>" ).triggerHandler( "click" );
@@ -3137,7 +3137,7 @@ setTimeout( function() {
 	}, 50 );
 } );
 
-QUnit.test( "focus-blur order (#12868)", function( assert ) {
+QUnit.test( "focus-blur order (trac-12868)", function( assert ) {
 	assert.expect( 5 );
 
 	var order,
@@ -3325,6 +3325,22 @@ setTimeout( function() {
 	} );
 } );
 
+QUnit.test( "trigger(focus) works after .on(focus).off(focus) (gh-4867)", function( assert ) {
+	assert.expect( 1 );
+
+	var input = jQuery( "<input />" );
+
+	input.appendTo( "#qunit-fixture" );
+
+	input
+		.on( "focus", function() {} )
+		.off( "focus" );
+
+	input.trigger( "focus" );
+
+	assert.equal( document.activeElement, input[ 0 ], "input has focus" );
+} );
+
 // TODO replace with an adaptation of
 // https://github.com/jquery/jquery/pull/1367/files#diff-a215316abbaabdf71857809e8673ea28R2464
 ( function() {
diff --git a/a.js b/b.js
index 165d3318..ea6a5d2b 100644
--- a/a.js
+++ b/b.js
@@ -7,6 +7,10 @@
 /**
  * Keep in sync with /test/mock.php
  */
+function cleanCallback( callback ) {
+	return callback.replace( /[^a-z0-9_]/gi, "" );
+}
+
 var mocks = {
 	contentType: function( req, resp ) {
 		resp.writeHead( 200, {
@@ -73,7 +77,7 @@ script: function( req, resp ) {
 		}
 
 		if ( req.query.callback ) {
-			resp.end( req.query.callback + "(" + JSON.stringify( {
+			resp.end( cleanCallback( req.query.callback ) + "(" + JSON.stringify( {
 				headers: req.headers
 			} ) + ")" );
 		} else {
@@ -126,14 +130,14 @@ jsonp: function( req, resp, next ) {
 				{ data: { lang: "en", length: 25 } }
 			);
 		callback.then( function( cb ) {
-			resp.end( cb + "(" + json + ")" );
+			resp.end( cleanCallback( cb ) + "(" + json + ")" );
 		}, next );
 	},
 	xmlOverJsonp: function( req, resp ) {
 		var callback = req.query.callback;
 		var body = fs.readFileSync( __dirname + "/data/with_fries.xml" ).toString();
 		resp.writeHead( 200 );
-		resp.end( callback + "(" + JSON.stringify( body ) + ")\n" );
+		resp.end( cleanCallback( callback ) + "(" + JSON.stringify( body ) + ")\n" );
 	},
 	error: function( req, resp ) {
 		if ( req.query.json ) {
@@ -218,7 +222,7 @@ testHTML: function( req, resp ) {
 	cspFrame: function( req, resp ) {
 		resp.writeHead( 200, {
 			"Content-Type": "text/html",
-			"Content-Security-Policy": "default-src 'self'; report-uri /base/test/data/mock.php?action=cspLog"
+			"Content-Security-Policy": "default-src 'self'; require-trusted-types-for 'script'; report-uri /base/test/data/mock.php?action=cspLog"
 		} );
 		var body = fs.readFileSync( __dirname + "/data/csp.include.html" ).toString();
 		resp.end( body );
@@ -252,14 +256,31 @@ cspClean: function( req, resp ) {
 		resp.writeHead( 200 );
 		resp.end();
 	},
+	trustedHtml: function( req, resp ) {
+		resp.writeHead( 200, {
+			"Content-Type": "text/html",
+			"Content-Security-Policy": "require-trusted-types-for 'script'; report-uri /base/test/data/mock.php?action=cspLog"
+		} );
+		var body = fs.readFileSync( __dirname + "/data/trusted-html.html" ).toString();
+		resp.end( body );
+	},
+	trustedTypesAttributes: function( req, resp ) {
+		resp.writeHead( 200, {
+			"Content-Type": "text/html",
+			"Content-Security-Policy": "require-trusted-types-for 'script'; report-uri /base/test/data/mock.php?action=cspLog"
+		} );
+		var body = fs.readFileSync( __dirname + "/data/trusted-types-attributes.html" ).toString();
+		resp.end( body );
+	},
 	errorWithScript: function( req, resp ) {
 		if ( req.query.withScriptContentType ) {
 			resp.writeHead( 404, { "Content-Type": "application/javascript" } );
 		} else {
-			resp.writeHead( 404 );
+			resp.writeHead( 404, { "Content-Type": "text/html; charset=UTF-8" } );
 		}
 		if ( req.query.callback ) {
-			resp.end( req.query.callback + "( {\"status\": 404, \"msg\": \"Not Found\"} )" );
+			resp.end( cleanCallback( req.query.callback ) +
+				"( {\"status\": 404, \"msg\": \"Not Found\"} )" );
 		} else {
 			resp.end( "QUnit.assert.ok( false, \"Mock return erroneously executed\" );" );
 		}
diff --git a/a.js b/b.js
index b11b801c..2b0c251c 100644
--- a/a.js
+++ b/b.js
@@ -55,10 +55,10 @@ QUnit.test( "element", function( assert ) {
 	assert.deepEqual( jQuery( "p", jQuery( "#qunit-fixture" ) ).get(), q( "firstp", "ap", "sndp", "en", "sap", "first" ), "Finding elements with a jQuery object context." );
 	assert.deepEqual( jQuery( "#qunit-fixture" ).find( "p" ).get(), q( "firstp", "ap", "sndp", "en", "sap", "first" ), "Finding elements with a context via .find()." );
 
-	assert.ok( jQuery( "#length" ).length, "<input name=\"length\"> cannot be found under IE, see #945" );
-	assert.ok( jQuery( "#lengthtest input" ).length, "<input name=\"length\"> cannot be found under IE, see #945" );
+	assert.ok( jQuery( "#length" ).length, "<input name=\"length\"> cannot be found under IE, see trac-945" );
+	assert.ok( jQuery( "#lengthtest input" ).length, "<input name=\"length\"> cannot be found under IE, see trac-945" );
 
-	// #7533
+	// trac-7533
 	assert.equal( jQuery( "<div id=\"A'B~C.D[E]\"><p>foo</p></div>" ).find( "p" ).length, 1, "Find where context root is a node and has an ID with CSS3 meta characters" );
 
 	assert.equal( jQuery( "" ).length, 0, "Empty selector returns an empty array" );
@@ -142,7 +142,8 @@ QUnit.test( "element", function( assert ) {
 		"No stack or performance problems with large amounts of descendants" );
 	html.remove();
 
-	// Real use case would be using .watch in browsers with window.watch (see Issue #157)
+	// Real use case would be using .watch in browsers with window.watch
+	// (see https://github.com/jquery/sizzle/pull/157)
 	q( "qunit-fixture" )[ 0 ].appendChild( document.createElement( "toString" ) ).id = "toString";
 	assert.t( "Element name matches Object.prototype property", "toString#toString", [ "toString" ] );
 } );
@@ -169,7 +170,7 @@ QUnit.test( "XML Document Selectors", function( assert ) {
 		xml = jQuery.parseXML( "<?xml version='1.0' encoding='UTF-8'?><root><elem id='1'/></root>" );
 
 		assert.equal( jQuery( "elem:not(:has(*))", xml ).length, 1,
-			"Non-qSA path correctly handles numeric ids (jQuery #14142)" );
+			"Non-qSA path correctly handles numeric ids (jQuery trac-14142)" );
 	} else {
 		assert.ok( "skip", "namespaced elements not matching correctly in selector-native" );
 		assert.ok( "skip", ":not(complex selector) not supported in selector-native" );
@@ -214,7 +215,7 @@ QUnit.test( "broken selectors throw", function( assert ) {
 	broken( "Last-last-child", ":last-last-child" );
 	broken( "Only-last-child", ":only-last-child" );
 
-	// Make sure attribute value quoting works correctly. See: #6093
+	// Make sure attribute value quoting works correctly. See: trac-6093
 	jQuery( "<input type='hidden' value='2' name='foo.baz' id='attrbad1'/>" +
 		"<input type='hidden' value='2' name='foo[baz]' id='attrbad2'/>" )
 		.appendTo( "#qunit-fixture" );
@@ -267,7 +268,7 @@ QUnit.test( "id", function( assert ) {
 
 	fiddle.remove();
 
-	assert.t( "ID Selector, child ID present", "#form > #radio1", [ "radio1" ] ); // bug #267
+	assert.t( "ID Selector, child ID present", "#form > #radio1", [ "radio1" ] ); // bug trac-267
 	assert.t( "ID Selector, not an ancestor ID", "#form #first", [] );
 	assert.t( "ID Selector, not a child ID", "#form > #option1a", [] );
 
@@ -288,7 +289,7 @@ QUnit.test( "id", function( assert ) {
 
 	assert.t( "ID Selector on Form with an input that has a name of 'id'", "#lengthtest", [ "lengthtest" ] );
 
-	assert.t( "ID selector with non-existent ancestor", "#asdfasdf #foobar", [] ); // bug #986
+	assert.t( "ID selector with non-existent ancestor", "#asdfasdf #foobar", [] ); // bug trac-986
 
 	assert.deepEqual( jQuery( "div#form", document.body ).get(), [],
 		"ID selector within the context of another element" );
@@ -485,7 +486,7 @@ QUnit.test( "child and adjacent", function( assert ) {
 	}
 
 	if ( QUnit.jQuerySelectorsPos ) {
-		assert.equal( jQuery( "#listWithTabIndex li:eq(2) ~ li" ).length, 1, "Find by general sibling combinator (#8310)" );
+		assert.equal( jQuery( "#listWithTabIndex li:eq(2) ~ li" ).length, 1, "Find by general sibling combinator (trac-8310)" );
 
 		nothiddendiv = document.getElementById( "nothiddendiv" );
 		assert.deepEqual( jQuery( "> :first", nothiddendiv ).get(), q( "nothiddendivchild" ),
@@ -505,9 +506,9 @@ QUnit.test( "child and adjacent", function( assert ) {
 	assert.t( "Multiple combinators selects all levels", "#siblingTest > em *", [ "siblingchild", "siblinggrandchild", "siblinggreatgrandchild" ] );
 	assert.t( "Multiple sibling combinators doesn't miss general siblings", "#siblingTest > em:first-child + em ~ span", [ "siblingspan" ] );
 
-	assert.equal( jQuery( "#listWithTabIndex" ).length, 1, "Parent div for next test is found via ID (#8310)" );
-	assert.equal( jQuery( "#__sizzle__" ).length, 0, "Make sure the temporary id assigned by sizzle is cleared out (#8310)" );
-	assert.equal( jQuery( "#listWithTabIndex" ).length, 1, "Parent div for previous test is still found via ID (#8310)" );
+	assert.equal( jQuery( "#listWithTabIndex" ).length, 1, "Parent div for next test is found via ID (trac-8310)" );
+	assert.equal( jQuery( "#__sizzle__" ).length, 0, "Make sure the temporary id assigned by sizzle is cleared out (trac-8310)" );
+	assert.equal( jQuery( "#listWithTabIndex" ).length, 1, "Parent div for previous test is still found via ID (trac-8310)" );
 
 	assert.t( "Verify deep class selector", "div.blah > p > a", [] );
 	assert.t( "No element deep selector", "div.foo > span > a", [] );
@@ -555,7 +556,7 @@ QUnit.test( "attributes - equals", function( assert ) {
 	assert.t( "input[type=search]", "#form input[type=search]", [ "search" ] );
 
 	withScript = supportjQuery( "<div><span><script src=''></script></span></div>" );
-	assert.ok( withScript.find( "#moretests script[src]" ).has( "script" ), "script[src] (jQuery #13777)" );
+	assert.ok( withScript.find( "#moretests script[src]" ).has( "script" ), "script[src] (jQuery trac-13777)" );
 
 	assert.t( "Boolean attribute equals name", "#select2 option[selected='selected']", [ "option2d" ] );
 	assert.t( "for Attribute in form", "#form [for=action]", [ "label-for" ] );
@@ -642,7 +643,7 @@ QUnit.test( "attributes - special characters", function( assert ) {
 	var attrbad;
 	var div = document.createElement( "div" );
 
-	// trac-3279
+	// trac-3729
 	div.innerHTML = "<div id='foo' xml:test='something'></div>";
 	assert.deepEqual( jQuery( "[xml\\:test]", div ).get(),
 		[ div.firstChild ],
@@ -741,7 +742,7 @@ QUnit.test( "attributes - others", function( assert ) {
 	assert.t( "Object.prototype property \"constructor\"", "[constructor='foo']", [ "foo" ] );
 	assert.t( "Gecko Object.prototype property \"watch\"", "[watch='bar']", [ "foo" ] );
 
-	// #11115
+	// trac-11115
 	assert.ok( jQuery( "<input type='checkbox' checked='checked'/>" ).prop( "checked", false ).is( "[checked]" ),
 		"[checked] selects by attribute (positive)"
 	);
@@ -1137,14 +1138,14 @@ QUnit.test( "pseudo - :not", function( assert ) {
 	assert.t( ":not() failing interior", "#qunit-fixture p:not(.foo)", [ "firstp", "ap", "sndp", "en", "sap", "first" ] );
 	assert.t( ":not() failing interior", "#qunit-fixture p:not(#blargh)", [ "firstp", "ap", "sndp", "en", "sap", "first" ] );
 
-	if ( QUnit.jQuerySelectors || this.safari ) {
+	if ( QUnit.jQuerySelectors || !QUnit.isIE ) {
 		assert.t( ":not() failing interior", "#qunit-fixture p:not(div.foo)", [ "firstp", "ap", "sndp", "en", "sap", "first" ] );
 		assert.t( ":not() failing interior", "#qunit-fixture p:not(p.foo)", [ "firstp", "ap", "sndp", "en", "sap", "first" ] );
 		assert.t( ":not() failing interior", "#qunit-fixture p:not(div#blargh)", [ "firstp", "ap", "sndp", "en", "sap", "first" ] );
 		assert.t( ":not() failing interior", "#qunit-fixture p:not(p#blargh)", [ "firstp", "ap", "sndp", "en", "sap", "first" ] );
 	} else {
-		// Support: Chrome 75+, Firefox 67+
-		// Chrome/Firefox don't support `:not(complex selector)`.
+		// Support: IE 11+
+		// IE doesn't support `:not(complex selector)`.
 		assert.ok( "skip", ":not(complex selector) not supported in selector-native" );
 		assert.ok( "skip", ":not(complex selector) not supported in selector-native" );
 		assert.ok( "skip", ":not(complex selector) not supported in selector-native" );
@@ -1156,15 +1157,15 @@ QUnit.test( "pseudo - :not", function( assert ) {
 	assert.t( ":not Multiple", "#qunit-fixture p:not( p )", [] );
 	assert.t( ":not Multiple", "p:not(p)", [] );
 
-	if ( QUnit.jQuerySelectors || this.safari ) {
+	if ( QUnit.jQuerySelectors || !QUnit.isIE ) {
 		assert.t( ":not Multiple", "#qunit-fixture p:not(a, b)", [ "firstp", "ap", "sndp", "en", "sap", "first" ] );
 		assert.t( ":not Multiple", "#qunit-fixture p:not(a, b, div)", [ "firstp", "ap", "sndp", "en", "sap", "first" ] );
 		assert.t( ":not Multiple", "p:not(a,p)", [] );
 		assert.t( ":not Multiple", "p:not(p,a)", [] );
 		assert.t( ":not Multiple", "p:not(a,p,b)", [] );
 	} else {
-		// Support: Chrome 75+, Firefox 67+
-		// Chrome/Firefox don't support `:not(complex selector)`.
+		// Support: IE 11+
+		// IE doesn't support `:not(complex selector)`.
 		assert.ok( "skip", ":not(complex selector) not supported in selector-native" );
 		assert.ok( "skip", ":not(complex selector) not supported in selector-native" );
 		assert.ok( "skip", ":not(complex selector) not supported in selector-native" );
@@ -1189,11 +1190,11 @@ QUnit.test( "pseudo - :not", function( assert ) {
 	assert.t( ":not() Multiple Class", "#foo a:not(.blog)", [ "yahoo", "anchor2" ] );
 	assert.t( ":not() Multiple Class", "#foo a:not(.link)", [ "yahoo", "anchor2" ] );
 
-	if ( QUnit.jQuerySelectors || this.safari ) {
+	if ( QUnit.jQuerySelectors || !QUnit.isIE ) {
 		assert.t( ":not() Multiple Class", "#foo a:not(.blog.link)", [ "yahoo", "anchor2" ] );
 	} else {
-		// Support: Chrome 75+, Firefox 67+
-		// Chrome/Firefox don't support `:not(complex selector)`.
+		// Support: IE 11+
+		// IE doesn't support `:not(complex selector)`.
 		assert.ok( "skip", ":not(complex selector) not supported in selector-native" );
 	}
 
@@ -1283,7 +1284,7 @@ QUnit.test( "pseudo - :not", function( assert ) {
 		q( "ap" ),
 		"Seeded pos with trailing relative" );
 
-	// jQuery #12526
+	// jQuery trac-12526
 	var context = jQuery( "#qunit-fixture" ).append( "<div id='jquery12526'></div>" )[ 0 ];
 	assert.deepEqual( jQuery( ":last", context ).get(), q( "jquery12526" ),
 		"Post-manipulation positional" );
@@ -1654,7 +1655,7 @@ QUnit.test( "context", function( assert ) {
 		assert.deepEqual(
 			jQuery( "em + :not(:has(*)):not(:empty), foo", context.firstChild ).get(),
 			expected.slice( 0, 1 ),
-			"Non-qSA path correctly sets detached context for sibling selectors (jQuery #14351)"
+			"Non-qSA path correctly sets detached context for sibling selectors (jQuery trac-14351)"
 		);
 	} else {
 		assert.ok( "skip", ":has not supported in selector-native" );
@@ -1705,7 +1706,7 @@ QUnit.test( "caching does not introduce bugs", function( assert ) {
 	);
 
 	if ( QUnit.jQuerySelectorsPos ) {
-		assert.t( "Deep ancestry caching in post-positional element matcher (jQuery #14657)",
+		assert.t( "Deep ancestry caching in post-positional element matcher (jQuery trac-14657)",
 			"#qunit-fixture a:lt(3):parent",
 			[ "simon1", "google", "groups" ] );
 	} else {
@@ -1836,9 +1837,9 @@ function( assert, jQuery, window, document ) {
 		} );
 		t( "Enumerated attribute", "[spellcheck]", [ "span1" ] );
 
-		t( "tabindex selector does not retrieve all elements in IE6/7 (#8473)",
+		t( "tabindex selector does not retrieve all elements in IE6/7 (trac-8473)",
 			"form, [tabindex]", [ "form1", "text1" ] );
-		t( "Improperly named form elements do not interfere with form selections (#9570)", "form[name='formName']", [ "form1" ] );
+		t( "Improperly named form elements do not interfere with form selections (trac-9570)", "form[name='formName']", [ "form1" ] );
 	}
 );
 
@@ -1894,9 +1895,7 @@ QUnit.test( "jQuery.uniqueSort", function( assert ) {
 		}
 	}
 	Arrayish.prototype = {
-		slice: [].slice,
-		sort: [].sort,
-		splice: [].splice
+		sliceForTestOnly: [].slice
 	};
 
 	var i, tests,
@@ -1958,8 +1957,12 @@ QUnit.test( "jQuery.uniqueSort", function( assert ) {
 
 	jQuery.each( tests, function( label, test ) {
 		var length = test.length || test.input.length;
-		assert.deepEqual( jQuery.uniqueSort( test.input ).slice( 0, length ), test.expected, label + " (array)" );
-		assert.deepEqual( jQuery.uniqueSort( new Arrayish( test.input ) ).slice( 0, length ), test.expected, label + " (quasi-array)" );
+		// We duplicate `test.input` because otherwise it is modified by `uniqueSort`
+		// and the second test becomes worthless.
+		assert.deepEqual( jQuery.uniqueSort( test.input.slice( 0 ) ).slice( 0, length ),
+			test.expected, label + " (array)" );
+		assert.deepEqual( jQuery.uniqueSort( new Arrayish( test.input ) ).sliceForTestOnly( 0, length ),
+			test.expected, label + " (quasi-array)" );
 	} );
 } );
 
@@ -1987,7 +1990,7 @@ function( assert, jQuery, window, document ) {
 	}
 );
 
-QUnit.test( "Iframe dispatch should not affect jQuery (#13936)", function( assert ) {
+QUnit.test( "Iframe dispatch should not affect jQuery (trac-13936)", function( assert ) {
 	assert.expect( 1 );
 	var loaded = false,
 		thrown = false,
diff --git a/a.js b/b.js
index 4afbec92..7514c9a7 100644
--- a/a.js
+++ b/b.js
@@ -12,11 +12,18 @@ module.exports = function( grunt ) {
 		return data;
 	}
 
+	// Support: Node.js <12
+	// Skip running tasks that dropped support for Node.js 10
+	// in this Node version.
+	function runIfNewNode( task ) {
+		return oldNode ? "print_old_node_message:" + task : task;
+	}
+
 	var fs = require( "fs" ),
 		gzip = require( "gzip-js" ),
-		isTravis = process.env.TRAVIS,
-		travisBrowsers = process.env.BROWSERS && process.env.BROWSERS.split( "," ),
-		CLIEngine = require( "eslint" ).CLIEngine;
+		oldNode = /^v10\./.test( process.version ),
+		isCi = process.env.GITHUB_ACTION,
+		ciBrowsers = process.env.BROWSERS && process.env.BROWSERS.split( "," );
 
 	if ( !grunt.option( "filename" ) ) {
 		grunt.option( "filename", "jquery.js" );
@@ -77,6 +84,9 @@ module.exports = function( grunt ) {
 					destPrefix: "external"
 				},
 				files: {
+					"core-js-bundle/core-js-bundle.js": "core-js-bundle/minified.js",
+					"core-js-bundle/LICENSE": "core-js-bundle/LICENSE",
+
 					"npo/npo.js": "native-promise-only/lib/npo.src.js",
 
 					"qunit/qunit.js": "qunit/qunit/qunit.js",
@@ -114,9 +124,14 @@ module.exports = function( grunt ) {
 
 					// Ignore files from .eslintignore
 					// See https://github.com/sindresorhus/grunt-eslint/issues/119
-					...new CLIEngine()
-						.getConfigForFile( "Gruntfile.js" )
-						.ignorePatterns.map( ( p ) => `!${ p }` )
+					...fs
+						.readFileSync( `${ __dirname }/.eslintignore`, "utf-8" )
+						.split( "\n" )
+						.filter( filePath => filePath )
+						.map( filePath => filePath[ 0 ] === "!" ?
+							filePath.slice( 1 ) :
+							`!${ filePath }`
+						)
 				]
 			}
 		},
@@ -217,15 +232,19 @@ module.exports = function( grunt ) {
 				],
 				reporters: [ "dots" ],
 				autoWatch: false,
+
+				// 2 minutes; has to be longer than QUnit.config.testTimeout
+				browserNoActivityTimeout: 120e3,
+
 				concurrency: 3,
 				captureTimeout: 20 * 1000,
 				singleRun: true
 			},
 			main: {
-				browsers: isTravis && travisBrowsers || [ "ChromeHeadless", "FirefoxHeadless" ]
+				browsers: isCi && ciBrowsers || [ "ChromeHeadless", "FirefoxHeadless" ]
 			},
 			esmodules: {
-				browsers: isTravis && travisBrowsers || [ "ChromeHeadless" ],
+				browsers: isCi && ciBrowsers || [ "ChromeHeadless" ],
 				options: {
 					client: {
 						qunit: {
@@ -240,7 +259,7 @@ module.exports = function( grunt ) {
 				}
 			},
 			amd: {
-				browsers: isTravis && travisBrowsers || [ "ChromeHeadless" ],
+				browsers: isCi && ciBrowsers || [ "ChromeHeadless" ],
 				options: {
 					client: {
 						qunit: {
@@ -331,11 +350,18 @@ module.exports = function( grunt ) {
 	} );
 
 	// Load grunt tasks from NPM packages
-	require( "load-grunt-tasks" )( grunt );
+	require( "load-grunt-tasks" )( grunt, {
+		pattern: oldNode ? [ "grunt-*", "!grunt-eslint" ] : [ "grunt-*" ]
+	} );
 
 	// Integrate jQuery specific tasks
 	grunt.loadTasks( "build/tasks" );
 
+	grunt.registerTask( "print_old_node_message", ( ...args ) => {
+		var task = args.join( ":" );
+		grunt.log.writeln( "Old Node.js detected, running the task \"" + task + "\" skipped..." );
+	} );
+
 	grunt.registerTask( "lint", [
 		"jsonlint",
 
@@ -343,16 +369,16 @@ module.exports = function( grunt ) {
 		// would run the dist target first which would point to errors in the built
 		// file, making it harder to fix them. We want to check the built file only
 		// if we already know the source files pass the linter.
-		"eslint:dev",
-		"eslint:dist"
+		runIfNewNode( "eslint:dev" ),
+		runIfNewNode( "eslint:dist" )
 	] );
 
 	grunt.registerTask( "lint:newer", [
 		"newer:jsonlint",
 
 		// Don't replace it with just the task; see the above comment.
-		"newer:eslint:dev",
-		"newer:eslint:dist"
+		runIfNewNode( "newer:eslint:dev" ),
+		runIfNewNode( "newer:eslint:dist" )
 	] );
 
 	grunt.registerTask( "test:fast", "node_smoke_tests" );
@@ -375,7 +401,7 @@ module.exports = function( grunt ) {
 
 	grunt.registerTask( "dev", [
 		"build:*:*",
-		"newer:eslint:dev",
+		runIfNewNode( "newer:eslint:dev" ),
 		"newer:uglify",
 		"remove_map_comment",
 		"dist:*",
@@ -384,14 +410,14 @@ module.exports = function( grunt ) {
 	] );
 
 	grunt.registerTask( "default", [
-		"eslint:dev",
+		runIfNewNode( "eslint:dev" ),
 		"build:*:*",
 		"amd",
 		"uglify",
 		"remove_map_comment",
 		"dist:*",
 		"test:prepare",
-		"eslint:dist",
+		runIfNewNode( "eslint:dist" ),
 		"test:fast",
 		"compare_size"
 	] );
diff --git a/a.js b/b.js
index 5021c59e..7514c9a7 100644
--- a/a.js
+++ b/b.js
@@ -12,11 +12,18 @@ module.exports = function( grunt ) {
 		return data;
 	}
 
+	// Support: Node.js <12
+	// Skip running tasks that dropped support for Node.js 10
+	// in this Node version.
+	function runIfNewNode( task ) {
+		return oldNode ? "print_old_node_message:" + task : task;
+	}
+
 	var fs = require( "fs" ),
 		gzip = require( "gzip-js" ),
-		isTravis = process.env.TRAVIS,
-		travisBrowsers = process.env.BROWSERS && process.env.BROWSERS.split( "," ),
-		CLIEngine = require( "eslint" ).CLIEngine;
+		oldNode = /^v10\./.test( process.version ),
+		isCi = process.env.GITHUB_ACTION,
+		ciBrowsers = process.env.BROWSERS && process.env.BROWSERS.split( "," );
 
 	if ( !grunt.option( "filename" ) ) {
 		grunt.option( "filename", "jquery.js" );
@@ -71,6 +78,28 @@ module.exports = function( grunt ) {
 				}
 			}
 		},
+		npmcopy: {
+			all: {
+				options: {
+					destPrefix: "external"
+				},
+				files: {
+					"core-js-bundle/core-js-bundle.js": "core-js-bundle/minified.js",
+					"core-js-bundle/LICENSE": "core-js-bundle/LICENSE",
+
+					"npo/npo.js": "native-promise-only/lib/npo.src.js",
+
+					"qunit/qunit.js": "qunit/qunit/qunit.js",
+					"qunit/qunit.css": "qunit/qunit/qunit.css",
+					"qunit/LICENSE.txt": "qunit/LICENSE.txt",
+
+					"requirejs/require.js": "requirejs/require.js",
+
+					"sinon/sinon.js": "sinon/pkg/sinon.js",
+					"sinon/LICENSE.txt": "sinon/LICENSE"
+				}
+			}
+		},
 		jsonlint: {
 			pkg: {
 				src: [ "package.json" ]
@@ -95,9 +124,14 @@ module.exports = function( grunt ) {
 
 					// Ignore files from .eslintignore
 					// See https://github.com/sindresorhus/grunt-eslint/issues/119
-					...new CLIEngine()
-						.getConfigForFile( "Gruntfile.js" )
-						.ignorePatterns.map( ( p ) => `!${ p }` )
+					...fs
+						.readFileSync( `${ __dirname }/.eslintignore`, "utf-8" )
+						.split( "\n" )
+						.filter( filePath => filePath )
+						.map( filePath => filePath[ 0 ] === "!" ?
+							filePath.slice( 1 ) :
+							`!${ filePath }`
+						)
 				]
 			}
 		},
@@ -162,9 +196,9 @@ module.exports = function( grunt ) {
 				},
 				files: [
 					"test/data/jquery-1.9.1.js",
-					"node_modules/sinon/pkg/sinon.js",
-					"node_modules/native-promise-only/lib/npo.src.js",
-					"node_modules/requirejs/require.js",
+					"external/sinon/sinon.js",
+					"external/npo/npo.js",
+					"external/requirejs/require.js",
 					"test/data/testinit.js",
 
 					"test/jquery.js",
@@ -188,7 +222,7 @@ module.exports = function( grunt ) {
 						served: true,
 						nocache: true
 					},
-					{ pattern: "node_modules/**", included: false, served: true },
+					{ pattern: "external/**", included: false, served: true },
 					{
 						pattern: "test/**/*.@(js|css|jpg|html|xml|svg)",
 						included: false,
@@ -198,15 +232,19 @@ module.exports = function( grunt ) {
 				],
 				reporters: [ "dots" ],
 				autoWatch: false,
+
+				// 2 minutes; has to be longer than QUnit.config.testTimeout
+				browserNoActivityTimeout: 120e3,
+
 				concurrency: 3,
 				captureTimeout: 20 * 1000,
 				singleRun: true
 			},
 			main: {
-				browsers: isTravis && travisBrowsers || [ "ChromeHeadless", "FirefoxHeadless" ]
+				browsers: isCi && ciBrowsers || [ "ChromeHeadless", "FirefoxHeadless" ]
 			},
 			esmodules: {
-				browsers: isTravis && travisBrowsers || [ "ChromeHeadless" ],
+				browsers: isCi && ciBrowsers || [ "ChromeHeadless" ],
 				options: {
 					client: {
 						qunit: {
@@ -221,7 +259,7 @@ module.exports = function( grunt ) {
 				}
 			},
 			amd: {
-				browsers: isTravis && travisBrowsers || [ "ChromeHeadless" ],
+				browsers: isCi && ciBrowsers || [ "ChromeHeadless" ],
 				options: {
 					client: {
 						qunit: {
@@ -312,11 +350,18 @@ module.exports = function( grunt ) {
 	} );
 
 	// Load grunt tasks from NPM packages
-	require( "load-grunt-tasks" )( grunt );
+	require( "load-grunt-tasks" )( grunt, {
+		pattern: oldNode ? [ "grunt-*", "!grunt-eslint" ] : [ "grunt-*" ]
+	} );
 
 	// Integrate jQuery specific tasks
 	grunt.loadTasks( "build/tasks" );
 
+	grunt.registerTask( "print_old_node_message", ( ...args ) => {
+		var task = args.join( ":" );
+		grunt.log.writeln( "Old Node.js detected, running the task \"" + task + "\" skipped..." );
+	} );
+
 	grunt.registerTask( "lint", [
 		"jsonlint",
 
@@ -324,16 +369,16 @@ module.exports = function( grunt ) {
 		// would run the dist target first which would point to errors in the built
 		// file, making it harder to fix them. We want to check the built file only
 		// if we already know the source files pass the linter.
-		"eslint:dev",
-		"eslint:dist"
+		runIfNewNode( "eslint:dev" ),
+		runIfNewNode( "eslint:dist" )
 	] );
 
 	grunt.registerTask( "lint:newer", [
 		"newer:jsonlint",
 
 		// Don't replace it with just the task; see the above comment.
-		"newer:eslint:dev",
-		"newer:eslint:dist"
+		runIfNewNode( "newer:eslint:dev" ),
+		runIfNewNode( "newer:eslint:dist" )
 	] );
 
 	grunt.registerTask( "test:fast", "node_smoke_tests" );
@@ -343,6 +388,7 @@ module.exports = function( grunt ) {
 	] );
 
 	grunt.registerTask( "test:prepare", [
+		"npmcopy",
 		"qunit_fixture",
 		"babel:tests"
 	] );
@@ -355,7 +401,7 @@ module.exports = function( grunt ) {
 
 	grunt.registerTask( "dev", [
 		"build:*:*",
-		"newer:eslint:dev",
+		runIfNewNode( "newer:eslint:dev" ),
 		"newer:uglify",
 		"remove_map_comment",
 		"dist:*",
@@ -364,14 +410,14 @@ module.exports = function( grunt ) {
 	] );
 
 	grunt.registerTask( "default", [
-		"eslint:dev",
+		runIfNewNode( "eslint:dev" ),
 		"build:*:*",
 		"amd",
 		"uglify",
 		"remove_map_comment",
 		"dist:*",
 		"test:prepare",
-		"eslint:dist",
+		runIfNewNode( "eslint:dist" ),
 		"test:fast",
 		"compare_size"
 	] );
diff --git a/a.js b/b.js
index 0fea9871..e7399c96 100644
--- a/a.js
+++ b/b.js
@@ -47,10 +47,10 @@ module.exports = function( Release ) {
 		 * @param {Function} callback
 		 */
 		generateArtifacts: function( callback ) {
-			Release.exec( "grunt", "Grunt command failed" );
+			Release.exec( "npx grunt", "Grunt command failed" );
 			Release.exec(
-				"grunt custom:slim --filename=jquery.slim.js && " +
-					"grunt remove_map_comment --filename=jquery.slim.js",
+				"npx grunt custom:slim --filename=jquery.slim.js && " +
+					"npx grunt remove_map_comment --filename=jquery.slim.js",
 				"Grunt custom failed"
 			);
 			cdn.makeReleaseCopies( Release );
diff --git a/a.js b/b.js
index 321f59ba..e7399c96 100644
--- a/a.js
+++ b/b.js
@@ -47,10 +47,10 @@ module.exports = function( Release ) {
 		 * @param {Function} callback
 		 */
 		generateArtifacts: function( callback ) {
-			Release.exec( "grunt", "Grunt command failed" );
+			Release.exec( "npx grunt", "Grunt command failed" );
 			Release.exec(
-				"grunt custom:slim --filename=jquery.slim.js && " +
-					"grunt remove_map_comment --filename=jquery.slim.js",
+				"npx grunt custom:slim --filename=jquery.slim.js && " +
+					"npx grunt remove_map_comment --filename=jquery.slim.js",
 				"Grunt custom failed"
 			);
 			cdn.makeReleaseCopies( Release );
@@ -83,8 +83,7 @@ module.exports = function( Release ) {
 };
 
 module.exports.dependencies = [
-	"archiver@1.3.0",
-	"shelljs@0.7.7",
-	"inquirer@7.0.4",
-	"npm@4.4.1"
+	"archiver@5.2.0",
+	"shelljs@0.8.4",
+	"inquirer@8.0.0"
 ];
diff --git a/a.js b/b.js
index 9e6a915d..48f95dc3 100644
--- a/a.js
+++ b/b.js
@@ -33,6 +33,15 @@ support.reliableTrDimensions = function() {
 		tr.style.height = "1px";
 		div.style.height = "9px";
 
+		// Support: Android Chrome 86+
+		// In our bodyBackground.html iframe,
+		// display for all div elements is set to "inline",
+		// which causes a problem only in Android Chrome, but
+		// not consistently across all devices.
+		// Ensuring the div is display: block
+		// gets around this issue.
+		div.style.display = "block";
+
 		documentElement
 			.appendChild( table )
 			.appendChild( tr )
diff --git a/a.js b/b.js
index c8f7116b..ea7c64b8 100644
--- a/a.js
+++ b/b.js
@@ -31,9 +31,9 @@ module.exports = function( Release, files, complete ) {
 		Release.exec( `git clone ${ distRemote } ${ Release.dir.dist }`,
 			"Error cloning repo." );
 
-		// Distribution always works on master
+		// Distribution always works on main
 		Release.chdir( Release.dir.dist );
-		Release.exec( "git checkout master", "Error checking out branch." );
+		Release.exec( "git checkout main", "Error checking out branch." );
 		console.log();
 	}
 
@@ -140,8 +140,8 @@ module.exports = function( Release, files, complete ) {
 		Release.exec(
 			`git push ${
 				Release.isTest ? " --dry-run" : ""
-			} ${ distRemote } master --tags`,
-			"Error pushing master and tags to git repo."
+			} ${ distRemote } main --tags`,
+			"Error pushing main and tags to git repo."
 		);
 
 		// Set repo for npm publish
diff --git a/a.js b/b.js
index b3d2dd78..d3af15e1 100644
--- a/a.js
+++ b/b.js
@@ -54,8 +54,8 @@ 	checkSupport = function( assert ) {
 
 QUnit.test( "empty set", function( assert ) {
 	assert.expect( 2 );
-	assert.strictEqual( jQuery().offset(), undefined, "offset() returns undefined for empty set (#11962)" );
-	assert.strictEqual( jQuery().position(), undefined, "position() returns undefined for empty set (#11962)" );
+	assert.strictEqual( jQuery().offset(), undefined, "offset() returns undefined for empty set (trac-11962)" );
+	assert.strictEqual( jQuery().position(), undefined, "position() returns undefined for empty set (trac-11962)" );
 } );
 
 QUnit.test( "disconnected element", function( assert ) {
@@ -63,7 +63,7 @@ QUnit.test( "disconnected element", function( assert ) {
 
 	var result = jQuery( document.createElement( "div" ) ).offset();
 
-	// These tests are solely for master/compat consistency
+	// These tests are solely for main/compat consistency
 	// Retrieving offset on disconnected/hidden elements is not officially
 	// valid input, but will return zeros for back-compat
 	assert.equal( result.top, 0, "Retrieving offset on disconnected elements returns zeros (gh-2310)" );
@@ -80,7 +80,7 @@ QUnit.test( "hidden (display: none) element", function( assert ) {
 
 	node.remove();
 
-	// These tests are solely for master/compat consistency
+	// These tests are solely for main/compat consistency
 	// Retrieving offset on disconnected/hidden elements is not officially
 	// valid input, but will return zeros for back-compat
 	assert.equal( result.top, 0, "Retrieving offset on hidden elements returns zeros (gh-2310)" );
@@ -187,7 +187,7 @@ testIframe( "absolute", "offset/absolute.html", function( assert, $ ) {
 		assert.equal( $( this.id ).position().left, this.left, "jQuery('" + this.id + "').position().left" );
 	} );
 
-	// test #5781
+	// test trac-5781
 	offset = $( "#positionTest" ).offset( { "top": 10, "left": 10 } ).offset();
 	assert.equal( offset.top,  10, "Setting offset on element with position absolute but 'auto' values." );
 	assert.equal( offset.left, 10, "Setting offset on element with position absolute but 'auto' values." );
@@ -454,7 +454,7 @@ testIframe( "scroll", "offset/scroll.html", function( assert, $, win ) {
 	assert.equal( $( "#scroll-1-1" ).offset().top, 11, "jQuery('#scroll-1-1').offset().top" );
 	assert.equal( $( "#scroll-1-1" ).offset().left, 11, "jQuery('#scroll-1-1').offset().left" );
 
-	// These tests are solely for master/compat consistency
+	// These tests are solely for main/compat consistency
 	// Retrieving offset on disconnected/hidden elements is not officially
 	// valid input, but will return zeros for back-compat
 	assert.equal( $( "#hidden" ).offset().top, 0, "Hidden elements do not subtract scroll" );
@@ -468,8 +468,8 @@ testIframe( "scroll", "offset/scroll.html", function( assert, $, win ) {
 	assert.equal( $( "#scroll-1-1" ).scrollLeft(), 0, "jQuery('#scroll-1-1').scrollLeft()" );
 
 	// scroll method chaining
-	assert.equal( $( "#scroll-1" ).scrollTop( undefined ).scrollTop(), 5, ".scrollTop(undefined) is chainable (#5571)" );
-	assert.equal( $( "#scroll-1" ).scrollLeft( undefined ).scrollLeft(), 5, ".scrollLeft(undefined) is chainable (#5571)" );
+	assert.equal( $( "#scroll-1" ).scrollTop( undefined ).scrollTop(), 5, ".scrollTop(undefined) is chainable (trac-5571)" );
+	assert.equal( $( "#scroll-1" ).scrollLeft( undefined ).scrollLeft(), 5, ".scrollLeft(undefined) is chainable (trac-5571)" );
 
 	win.name = "test";
 
@@ -519,7 +519,7 @@ QUnit.test( "chaining", function( assert ) {
 	var coords = { "top":  1, "left":  1 };
 	assert.equal( jQuery( "#absolute-1" ).offset( coords ).jquery, jQuery.fn.jquery, "offset(coords) returns jQuery object" );
 	assert.equal( jQuery( "#non-existent" ).offset( coords ).jquery, jQuery.fn.jquery, "offset(coords) with empty jQuery set returns jQuery object" );
-	assert.equal( jQuery( "#absolute-1" ).offset( undefined ).jquery, jQuery.fn.jquery, "offset(undefined) returns jQuery object (#5571)" );
+	assert.equal( jQuery( "#absolute-1" ).offset( undefined ).jquery, jQuery.fn.jquery, "offset(undefined) returns jQuery object (trac-5571)" );
 } );
 
 // Test complex content under a variety of <html>/<body> positioning styles
@@ -729,11 +729,11 @@ QUnit.test( "offsetParent", function( assert ) {
 	area.remove();
 
 	div = jQuery( "<div>" ).css( { "position": "absolute" } ).appendTo( "body" );
-	assert.equal( div.offsetParent()[ 0 ], document.documentElement, "Absolutely positioned div returns html as offset parent, see #12139" );
+	assert.equal( div.offsetParent()[ 0 ], document.documentElement, "Absolutely positioned div returns html as offset parent, see trac-12139" );
 	div.remove();
 } );
 
-QUnit.test( "fractions (see #7730 and #7885)", function( assert ) {
+QUnit.test( "fractions (see trac-7730 and trac-7885)", function( assert ) {
 	assert.expect( 2 );
 
 	jQuery( "body" ).append( "<div id='fractions'></div>" );
diff --git a/a.js b/b.js
index 203ea08e..fee8a66e 100644
--- a/a.js
+++ b/b.js
@@ -19,22 +19,13 @@ function canUseScriptTag( s ) {
 		( s.async && jQuery.inArray( "json", s.dataTypes ) < 0 );
 }
 
-// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
-jQuery.ajaxPrefilter( function( s ) {
-	if ( s.crossDomain ) {
-		s.contents.script = false;
-	}
-} );
-
-// Install script dataType
+// Install script dataType. Don't specify `content.script` so that an explicit
+// `dataType: "script"` is required (see gh-2432, gh-4822)
 jQuery.ajaxSetup( {
 	accepts: {
 		script: "text/javascript, application/javascript, " +
 			"application/ecmascript, application/x-ecmascript"
 	},
-	contents: {
-		script: /\b(?:java|ecma)script\b/
-	},
 	converters: {
 		"text script": function( text ) {
 			jQuery.globalEval( text );
diff --git a/a.js b/b.js
index 271496ce..d06ce997 100644
--- a/a.js
+++ b/b.js
@@ -71,13 +71,20 @@ ajaxTest( "jQuery.ajax() - success callbacks - (url, options) syntax", 8, functi
 		};
 	} );
 
-	ajaxTest( "jQuery.ajax() - execute js for crossOrigin when dataType option is provided", 3,
+	ajaxTest( "jQuery.ajax() - custom attributes for script tag", 5,
 		function( assert ) {
 			return {
 				create: function( options ) {
-					options.crossDomain = true;
+					var xhr;
+					options.method = "POST";
 					options.dataType = "script";
-					return jQuery.ajax( url( "mock.php?action=script&header=ecma" ), options );
+					options.scriptAttrs = { id: "jquery-ajax-test", async: "async" };
+					xhr = jQuery.ajax( url( "mock.php?action=script" ), options );
+					assert.equal( jQuery( "#jquery-ajax-test" ).attr( "async" ), "async", "attr value" );
+					return xhr;
+				},
+				beforeSend: function( _jqXhr, settings ) {
+					assert.strictEqual( settings.type, "GET", "Type changed to GET" );
 				},
 				success: function() {
 					assert.ok( true, "success" );
@@ -89,20 +96,13 @@ ajaxTest( "jQuery.ajax() - execute js for crossOrigin when dataType option is pr
 		}
 	);
 
-	ajaxTest( "jQuery.ajax() - custom attributes for script tag", 5,
+	ajaxTest( "jQuery.ajax() - execute JS when dataType option is provided", 3,
 		function( assert ) {
 			return {
 				create: function( options ) {
-					var xhr;
-					options.method = "POST";
+					options.crossDomain = true;
 					options.dataType = "script";
-					options.scriptAttrs = { id: "jquery-ajax-test", async: "async" };
-					xhr = jQuery.ajax( url( "mock.php?action=script" ), options );
-					assert.equal( jQuery( "#jquery-ajax-test" ).attr( "async" ), "async", "attr value" );
-					return xhr;
-				},
-				beforeSend: function( _jqXhr, settings ) {
-					assert.strictEqual( settings.type, "GET", "Type changed to GET" );
+					return jQuery.ajax( url( "mock.php?action=script&header=ecma" ), options );
 				},
 				success: function() {
 					assert.ok( true, "success" );
@@ -114,22 +114,16 @@ ajaxTest( "jQuery.ajax() - custom attributes for script tag", 5,
 		}
 	);
 
-	ajaxTest( "jQuery.ajax() - do not execute js (crossOrigin)", 2, function( assert ) {
-		return {
-			create: function( options ) {
-				options.crossDomain = true;
-				return jQuery.ajax( url( "mock.php?action=script&header" ), options );
-			},
-			success: function() {
-				assert.ok( true, "success" );
-			},
-			fail: function() {
-				assert.ok( false, "fail" );
-			},
-			complete: function() {
-				assert.ok( true, "complete" );
-			}
-		};
+	jQuery.each( [ " - Same Domain", " - Cross Domain" ], function( crossDomain, label ) {
+		ajaxTest( "jQuery.ajax() - do not execute JS (gh-2432, gh-4822) " + label, 1, function( assert ) {
+			return {
+				url: url( "mock.php?action=script&header" ),
+				crossDomain: crossDomain,
+				success: function() {
+					assert.ok( true, "success" );
+				}
+			};
+		} );
 	} );
 
 	ajaxTest( "jQuery.ajax() - success callbacks (late binding)", 8, function( assert ) {
@@ -619,7 +613,7 @@ ajaxTest( "jQuery.ajax() - events without context", 3, function( assert ) {
 		};
 	} );
 
-	ajaxTest( "#15118 - jQuery.ajax() - function without jQuery.event", 1, function( assert ) {
+	ajaxTest( "trac-15118 - jQuery.ajax() - function without jQuery.event", 1, function( assert ) {
 		var holder;
 		return {
 			url: url( "mock.php?action=json" ),
@@ -635,7 +629,7 @@ ajaxTest( "#15118 - jQuery.ajax() - function without jQuery.event", 1, function(
 		};
 	} );
 
-	ajaxTest( "#15160 - jQuery.ajax() - request manually aborted in ajaxSend", 3, function( assert ) {
+	ajaxTest( "trac-15160 - jQuery.ajax() - request manually aborted in ajaxSend", 3, function( assert ) {
 		return {
 			setup: function() {
 				jQuery( document ).on( "ajaxSend", function( e, jqXHR ) {
@@ -1439,25 +1433,6 @@ ajaxTest( "jQuery.ajax() - malformed JSON", 2, function( assert ) {
 		};
 	} );
 
-	ajaxTest( "jQuery.ajax() - script by content-type", 2, function() {
-		return [
-			{
-				url: baseURL + "mock.php?action=script",
-				data: {
-					"header": "script"
-				},
-				success: true
-			},
-			{
-				url: baseURL + "mock.php?action=script",
-				data: {
-					"header": "ecma"
-				},
-				success: true
-			}
-		];
-	} );
-
 	ajaxTest( "jQuery.ajax() - JSON by content-type", 5, function( assert ) {
 		return {
 			url: baseURL + "mock.php?action=json",
@@ -1659,12 +1634,25 @@ ajaxTest( "jQuery.ajax() - data - no processing GET", 1, function( assert ) {
 		function( label, cache ) {
 			jQuery.each(
 				{
-					"If-Modified-Since": "mock.php?action=ims",
-					"Etag": "mock.php?action=etag"
+					"If-Modified-Since": {
+						url: "mock.php?action=ims",
+						qunitMethod: "test"
+					},
+					"Etag": {
+						url: "mock.php?action=etag",
+
+						// Support: TestSwarm
+						// TestSwarm is now proxied via Cloudflare which cuts out
+						// headers relevant for ETag tests, failing them. We're still
+						// running those tests in Karma on Chrome & Firefox (including
+						// Firefox ESR).
+						qunitMethod: QUnit.isSwarm ? "skip" : "test"
+					}
 				},
-				function( type, url ) {
-					url = baseURL + url + "&ts=" + ifModifiedNow++;
-					QUnit.test( "jQuery.ajax() - " + type + " support" + label, function( assert ) {
+				function( type, data ) {
+					var url = baseURL + data.url + "&ts=" + ifModifiedNow++;
+					QUnit[ data.qunitMethod ]( "jQuery.ajax() - " + type +
+							" support" + label, function( assert ) {
 						assert.expect( 4 );
 						var done = assert.async();
 						jQuery.ajax( {
@@ -1729,7 +1717,8 @@ QUnit.test( "jQuery.ajax() - statusText", function( assert ) {
 		var done = assert.async();
 		jQuery.ajax( url( "mock.php?action=status&code=200&text=Hello" ) ).done( function( _, statusText, jqXHR ) {
 			assert.strictEqual( statusText, "success", "callback status text ok for success" );
-			assert.ok( jqXHR.statusText === "Hello" || jqXHR.statusText === "OK", "jqXHR status text ok for success (" + jqXHR.statusText + ")" );
+			assert.ok( [ "Hello", "OK", "success" ].indexOf( jqXHR.statusText ) > -1,
+				"jqXHR status text ok for success (" + jqXHR.statusText + ")" );
 			jQuery.ajax( url( "mock.php?action=status&code=404&text=World" ) ).fail( function( jqXHR, statusText ) {
 				assert.strictEqual( statusText, "error", "callback status text ok for error" );
 				done();
@@ -1906,7 +1895,7 @@ ajaxTest( "jQuery.ajax() - empty json gets to error callback instead of success
 		};
 	} );
 
-	ajaxTest( "#2688 - jQuery.ajax() - beforeSend, cancel request", 2, function( assert ) {
+	ajaxTest( "trac-2688 - jQuery.ajax() - beforeSend, cancel request", 2, function( assert ) {
 		return {
 			create: function() {
 				return jQuery.ajax( {
@@ -1932,7 +1921,7 @@ ajaxTest( "#2688 - jQuery.ajax() - beforeSend, cancel request", 2, function( ass
 		};
 	} );
 
-	ajaxTest( "#2806 - jQuery.ajax() - data option - evaluate function values", 1, function( assert ) {
+	ajaxTest( "trac-2806 - jQuery.ajax() - data option - evaluate function values", 1, function( assert ) {
 		return {
 			url: baseURL + "mock.php?action=echoQuery",
 			data: {
@@ -1946,7 +1935,7 @@ ajaxTest( "#2806 - jQuery.ajax() - data option - evaluate function values", 1, f
 		};
 	} );
 
-	QUnit.test( "#7531 - jQuery.ajax() - Location object as url", function( assert ) {
+	QUnit.test( "trac-7531 - jQuery.ajax() - Location object as url", function( assert ) {
 		assert.expect( 1 );
 
 		var xhr,
@@ -1964,7 +1953,7 @@ QUnit.test( "#7531 - jQuery.ajax() - Location object as url", function( assert )
 	} );
 
 	jQuery.each( [ " - Same Domain", " - Cross Domain" ], function( crossDomain, label ) {
-		ajaxTest( "#7578 - jQuery.ajax() - JSONP - default for cache option" + label, 1, function( assert ) {
+		ajaxTest( "trac-7578 - jQuery.ajax() - JSONP - default for cache option" + label, 1, function( assert ) {
 			return {
 				url: baseURL + "mock.php?action=jsonp",
 				dataType: "jsonp",
@@ -1978,7 +1967,7 @@ QUnit.test( "#7531 - jQuery.ajax() - Location object as url", function( assert )
 		} );
 	} );
 
-	ajaxTest( "#8107 - jQuery.ajax() - multiple method signatures introduced in 1.5", 4, function( assert ) {
+	ajaxTest( "trac-8107 - jQuery.ajax() - multiple method signatures introduced in 1.5", 4, function( assert ) {
 		return [
 			{
 				create: function() {
@@ -2017,7 +2006,7 @@ ajaxTest( "#8107 - jQuery.ajax() - multiple method signatures introduced in 1.5"
 	} );
 
 	jQuery.each( [ " - Same Domain", " - Cross Domain" ], function( crossDomain, label ) {
-		ajaxTest( "#8205 - jQuery.ajax() - JSONP - re-use callbacks name" + label, 4, function( assert ) {
+		ajaxTest( "trac-8205 - jQuery.ajax() - JSONP - re-use callbacks name" + label, 4, function( assert ) {
 			return {
 				url: baseURL + "mock.php?action=jsonp",
 				dataType: "jsonp",
@@ -2055,7 +2044,7 @@ ajaxTest( "#8107 - jQuery.ajax() - multiple method signatures introduced in 1.5"
 		} );
 	} );
 
-	QUnit.test( "#9887 - jQuery.ajax() - Context with circular references (#9887)", function( assert ) {
+	QUnit.test( "trac-9887 - jQuery.ajax() - Context with circular references (trac-9887)", function( assert ) {
 		assert.expect( 2 );
 
 		var success = false,
@@ -2089,7 +2078,7 @@ QUnit.test( "#9887 - jQuery.ajax() - Context with circular references (#9887)",
 			};
 		}
 
-		ajaxTest( "#10093 - jQuery.ajax() - falsy url " + title, 4, function( assert ) {
+		ajaxTest( "trac-10093 - jQuery.ajax() - falsy url " + title, 4, function( assert ) {
 			return [
 				request( assert, "", "empty string" ),
 				request( assert, false ),
@@ -2099,7 +2088,7 @@ QUnit.test( "#9887 - jQuery.ajax() - Context with circular references (#9887)",
 		} );
 	} );
 
-	ajaxTest( "#11151 - jQuery.ajax() - parse error body", 2, function( assert ) {
+	ajaxTest( "trac-11151 - jQuery.ajax() - parse error body", 2, function( assert ) {
 		return {
 			url: url( "mock.php?action=error&json=1" ),
 			dataFilter: function( string ) {
@@ -2113,7 +2102,7 @@ ajaxTest( "#11151 - jQuery.ajax() - parse error body", 2, function( assert ) {
 		};
 	} );
 
-	ajaxTest( "#11426 - jQuery.ajax() - loading binary data shouldn't throw an exception in IE", 1, function( assert ) {
+	ajaxTest( "trac-11426 - jQuery.ajax() - loading binary data shouldn't throw an exception in IE", 1, function( assert ) {
 		return {
 			url: url( "1x1.jpg" ),
 			success: function( data ) {
@@ -2146,7 +2135,7 @@ ajaxTest( "gh-2498 - jQuery.ajax() - binary data shouldn't throw an exception",
 	} );
 }
 
-	QUnit.test( "#11743 - jQuery.ajax() - script, throws exception", function( assert ) {
+	QUnit.test( "trac-11743 - jQuery.ajax() - script, throws exception", function( assert ) {
 		assert.expect( 1 );
 		var done = assert.async();
 		var onerror = window.onerror;
@@ -2181,7 +2170,7 @@ 				options.success = function( msg ) {
 		}
 
 		ajaxTest(
-			"#12004 - jQuery.ajax() - method is an alias of type - " +
+			"trac-12004 - jQuery.ajax() - method is an alias of type - " +
 			globalOption + " set globally", 3,
 			function( assert ) {
 				return {
@@ -2200,7 +2189,7 @@ 				options.success = function( msg ) {
 		);
 	} );
 
-	ajaxTest( "#13276 - jQuery.ajax() - compatibility between XML documents from ajax requests and parsed string", 1, function( assert ) {
+	ajaxTest( "trac-13276 - jQuery.ajax() - compatibility between XML documents from ajax requests and parsed string", 1, function( assert ) {
 		return {
 			url: baseURL + "dashboard.xml",
 			dataType: "xml",
@@ -2218,7 +2207,7 @@ ajaxTest( "#13276 - jQuery.ajax() - compatibility between XML documents from aja
 		};
 	} );
 
-	ajaxTest( "#13292 - jQuery.ajax() - converter is bypassed for 204 requests", 3, function( assert ) {
+	ajaxTest( "trac-13292 - jQuery.ajax() - converter is bypassed for 204 requests", 3, function( assert ) {
 		return {
 			url: baseURL + "mock.php?action=status&code=204&text=No+Content",
 			dataType: "testing",
@@ -2240,7 +2229,7 @@ ajaxTest( "#13292 - jQuery.ajax() - converter is bypassed for 204 requests", 3,
 		};
 	} );
 
-	ajaxTest( "#13388 - jQuery.ajax() - responseXML", 3, function( assert ) {
+	ajaxTest( "trac-13388 - jQuery.ajax() - responseXML", 3, function( assert ) {
 		return {
 			url: url( "with_fries.xml" ),
 			dataType: "xml",
@@ -2252,7 +2241,7 @@ ajaxTest( "#13388 - jQuery.ajax() - responseXML", 3, function( assert ) {
 		};
 	} );
 
-	ajaxTest( "#13922 - jQuery.ajax() - converter is bypassed for HEAD requests", 3, function( assert ) {
+	ajaxTest( "trac-13922 - jQuery.ajax() - converter is bypassed for HEAD requests", 3, function( assert ) {
 		return {
 			url: baseURL + "mock.php?action=json",
 			method: "HEAD",
@@ -2283,7 +2272,7 @@ ajaxTest( "#13922 - jQuery.ajax() - converter is bypassed for HEAD requests", 3,
 	// Safari 13 did similar changes. The below check will catch them both.
 	if ( !/safari/i.test( navigator.userAgent ) ) {
 		testIframe(
-			"#14379 - jQuery.ajax() on unload",
+			"trac-14379 - jQuery.ajax() on unload",
 			"ajax/onunload.html",
 			function( assert, jQuery, window, document, status ) {
 				assert.expect( 1 );
@@ -2292,7 +2281,7 @@ ajaxTest( "#13922 - jQuery.ajax() - converter is bypassed for HEAD requests", 3,
 		);
 	}
 
-	ajaxTest( "#14683 - jQuery.ajax() - Exceptions thrown synchronously by xhr.send should be caught", 4, function( assert ) {
+	ajaxTest( "trac-14683 - jQuery.ajax() - Exceptions thrown synchronously by xhr.send should be caught", 4, function( assert ) {
 		return [ {
 			url: baseURL + "mock.php?action=echoData",
 			method: "POST",
@@ -2515,7 +2504,7 @@ QUnit.test( "jQuery.ajaxSetup({ timeout: Number }) with localtimeout", function(
 
 //----------- jQuery.domManip()
 
-	QUnit.test( "#11264 - jQuery.domManip() - no side effect because of ajaxSetup or global events", function( assert ) {
+	QUnit.test( "trac-11264 - jQuery.domManip() - no side effect because of ajaxSetup or global events", function( assert ) {
 		assert.expect( 1 );
 
 		jQuery.ajaxSetup( {
@@ -2532,7 +2521,7 @@ QUnit.test( "#11264 - jQuery.domManip() - no side effect because of ajaxSetup or
 	} );
 
 	QUnit.test(
-		"jQuery#load() - always use GET method even if it overrided through ajaxSetup (#11264)",
+		"jQuery#load() - always use GET method even if it overrided through ajaxSetup (trac-11264)",
 		function( assert ) {
 			assert.expect( 1 );
 			var done = assert.async();
@@ -2569,7 +2558,7 @@ QUnit.test(
 	);
 
 	QUnit.test(
-		"#11402 - jQuery.domManip() - script in comments are properly evaluated",
+		"trac-11402 - jQuery.domManip() - script in comments are properly evaluated",
 		function( assert ) {
 			assert.expect( 2 );
 			jQuery( "#qunit-fixture" ).load( baseURL + "cleanScript.html", assert.async() );
@@ -2592,7 +2581,7 @@ QUnit.test( "jQuery.get( String, Hash, Function ) - parse xml and use text() on
 		} );
 	} );
 
-	QUnit.test( "#8277 - jQuery.get( String, Function ) - data in ajaxSettings", function( assert ) {
+	QUnit.test( "trac-8277 - jQuery.get( String, Function ) - data in ajaxSettings", function( assert ) {
 		assert.expect( 1 );
 		var done = assert.async();
 		jQuery.ajaxSetup( {
@@ -2683,7 +2672,7 @@ QUnit.test( "jQuery.getScript( String, Function ) - no callback", function( asse
 		jQuery.getScript( url( "mock.php?action=testbar" ) ).done( assert.async() );
 	} );
 
-	QUnit.test( "#8082 - jQuery.getScript( String, Function ) - source as responseText", function( assert ) {
+	QUnit.test( "trac-8082 - jQuery.getScript( String, Function ) - source as responseText", function( assert ) {
 		assert.expect( 2 );
 		var done = assert.async();
 
@@ -2770,7 +2759,7 @@ QUnit.test( "jQuery.fn.load( URL_SELECTOR )", function( assert ) {
 		} );
 	} );
 
-	// Selector should be trimmed to avoid leading spaces (#14773)
+	// Selector should be trimmed to avoid leading spaces (trac-14773)
 	QUnit.test( "jQuery.fn.load( URL_SELECTOR with spaces )", function( assert ) {
 		assert.expect( 1 );
 		var done = assert.async();
@@ -2780,9 +2769,9 @@ QUnit.test( "jQuery.fn.load( URL_SELECTOR with spaces )", function( assert ) {
 		} );
 	} );
 
-	// Selector should be trimmed to avoid leading spaces (#14773)
-	// Selector should include any valid non-HTML whitespace (#3003)
-	QUnit.test( "jQuery.fn.load( URL_SELECTOR with non-HTML whitespace(#3003) )", function( assert ) {
+	// Selector should be trimmed to avoid leading spaces (trac-14773)
+	// Selector should include any valid non-HTML whitespace (gh-3003)
+	QUnit.test( "jQuery.fn.load( URL_SELECTOR with non-HTML whitespace(gh-3003) )", function( assert ) {
 		assert.expect( 1 );
 		var done = assert.async();
 		jQuery( "#first" ).load( baseURL + "test3.html   #whitespace\\\\xA0 ", function() {
@@ -2913,7 +2902,7 @@ QUnit.test( "jQuery.fn.load() - callbacks get the correct parameters", function(
 		).always( done );
 	} );
 
-	QUnit.test( "#2046 - jQuery.fn.load( String, Function ) with ajaxSetup on dataType json", function( assert ) {
+	QUnit.test( "trac-2046 - jQuery.fn.load( String, Function ) with ajaxSetup on dataType json", function( assert ) {
 		assert.expect( 1 );
 		var done = assert.async();
 
@@ -2928,7 +2917,7 @@ QUnit.test( "#2046 - jQuery.fn.load( String, Function ) with ajaxSetup on dataTy
 		jQuery( "#first" ).load( baseURL + "test3.html" );
 	} );
 
-	QUnit.test( "#10524 - jQuery.fn.load() - data specified in ajaxSettings is merged in", function( assert ) {
+	QUnit.test( "trac-10524 - jQuery.fn.load() - data specified in ajaxSettings is merged in", function( assert ) {
 		assert.expect( 1 );
 		var done = assert.async();
 
diff --git a/a.js b/b.js
index d4eaf7a4..dc429472 100644
--- a/a.js
+++ b/b.js
@@ -353,8 +353,8 @@ when: function( singleValue ) {
 			resolveContexts = Array( i ),
 			resolveValues = slice.call( arguments ),
 
-			// the master Deferred
-			master = jQuery.Deferred(),
+			// the primary Deferred
+			primary = jQuery.Deferred(),
 
 			// subordinate callback factory
 			updateFunc = function( i ) {
@@ -362,30 +362,30 @@ 			updateFunc = function( i ) {
 					resolveContexts[ i ] = this;
 					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
 					if ( !( --remaining ) ) {
-						master.resolveWith( resolveContexts, resolveValues );
+						primary.resolveWith( resolveContexts, resolveValues );
 					}
 				};
 			};
 
 		// Single- and empty arguments are adopted like Promise.resolve
 		if ( remaining <= 1 ) {
-			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
+			adoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,
 				!remaining );
 
 			// Use .then() to unwrap secondary thenables (cf. gh-3000)
-			if ( master.state() === "pending" ||
+			if ( primary.state() === "pending" ||
 				typeof( resolveValues[ i ] && resolveValues[ i ].then ) === "function" ) {
 
-				return master.then();
+				return primary.then();
 			}
 		}
 
 		// Multiple arguments are aggregated like Promise.all array elements
 		while ( i-- ) {
-			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
+			adoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );
 		}
 
-		return master.promise();
+		return primary.promise();
 	}
 } );
 
diff --git a/a.js b/b.js
index 863aaf6b..ea6a5d2b 100644
--- a/a.js
+++ b/b.js
@@ -7,6 +7,10 @@
 /**
  * Keep in sync with /test/mock.php
  */
+function cleanCallback( callback ) {
+	return callback.replace( /[^a-z0-9_]/gi, "" );
+}
+
 var mocks = {
 	contentType: function( req, resp ) {
 		resp.writeHead( 200, {
@@ -62,7 +66,7 @@ atom: function( req, resp, next ) {
 	script: function( req, resp ) {
 		if ( req.query.header === "ecma" ) {
 			resp.writeHead( 200, { "content-type": "application/ecmascript" } );
-		} else if ( req.query.header ) {
+		} else if ( "header" in req.query ) {
 			resp.writeHead( 200, { "content-type": "text/javascript" } );
 		} else {
 			resp.writeHead( 200, { "content-type": "text/html" } );
@@ -73,7 +77,7 @@ script: function( req, resp ) {
 		}
 
 		if ( req.query.callback ) {
-			resp.end( req.query.callback + "(" + JSON.stringify( {
+			resp.end( cleanCallback( req.query.callback ) + "(" + JSON.stringify( {
 				headers: req.headers
 			} ) + ")" );
 		} else {
@@ -126,14 +130,14 @@ jsonp: function( req, resp, next ) {
 				{ data: { lang: "en", length: 25 } }
 			);
 		callback.then( function( cb ) {
-			resp.end( cb + "(" + json + ")" );
+			resp.end( cleanCallback( cb ) + "(" + json + ")" );
 		}, next );
 	},
 	xmlOverJsonp: function( req, resp ) {
 		var callback = req.query.callback;
 		var body = fs.readFileSync( __dirname + "/data/with_fries.xml" ).toString();
 		resp.writeHead( 200 );
-		resp.end( callback + "(" + JSON.stringify( body ) + ")\n" );
+		resp.end( cleanCallback( callback ) + "(" + JSON.stringify( body ) + ")\n" );
 	},
 	error: function( req, resp ) {
 		if ( req.query.json ) {
@@ -218,7 +222,7 @@ testHTML: function( req, resp ) {
 	cspFrame: function( req, resp ) {
 		resp.writeHead( 200, {
 			"Content-Type": "text/html",
-			"Content-Security-Policy": "default-src 'self'; report-uri /base/test/data/mock.php?action=cspLog"
+			"Content-Security-Policy": "default-src 'self'; require-trusted-types-for 'script'; report-uri /base/test/data/mock.php?action=cspLog"
 		} );
 		var body = fs.readFileSync( __dirname + "/data/csp.include.html" ).toString();
 		resp.end( body );
@@ -252,14 +256,31 @@ cspClean: function( req, resp ) {
 		resp.writeHead( 200 );
 		resp.end();
 	},
+	trustedHtml: function( req, resp ) {
+		resp.writeHead( 200, {
+			"Content-Type": "text/html",
+			"Content-Security-Policy": "require-trusted-types-for 'script'; report-uri /base/test/data/mock.php?action=cspLog"
+		} );
+		var body = fs.readFileSync( __dirname + "/data/trusted-html.html" ).toString();
+		resp.end( body );
+	},
+	trustedTypesAttributes: function( req, resp ) {
+		resp.writeHead( 200, {
+			"Content-Type": "text/html",
+			"Content-Security-Policy": "require-trusted-types-for 'script'; report-uri /base/test/data/mock.php?action=cspLog"
+		} );
+		var body = fs.readFileSync( __dirname + "/data/trusted-types-attributes.html" ).toString();
+		resp.end( body );
+	},
 	errorWithScript: function( req, resp ) {
 		if ( req.query.withScriptContentType ) {
 			resp.writeHead( 404, { "Content-Type": "application/javascript" } );
 		} else {
-			resp.writeHead( 404 );
+			resp.writeHead( 404, { "Content-Type": "text/html; charset=UTF-8" } );
 		}
 		if ( req.query.callback ) {
-			resp.end( req.query.callback + "( {\"status\": 404, \"msg\": \"Not Found\"} )" );
+			resp.end( cleanCallback( req.query.callback ) +
+				"( {\"status\": 404, \"msg\": \"Not Found\"} )" );
 		} else {
 			resp.end( "QUnit.assert.ok( false, \"Mock return erroneously executed\" );" );
 		}
diff --git a/a.js b/b.js
index b3b78cc5..d06ce997 100644
--- a/a.js
+++ b/b.js
@@ -71,13 +71,20 @@ ajaxTest( "jQuery.ajax() - success callbacks - (url, options) syntax", 8, functi
 		};
 	} );
 
-	ajaxTest( "jQuery.ajax() - execute js for crossOrigin when dataType option is provided", 3,
+	ajaxTest( "jQuery.ajax() - custom attributes for script tag", 5,
 		function( assert ) {
 			return {
 				create: function( options ) {
-					options.crossDomain = true;
+					var xhr;
+					options.method = "POST";
 					options.dataType = "script";
-					return jQuery.ajax( url( "mock.php?action=script&header=ecma" ), options );
+					options.scriptAttrs = { id: "jquery-ajax-test", async: "async" };
+					xhr = jQuery.ajax( url( "mock.php?action=script" ), options );
+					assert.equal( jQuery( "#jquery-ajax-test" ).attr( "async" ), "async", "attr value" );
+					return xhr;
+				},
+				beforeSend: function( _jqXhr, settings ) {
+					assert.strictEqual( settings.type, "GET", "Type changed to GET" );
 				},
 				success: function() {
 					assert.ok( true, "success" );
@@ -89,20 +96,13 @@ ajaxTest( "jQuery.ajax() - execute js for crossOrigin when dataType option is pr
 		}
 	);
 
-	ajaxTest( "jQuery.ajax() - custom attributes for script tag", 5,
+	ajaxTest( "jQuery.ajax() - execute JS when dataType option is provided", 3,
 		function( assert ) {
 			return {
 				create: function( options ) {
-					var xhr;
-					options.method = "POST";
+					options.crossDomain = true;
 					options.dataType = "script";
-					options.scriptAttrs = { id: "jquery-ajax-test", async: "async" };
-					xhr = jQuery.ajax( url( "mock.php?action=script" ), options );
-					assert.equal( jQuery( "#jquery-ajax-test" ).attr( "async" ), "async", "attr value" );
-					return xhr;
-				},
-				beforeSend: function( _jqXhr, settings ) {
-					assert.strictEqual( settings.type, "GET", "Type changed to GET" );
+					return jQuery.ajax( url( "mock.php?action=script&header=ecma" ), options );
 				},
 				success: function() {
 					assert.ok( true, "success" );
@@ -114,22 +114,16 @@ ajaxTest( "jQuery.ajax() - custom attributes for script tag", 5,
 		}
 	);
 
-	ajaxTest( "jQuery.ajax() - do not execute js (crossOrigin)", 2, function( assert ) {
-		return {
-			create: function( options ) {
-				options.crossDomain = true;
-				return jQuery.ajax( url( "mock.php?action=script" ), options );
-			},
-			success: function() {
-				assert.ok( true, "success" );
-			},
-			fail: function() {
-				assert.ok( false, "fail" );
-			},
-			complete: function() {
-				assert.ok( true, "complete" );
-			}
-		};
+	jQuery.each( [ " - Same Domain", " - Cross Domain" ], function( crossDomain, label ) {
+		ajaxTest( "jQuery.ajax() - do not execute JS (gh-2432, gh-4822) " + label, 1, function( assert ) {
+			return {
+				url: url( "mock.php?action=script&header" ),
+				crossDomain: crossDomain,
+				success: function() {
+					assert.ok( true, "success" );
+				}
+			};
+		} );
 	} );
 
 	ajaxTest( "jQuery.ajax() - success callbacks (late binding)", 8, function( assert ) {
@@ -619,7 +613,7 @@ ajaxTest( "jQuery.ajax() - events without context", 3, function( assert ) {
 		};
 	} );
 
-	ajaxTest( "#15118 - jQuery.ajax() - function without jQuery.event", 1, function( assert ) {
+	ajaxTest( "trac-15118 - jQuery.ajax() - function without jQuery.event", 1, function( assert ) {
 		var holder;
 		return {
 			url: url( "mock.php?action=json" ),
@@ -635,7 +629,7 @@ ajaxTest( "#15118 - jQuery.ajax() - function without jQuery.event", 1, function(
 		};
 	} );
 
-	ajaxTest( "#15160 - jQuery.ajax() - request manually aborted in ajaxSend", 3, function( assert ) {
+	ajaxTest( "trac-15160 - jQuery.ajax() - request manually aborted in ajaxSend", 3, function( assert ) {
 		return {
 			setup: function() {
 				jQuery( document ).on( "ajaxSend", function( e, jqXHR ) {
@@ -1439,25 +1433,6 @@ ajaxTest( "jQuery.ajax() - malformed JSON", 2, function( assert ) {
 		};
 	} );
 
-	ajaxTest( "jQuery.ajax() - script by content-type", 2, function() {
-		return [
-			{
-				url: baseURL + "mock.php?action=script",
-				data: {
-					"header": "script"
-				},
-				success: true
-			},
-			{
-				url: baseURL + "mock.php?action=script",
-				data: {
-					"header": "ecma"
-				},
-				success: true
-			}
-		];
-	} );
-
 	ajaxTest( "jQuery.ajax() - JSON by content-type", 5, function( assert ) {
 		return {
 			url: baseURL + "mock.php?action=json",
@@ -1659,12 +1634,25 @@ ajaxTest( "jQuery.ajax() - data - no processing GET", 1, function( assert ) {
 		function( label, cache ) {
 			jQuery.each(
 				{
-					"If-Modified-Since": "mock.php?action=ims",
-					"Etag": "mock.php?action=etag"
+					"If-Modified-Since": {
+						url: "mock.php?action=ims",
+						qunitMethod: "test"
+					},
+					"Etag": {
+						url: "mock.php?action=etag",
+
+						// Support: TestSwarm
+						// TestSwarm is now proxied via Cloudflare which cuts out
+						// headers relevant for ETag tests, failing them. We're still
+						// running those tests in Karma on Chrome & Firefox (including
+						// Firefox ESR).
+						qunitMethod: QUnit.isSwarm ? "skip" : "test"
+					}
 				},
-				function( type, url ) {
-					url = baseURL + url + "&ts=" + ifModifiedNow++;
-					QUnit.test( "jQuery.ajax() - " + type + " support" + label, function( assert ) {
+				function( type, data ) {
+					var url = baseURL + data.url + "&ts=" + ifModifiedNow++;
+					QUnit[ data.qunitMethod ]( "jQuery.ajax() - " + type +
+							" support" + label, function( assert ) {
 						assert.expect( 4 );
 						var done = assert.async();
 						jQuery.ajax( {
@@ -1729,7 +1717,8 @@ QUnit.test( "jQuery.ajax() - statusText", function( assert ) {
 		var done = assert.async();
 		jQuery.ajax( url( "mock.php?action=status&code=200&text=Hello" ) ).done( function( _, statusText, jqXHR ) {
 			assert.strictEqual( statusText, "success", "callback status text ok for success" );
-			assert.ok( jqXHR.statusText === "Hello" || jqXHR.statusText === "OK", "jqXHR status text ok for success (" + jqXHR.statusText + ")" );
+			assert.ok( [ "Hello", "OK", "success" ].indexOf( jqXHR.statusText ) > -1,
+				"jqXHR status text ok for success (" + jqXHR.statusText + ")" );
 			jQuery.ajax( url( "mock.php?action=status&code=404&text=World" ) ).fail( function( jqXHR, statusText ) {
 				assert.strictEqual( statusText, "error", "callback status text ok for error" );
 				done();
@@ -1906,7 +1895,7 @@ ajaxTest( "jQuery.ajax() - empty json gets to error callback instead of success
 		};
 	} );
 
-	ajaxTest( "#2688 - jQuery.ajax() - beforeSend, cancel request", 2, function( assert ) {
+	ajaxTest( "trac-2688 - jQuery.ajax() - beforeSend, cancel request", 2, function( assert ) {
 		return {
 			create: function() {
 				return jQuery.ajax( {
@@ -1932,7 +1921,7 @@ ajaxTest( "#2688 - jQuery.ajax() - beforeSend, cancel request", 2, function( ass
 		};
 	} );
 
-	ajaxTest( "#2806 - jQuery.ajax() - data option - evaluate function values", 1, function( assert ) {
+	ajaxTest( "trac-2806 - jQuery.ajax() - data option - evaluate function values", 1, function( assert ) {
 		return {
 			url: baseURL + "mock.php?action=echoQuery",
 			data: {
@@ -1946,7 +1935,7 @@ ajaxTest( "#2806 - jQuery.ajax() - data option - evaluate function values", 1, f
 		};
 	} );
 
-	QUnit.test( "#7531 - jQuery.ajax() - Location object as url", function( assert ) {
+	QUnit.test( "trac-7531 - jQuery.ajax() - Location object as url", function( assert ) {
 		assert.expect( 1 );
 
 		var xhr,
@@ -1964,7 +1953,7 @@ QUnit.test( "#7531 - jQuery.ajax() - Location object as url", function( assert )
 	} );
 
 	jQuery.each( [ " - Same Domain", " - Cross Domain" ], function( crossDomain, label ) {
-		ajaxTest( "#7578 - jQuery.ajax() - JSONP - default for cache option" + label, 1, function( assert ) {
+		ajaxTest( "trac-7578 - jQuery.ajax() - JSONP - default for cache option" + label, 1, function( assert ) {
 			return {
 				url: baseURL + "mock.php?action=jsonp",
 				dataType: "jsonp",
@@ -1978,7 +1967,7 @@ QUnit.test( "#7531 - jQuery.ajax() - Location object as url", function( assert )
 		} );
 	} );
 
-	ajaxTest( "#8107 - jQuery.ajax() - multiple method signatures introduced in 1.5", 4, function( assert ) {
+	ajaxTest( "trac-8107 - jQuery.ajax() - multiple method signatures introduced in 1.5", 4, function( assert ) {
 		return [
 			{
 				create: function() {
@@ -2017,7 +2006,7 @@ ajaxTest( "#8107 - jQuery.ajax() - multiple method signatures introduced in 1.5"
 	} );
 
 	jQuery.each( [ " - Same Domain", " - Cross Domain" ], function( crossDomain, label ) {
-		ajaxTest( "#8205 - jQuery.ajax() - JSONP - re-use callbacks name" + label, 4, function( assert ) {
+		ajaxTest( "trac-8205 - jQuery.ajax() - JSONP - re-use callbacks name" + label, 4, function( assert ) {
 			return {
 				url: baseURL + "mock.php?action=jsonp",
 				dataType: "jsonp",
@@ -2055,7 +2044,7 @@ ajaxTest( "#8107 - jQuery.ajax() - multiple method signatures introduced in 1.5"
 		} );
 	} );
 
-	QUnit.test( "#9887 - jQuery.ajax() - Context with circular references (#9887)", function( assert ) {
+	QUnit.test( "trac-9887 - jQuery.ajax() - Context with circular references (trac-9887)", function( assert ) {
 		assert.expect( 2 );
 
 		var success = false,
@@ -2089,7 +2078,7 @@ QUnit.test( "#9887 - jQuery.ajax() - Context with circular references (#9887)",
 			};
 		}
 
-		ajaxTest( "#10093 - jQuery.ajax() - falsy url " + title, 4, function( assert ) {
+		ajaxTest( "trac-10093 - jQuery.ajax() - falsy url " + title, 4, function( assert ) {
 			return [
 				request( assert, "", "empty string" ),
 				request( assert, false ),
@@ -2099,7 +2088,7 @@ QUnit.test( "#9887 - jQuery.ajax() - Context with circular references (#9887)",
 		} );
 	} );
 
-	ajaxTest( "#11151 - jQuery.ajax() - parse error body", 2, function( assert ) {
+	ajaxTest( "trac-11151 - jQuery.ajax() - parse error body", 2, function( assert ) {
 		return {
 			url: url( "mock.php?action=error&json=1" ),
 			dataFilter: function( string ) {
@@ -2113,7 +2102,7 @@ ajaxTest( "#11151 - jQuery.ajax() - parse error body", 2, function( assert ) {
 		};
 	} );
 
-	ajaxTest( "#11426 - jQuery.ajax() - loading binary data shouldn't throw an exception in IE", 1, function( assert ) {
+	ajaxTest( "trac-11426 - jQuery.ajax() - loading binary data shouldn't throw an exception in IE", 1, function( assert ) {
 		return {
 			url: url( "1x1.jpg" ),
 			success: function( data ) {
@@ -2146,7 +2135,7 @@ ajaxTest( "gh-2498 - jQuery.ajax() - binary data shouldn't throw an exception",
 	} );
 }
 
-	QUnit.test( "#11743 - jQuery.ajax() - script, throws exception", function( assert ) {
+	QUnit.test( "trac-11743 - jQuery.ajax() - script, throws exception", function( assert ) {
 		assert.expect( 1 );
 		var done = assert.async();
 		var onerror = window.onerror;
@@ -2181,7 +2170,7 @@ 				options.success = function( msg ) {
 		}
 
 		ajaxTest(
-			"#12004 - jQuery.ajax() - method is an alias of type - " +
+			"trac-12004 - jQuery.ajax() - method is an alias of type - " +
 			globalOption + " set globally", 3,
 			function( assert ) {
 				return {
@@ -2200,7 +2189,7 @@ 				options.success = function( msg ) {
 		);
 	} );
 
-	ajaxTest( "#13276 - jQuery.ajax() - compatibility between XML documents from ajax requests and parsed string", 1, function( assert ) {
+	ajaxTest( "trac-13276 - jQuery.ajax() - compatibility between XML documents from ajax requests and parsed string", 1, function( assert ) {
 		return {
 			url: baseURL + "dashboard.xml",
 			dataType: "xml",
@@ -2218,7 +2207,7 @@ ajaxTest( "#13276 - jQuery.ajax() - compatibility between XML documents from aja
 		};
 	} );
 
-	ajaxTest( "#13292 - jQuery.ajax() - converter is bypassed for 204 requests", 3, function( assert ) {
+	ajaxTest( "trac-13292 - jQuery.ajax() - converter is bypassed for 204 requests", 3, function( assert ) {
 		return {
 			url: baseURL + "mock.php?action=status&code=204&text=No+Content",
 			dataType: "testing",
@@ -2240,7 +2229,7 @@ ajaxTest( "#13292 - jQuery.ajax() - converter is bypassed for 204 requests", 3,
 		};
 	} );
 
-	ajaxTest( "#13388 - jQuery.ajax() - responseXML", 3, function( assert ) {
+	ajaxTest( "trac-13388 - jQuery.ajax() - responseXML", 3, function( assert ) {
 		return {
 			url: url( "with_fries.xml" ),
 			dataType: "xml",
@@ -2252,7 +2241,7 @@ ajaxTest( "#13388 - jQuery.ajax() - responseXML", 3, function( assert ) {
 		};
 	} );
 
-	ajaxTest( "#13922 - jQuery.ajax() - converter is bypassed for HEAD requests", 3, function( assert ) {
+	ajaxTest( "trac-13922 - jQuery.ajax() - converter is bypassed for HEAD requests", 3, function( assert ) {
 		return {
 			url: baseURL + "mock.php?action=json",
 			method: "HEAD",
@@ -2283,7 +2272,7 @@ ajaxTest( "#13922 - jQuery.ajax() - converter is bypassed for HEAD requests", 3,
 	// Safari 13 did similar changes. The below check will catch them both.
 	if ( !/safari/i.test( navigator.userAgent ) ) {
 		testIframe(
-			"#14379 - jQuery.ajax() on unload",
+			"trac-14379 - jQuery.ajax() on unload",
 			"ajax/onunload.html",
 			function( assert, jQuery, window, document, status ) {
 				assert.expect( 1 );
@@ -2292,7 +2281,7 @@ ajaxTest( "#13922 - jQuery.ajax() - converter is bypassed for HEAD requests", 3,
 		);
 	}
 
-	ajaxTest( "#14683 - jQuery.ajax() - Exceptions thrown synchronously by xhr.send should be caught", 4, function( assert ) {
+	ajaxTest( "trac-14683 - jQuery.ajax() - Exceptions thrown synchronously by xhr.send should be caught", 4, function( assert ) {
 		return [ {
 			url: baseURL + "mock.php?action=echoData",
 			method: "POST",
@@ -2515,7 +2504,7 @@ QUnit.test( "jQuery.ajaxSetup({ timeout: Number }) with localtimeout", function(
 
 //----------- jQuery.domManip()
 
-	QUnit.test( "#11264 - jQuery.domManip() - no side effect because of ajaxSetup or global events", function( assert ) {
+	QUnit.test( "trac-11264 - jQuery.domManip() - no side effect because of ajaxSetup or global events", function( assert ) {
 		assert.expect( 1 );
 
 		jQuery.ajaxSetup( {
@@ -2532,7 +2521,7 @@ QUnit.test( "#11264 - jQuery.domManip() - no side effect because of ajaxSetup or
 	} );
 
 	QUnit.test(
-		"jQuery#load() - always use GET method even if it overrided through ajaxSetup (#11264)",
+		"jQuery#load() - always use GET method even if it overrided through ajaxSetup (trac-11264)",
 		function( assert ) {
 			assert.expect( 1 );
 			var done = assert.async();
@@ -2569,7 +2558,7 @@ QUnit.test(
 	);
 
 	QUnit.test(
-		"#11402 - jQuery.domManip() - script in comments are properly evaluated",
+		"trac-11402 - jQuery.domManip() - script in comments are properly evaluated",
 		function( assert ) {
 			assert.expect( 2 );
 			jQuery( "#qunit-fixture" ).load( baseURL + "cleanScript.html", assert.async() );
@@ -2592,7 +2581,7 @@ QUnit.test( "jQuery.get( String, Hash, Function ) - parse xml and use text() on
 		} );
 	} );
 
-	QUnit.test( "#8277 - jQuery.get( String, Function ) - data in ajaxSettings", function( assert ) {
+	QUnit.test( "trac-8277 - jQuery.get( String, Function ) - data in ajaxSettings", function( assert ) {
 		assert.expect( 1 );
 		var done = assert.async();
 		jQuery.ajaxSetup( {
@@ -2683,7 +2672,7 @@ QUnit.test( "jQuery.getScript( String, Function ) - no callback", function( asse
 		jQuery.getScript( url( "mock.php?action=testbar" ) ).done( assert.async() );
 	} );
 
-	QUnit.test( "#8082 - jQuery.getScript( String, Function ) - source as responseText", function( assert ) {
+	QUnit.test( "trac-8082 - jQuery.getScript( String, Function ) - source as responseText", function( assert ) {
 		assert.expect( 2 );
 		var done = assert.async();
 
@@ -2770,7 +2759,7 @@ QUnit.test( "jQuery.fn.load( URL_SELECTOR )", function( assert ) {
 		} );
 	} );
 
-	// Selector should be trimmed to avoid leading spaces (#14773)
+	// Selector should be trimmed to avoid leading spaces (trac-14773)
 	QUnit.test( "jQuery.fn.load( URL_SELECTOR with spaces )", function( assert ) {
 		assert.expect( 1 );
 		var done = assert.async();
@@ -2780,9 +2769,9 @@ QUnit.test( "jQuery.fn.load( URL_SELECTOR with spaces )", function( assert ) {
 		} );
 	} );
 
-	// Selector should be trimmed to avoid leading spaces (#14773)
-	// Selector should include any valid non-HTML whitespace (#3003)
-	QUnit.test( "jQuery.fn.load( URL_SELECTOR with non-HTML whitespace(#3003) )", function( assert ) {
+	// Selector should be trimmed to avoid leading spaces (trac-14773)
+	// Selector should include any valid non-HTML whitespace (gh-3003)
+	QUnit.test( "jQuery.fn.load( URL_SELECTOR with non-HTML whitespace(gh-3003) )", function( assert ) {
 		assert.expect( 1 );
 		var done = assert.async();
 		jQuery( "#first" ).load( baseURL + "test3.html   #whitespace\\\\xA0 ", function() {
@@ -2913,7 +2902,7 @@ QUnit.test( "jQuery.fn.load() - callbacks get the correct parameters", function(
 		).always( done );
 	} );
 
-	QUnit.test( "#2046 - jQuery.fn.load( String, Function ) with ajaxSetup on dataType json", function( assert ) {
+	QUnit.test( "trac-2046 - jQuery.fn.load( String, Function ) with ajaxSetup on dataType json", function( assert ) {
 		assert.expect( 1 );
 		var done = assert.async();
 
@@ -2928,7 +2917,7 @@ QUnit.test( "#2046 - jQuery.fn.load( String, Function ) with ajaxSetup on dataTy
 		jQuery( "#first" ).load( baseURL + "test3.html" );
 	} );
 
-	QUnit.test( "#10524 - jQuery.fn.load() - data specified in ajaxSettings is merged in", function( assert ) {
+	QUnit.test( "trac-10524 - jQuery.fn.load() - data specified in ajaxSettings is merged in", function( assert ) {
 		assert.expect( 1 );
 		var done = assert.async();
 
diff --git a/a.js b/b.js
index 126d12a1..29dca0e4 100644
--- a/a.js
+++ b/b.js
@@ -4,6 +4,7 @@
 import rcssNum from "./var/rcssNum.js";
 import isIE from "./var/isIE.js";
 import rnumnonpx from "./css/var/rnumnonpx.js";
+import rcustomProp from "./css/var/rcustomProp.js";
 import cssExpand from "./css/var/cssExpand.js";
 import isAutoPx from "./css/isAutoPx.js";
 import cssCamelCase from "./css/cssCamelCase.js";
@@ -12,6 +13,7 @@
 import curCSS from "./css/curCSS.js";
 import adjustCSS from "./css/adjustCSS.js";
 import finalPropName from "./css/finalPropName.js";
+import support from "./css/support.js";
 
 import "./core/init.js";
 import "./core/ready.js";
@@ -23,7 +25,6 @@
 	// except "table", "table-cell", or "table-caption"
 	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
 	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
-	rcustomProp = /^--/,
 	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
 	cssNormalTransform = {
 		letterSpacing: "0",
@@ -134,23 +135,24 @@ function getWidthOrHeight( elem, dimension, extra ) {
 	}
 
 
-	if ( ( isIE &&
-		(
-
-			// Support: IE 9 - 11+
-			// Use offsetWidth/offsetHeight for when box sizing is unreliable.
-			// In those cases, the computed value can be trusted to be border-box.
-			isBorderBox ||
-
-			// Support: IE 10 - 11+
-			// IE misreports `getComputedStyle` of table rows with width/height
-			// set in CSS while `offset*` properties report correct values.
-			nodeName( elem, "tr" )
-		) ||
+	if ( (
 
 		// Fall back to offsetWidth/offsetHeight when value is "auto"
 		// This happens for inline elements with no explicit setting (gh-3571)
-		val === "auto" ) &&
+		val === "auto" ||
+
+		// Support: IE 9 - 11+
+		// Use offsetWidth/offsetHeight for when box sizing is unreliable.
+		// In those cases, the computed value can be trusted to be border-box.
+		( isIE && isBorderBox ) ||
+
+		// Support: IE 10 - 11+
+		// IE misreports `getComputedStyle` of table rows with width/height
+		// set in CSS while `offset*` properties report correct values.
+		// Support: Firefox 70+
+		// Firefox includes border widths
+		// in computed dimensions for table rows. (gh-4529)
+		( !support.reliableTrDimensions() && nodeName( elem, "tr" ) ) ) &&
 
 		// Make sure the element is visible & connected
 		elem.getClientRects().length ) {
@@ -218,15 +220,15 @@ style: function( elem, name, value, extra ) {
 		if ( value !== undefined ) {
 			type = typeof value;
 
-			// Convert "+=" or "-=" to relative numbers (#7345)
+			// Convert "+=" or "-=" to relative numbers (trac-7345)
 			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
 				value = adjustCSS( elem, name, ret );
 
-				// Fixes bug #9237
+				// Fixes bug trac-9237
 				type = "number";
 			}
 
-			// Make sure that null and NaN values aren't set (#7116)
+			// Make sure that null and NaN values aren't set (trac-7116)
 			if ( value == null || value !== value ) {
 				return;
 			}
@@ -237,7 +239,7 @@ style: function( elem, name, value, extra ) {
 			}
 
 			// Support: IE <=9 - 11+
-			// background-* props of a cloned element affect the source element (#8908)
+			// background-* props of a cloned element affect the source element (trac-8908)
 			if ( isIE && value === "" && name.indexOf( "background" ) === 0 ) {
 				style[ name ] = "inherit";
 			}
diff --git a/a.js b/b.js
index 280a54eb..48225999 100644
--- a/a.js
+++ b/b.js
@@ -38,7 +38,7 @@ function testWidth( val, assert ) {
 	$div.css( "display", "none" );
 	assert.equal( $div.width(), 30, "Test hidden div" );
 	$div.css( "display", "" );
-	$div.width( val( -1 ) ); // handle negative numbers by setting to 0 #11604
+	$div.width( val( -1 ) ); // handle negative numbers by setting to 0 trac-11604
 	assert.equal( $div.width(), 0, "Test negative width normalized to 0" );
 	$div.css( "padding", "20px" );
 	assert.equal( $div.width(), 0, "Test padding specified with pixels" );
@@ -89,7 +89,7 @@ function testHeight( val, assert ) {
 	$div.css( "display", "none" );
 	assert.equal( $div.height(), 30, "Test hidden div" );
 	$div.css( "display", "" );
-	$div.height( val( -1 ) ); // handle negative numbers by setting to 0 #11604
+	$div.height( val( -1 ) ); // handle negative numbers by setting to 0 trac-11604
 	assert.equal( $div.height(), 0, "Test negative height normalized to 0" );
 	$div.css( "padding", "20px" );
 	assert.equal( $div.height(), 0, "Test padding specified with pixels" );
@@ -279,7 +279,7 @@ QUnit.test( "outerHeight()", function( assert ) {
 	div.remove();
 } );
 
-QUnit.test( "child of a hidden elem (or unconnected node) has accurate inner/outer/Width()/Height()  see #9441 #9300", function( assert ) {
+QUnit.test( "child of a hidden elem (or unconnected node) has accurate inner/outer/Width()/Height()  see trac-9441 trac-9300", function( assert ) {
 	assert.expect( 16 );
 
 	// setup html
@@ -290,33 +290,33 @@ QUnit.test( "child of a hidden elem (or unconnected node) has accurate inner/out
 	$divNormal.appendTo( "body" );
 
 	// tests that child div of a hidden div works the same as a normal div
-	assert.equal( $divChild.width(), $divNormal.width(), "child of a hidden element width() is wrong see #9441" );
-	assert.equal( $divChild.innerWidth(), $divNormal.innerWidth(), "child of a hidden element innerWidth() is wrong see #9441" );
-	assert.equal( $divChild.outerWidth(), $divNormal.outerWidth(), "child of a hidden element outerWidth() is wrong see #9441" );
-	assert.equal( $divChild.outerWidth( true ), $divNormal.outerWidth( true ), "child of a hidden element outerWidth( true ) is wrong see #9300" );
+	assert.equal( $divChild.width(), $divNormal.width(), "child of a hidden element width() is wrong see trac-9441" );
+	assert.equal( $divChild.innerWidth(), $divNormal.innerWidth(), "child of a hidden element innerWidth() is wrong see trac-9441" );
+	assert.equal( $divChild.outerWidth(), $divNormal.outerWidth(), "child of a hidden element outerWidth() is wrong see trac-9441" );
+	assert.equal( $divChild.outerWidth( true ), $divNormal.outerWidth( true ), "child of a hidden element outerWidth( true ) is wrong see trac-9300" );
 
-	assert.equal( $divChild.height(), $divNormal.height(), "child of a hidden element height() is wrong see #9441" );
-	assert.equal( $divChild.innerHeight(), $divNormal.innerHeight(), "child of a hidden element innerHeight() is wrong see #9441" );
-	assert.equal( $divChild.outerHeight(), $divNormal.outerHeight(), "child of a hidden element outerHeight() is wrong see #9441" );
-	assert.equal( $divChild.outerHeight( true ), $divNormal.outerHeight( true ), "child of a hidden element outerHeight( true ) is wrong see #9300" );
+	assert.equal( $divChild.height(), $divNormal.height(), "child of a hidden element height() is wrong see trac-9441" );
+	assert.equal( $divChild.innerHeight(), $divNormal.innerHeight(), "child of a hidden element innerHeight() is wrong see trac-9441" );
+	assert.equal( $divChild.outerHeight(), $divNormal.outerHeight(), "child of a hidden element outerHeight() is wrong see trac-9441" );
+	assert.equal( $divChild.outerHeight( true ), $divNormal.outerHeight( true ), "child of a hidden element outerHeight( true ) is wrong see trac-9300" );
 
 	// tests that child div of an unconnected div works the same as a normal div
-	assert.equal( $divUnconnected.width(), $divNormal.width(), "unconnected element width() is wrong see #9441" );
-	assert.equal( $divUnconnected.innerWidth(), $divNormal.innerWidth(), "unconnected element innerWidth() is wrong see #9441" );
-	assert.equal( $divUnconnected.outerWidth(), $divNormal.outerWidth(), "unconnected element outerWidth() is wrong see #9441" );
-	assert.equal( $divUnconnected.outerWidth( true ), $divNormal.outerWidth( true ), "unconnected element outerWidth( true ) is wrong see #9300" );
+	assert.equal( $divUnconnected.width(), $divNormal.width(), "unconnected element width() is wrong see trac-9441" );
+	assert.equal( $divUnconnected.innerWidth(), $divNormal.innerWidth(), "unconnected element innerWidth() is wrong see trac-9441" );
+	assert.equal( $divUnconnected.outerWidth(), $divNormal.outerWidth(), "unconnected element outerWidth() is wrong see trac-9441" );
+	assert.equal( $divUnconnected.outerWidth( true ), $divNormal.outerWidth( true ), "unconnected element outerWidth( true ) is wrong see trac-9300" );
 
-	assert.equal( $divUnconnected.height(), $divNormal.height(), "unconnected element height() is wrong see #9441" );
-	assert.equal( $divUnconnected.innerHeight(), $divNormal.innerHeight(), "unconnected element innerHeight() is wrong see #9441" );
-	assert.equal( $divUnconnected.outerHeight(), $divNormal.outerHeight(), "unconnected element outerHeight() is wrong see #9441" );
-	assert.equal( $divUnconnected.outerHeight( true ), $divNormal.outerHeight( true ), "unconnected element outerHeight( true ) is wrong see #9300" );
+	assert.equal( $divUnconnected.height(), $divNormal.height(), "unconnected element height() is wrong see trac-9441" );
+	assert.equal( $divUnconnected.innerHeight(), $divNormal.innerHeight(), "unconnected element innerHeight() is wrong see trac-9441" );
+	assert.equal( $divUnconnected.outerHeight(), $divNormal.outerHeight(), "unconnected element outerHeight() is wrong see trac-9441" );
+	assert.equal( $divUnconnected.outerHeight( true ), $divNormal.outerHeight( true ), "unconnected element outerHeight( true ) is wrong see trac-9300" );
 
 	// teardown html
 	$divHiddenParent.remove();
 	$divNormal.remove();
 } );
 
-QUnit.test( "getting dimensions shouldn't modify runtimeStyle see #9233", function( assert ) {
+QUnit.test( "getting dimensions shouldn't modify runtimeStyle see trac-9233", function( assert ) {
 	assert.expect( 1 );
 
 	var $div = jQuery( "<div>" ).appendTo( "#qunit-fixture" ),
@@ -331,9 +331,9 @@ QUnit.test( "getting dimensions shouldn't modify runtimeStyle see #9233", functi
 	$div.outerWidth( true );
 
 	if ( runtimeStyle ) {
-		assert.equal( div.runtimeStyle.left, "11em", "getting dimensions modifies runtimeStyle, see #9233" );
+		assert.equal( div.runtimeStyle.left, "11em", "getting dimensions modifies runtimeStyle, see trac-9233" );
 	} else {
-		assert.ok( true, "this browser doesn't support runtimeStyle, see #9233" );
+		assert.ok( true, "this browser doesn't support runtimeStyle, see trac-9233" );
 	}
 
 	$div.remove();
@@ -348,8 +348,8 @@ QUnit.test( "table dimensions", function( assert ) {
 
 	table.find( "td" ).css( { "margin": 0, "padding": 0 } );
 
-	assert.equal( tdElem.width(), tdElem.width(), "width() doesn't alter dimension values of empty cells, see #11293" );
-	assert.equal( colElem.width(), 300, "col elements have width(), see #12243" );
+	assert.equal( tdElem.width(), tdElem.width(), "width() doesn't alter dimension values of empty cells, see trac-11293" );
+	assert.equal( colElem.width(), 300, "col elements have width(), see trac-12243" );
 } );
 
 QUnit.test( "SVG dimensions (basic content-box)", function( assert ) {
@@ -412,7 +412,7 @@ QUnit.test( "SVG dimensions (border-box)", function( assert ) {
 	svg.remove();
 } );
 
-QUnit.test( "box-sizing:border-box child of a hidden elem (or unconnected node) has accurate inner/outer/Width()/Height()  see #10413", function( assert ) {
+QUnit.test( "box-sizing:border-box child of a hidden elem (or unconnected node) has accurate inner/outer/Width()/Height()  see trac-10413", function( assert ) {
 	assert.expect( 16 );
 
 	// setup html
@@ -423,38 +423,38 @@ QUnit.test( "box-sizing:border-box child of a hidden elem (or unconnected node)
 	$divNormal.appendTo( "body" );
 
 	// tests that child div of a hidden div works the same as a normal div
-	assert.equal( $divChild.width(), $divNormal.width(), "child of a hidden element width() is wrong see #10413" );
-	assert.equal( $divChild.innerWidth(), $divNormal.innerWidth(), "child of a hidden element innerWidth() is wrong see #10413" );
-	assert.equal( $divChild.outerWidth(), $divNormal.outerWidth(), "child of a hidden element outerWidth() is wrong see #10413" );
-	assert.equal( $divChild.outerWidth( true ), $divNormal.outerWidth( true ), "child of a hidden element outerWidth( true ) is wrong see #10413" );
+	assert.equal( $divChild.width(), $divNormal.width(), "child of a hidden element width() is wrong see trac-10413" );
+	assert.equal( $divChild.innerWidth(), $divNormal.innerWidth(), "child of a hidden element innerWidth() is wrong see trac-10413" );
+	assert.equal( $divChild.outerWidth(), $divNormal.outerWidth(), "child of a hidden element outerWidth() is wrong see trac-10413" );
+	assert.equal( $divChild.outerWidth( true ), $divNormal.outerWidth( true ), "child of a hidden element outerWidth( true ) is wrong see trac-10413" );
 
-	assert.equal( $divChild.height(), $divNormal.height(), "child of a hidden element height() is wrong see #10413" );
-	assert.equal( $divChild.innerHeight(), $divNormal.innerHeight(), "child of a hidden element innerHeight() is wrong see #10413" );
-	assert.equal( $divChild.outerHeight(), $divNormal.outerHeight(), "child of a hidden element outerHeight() is wrong see #10413" );
-	assert.equal( $divChild.outerHeight( true ), $divNormal.outerHeight( true ), "child of a hidden element outerHeight( true ) is wrong see #10413" );
+	assert.equal( $divChild.height(), $divNormal.height(), "child of a hidden element height() is wrong see trac-10413" );
+	assert.equal( $divChild.innerHeight(), $divNormal.innerHeight(), "child of a hidden element innerHeight() is wrong see trac-10413" );
+	assert.equal( $divChild.outerHeight(), $divNormal.outerHeight(), "child of a hidden element outerHeight() is wrong see trac-10413" );
+	assert.equal( $divChild.outerHeight( true ), $divNormal.outerHeight( true ), "child of a hidden element outerHeight( true ) is wrong see trac-10413" );
 
 	// tests that child div of an unconnected div works the same as a normal div
-	assert.equal( $divUnconnected.width(), $divNormal.width(), "unconnected element width() is wrong see #10413" );
-	assert.equal( $divUnconnected.innerWidth(), $divNormal.innerWidth(), "unconnected element innerWidth() is wrong see #10413" );
-	assert.equal( $divUnconnected.outerWidth(), $divNormal.outerWidth(), "unconnected element outerWidth() is wrong see #10413" );
-	assert.equal( $divUnconnected.outerWidth( true ), $divNormal.outerWidth( true ), "unconnected element outerWidth( true ) is wrong see #10413" );
+	assert.equal( $divUnconnected.width(), $divNormal.width(), "unconnected element width() is wrong see trac-10413" );
+	assert.equal( $divUnconnected.innerWidth(), $divNormal.innerWidth(), "unconnected element innerWidth() is wrong see trac-10413" );
+	assert.equal( $divUnconnected.outerWidth(), $divNormal.outerWidth(), "unconnected element outerWidth() is wrong see trac-10413" );
+	assert.equal( $divUnconnected.outerWidth( true ), $divNormal.outerWidth( true ), "unconnected element outerWidth( true ) is wrong see trac-10413" );
 
-	assert.equal( $divUnconnected.height(), $divNormal.height(), "unconnected element height() is wrong see #10413" );
-	assert.equal( $divUnconnected.innerHeight(), $divNormal.innerHeight(), "unconnected element innerHeight() is wrong see #10413" );
-	assert.equal( $divUnconnected.outerHeight(), $divNormal.outerHeight(), "unconnected element outerHeight() is wrong see #10413" );
-	assert.equal( $divUnconnected.outerHeight( true ), $divNormal.outerHeight( true ), "unconnected element outerHeight( true ) is wrong see #10413" );
+	assert.equal( $divUnconnected.height(), $divNormal.height(), "unconnected element height() is wrong see trac-10413" );
+	assert.equal( $divUnconnected.innerHeight(), $divNormal.innerHeight(), "unconnected element innerHeight() is wrong see trac-10413" );
+	assert.equal( $divUnconnected.outerHeight(), $divNormal.outerHeight(), "unconnected element outerHeight() is wrong see trac-10413" );
+	assert.equal( $divUnconnected.outerHeight( true ), $divNormal.outerHeight( true ), "unconnected element outerHeight( true ) is wrong see trac-10413" );
 
 	// teardown html
 	$divHiddenParent.remove();
 	$divNormal.remove();
 } );
 
-QUnit.test( "passing undefined is a setter #5571", function( assert ) {
+QUnit.test( "passing undefined is a setter trac-5571", function( assert ) {
 	assert.expect( 4 );
-	assert.equal( jQuery( "#nothiddendiv" ).height( 30 ).height( undefined ).height(), 30, ".height(undefined) is chainable (#5571)" );
-	assert.equal( jQuery( "#nothiddendiv" ).height( 30 ).innerHeight( undefined ).height(), 30, ".innerHeight(undefined) is chainable (#5571)" );
-	assert.equal( jQuery( "#nothiddendiv" ).height( 30 ).outerHeight( undefined ).height(), 30, ".outerHeight(undefined) is chainable (#5571)" );
-	assert.equal( jQuery( "#nothiddendiv" ).width( 30 ).width( undefined ).width(), 30, ".width(undefined) is chainable (#5571)" );
+	assert.equal( jQuery( "#nothiddendiv" ).height( 30 ).height( undefined ).height(), 30, ".height(undefined) is chainable (trac-5571)" );
+	assert.equal( jQuery( "#nothiddendiv" ).height( 30 ).innerHeight( undefined ).height(), 30, ".innerHeight(undefined) is chainable (trac-5571)" );
+	assert.equal( jQuery( "#nothiddendiv" ).height( 30 ).outerHeight( undefined ).height(), 30, ".outerHeight(undefined) is chainable (trac-5571)" );
+	assert.equal( jQuery( "#nothiddendiv" ).width( 30 ).width( undefined ).width(), 30, ".width(undefined) is chainable (trac-5571)" );
 } );
 
 QUnit.test( "setters with and without box-sizing:border-box", function( assert ) {
@@ -627,13 +627,7 @@ function( assert ) {
 	}
 );
 
-// Support: Firefox 70+
-// Firefox 70 & newer fail this test but the issue there is more profound - Firefox doesn't
-// subtract borders from table row computed widths.
-// See https://github.com/jquery/jquery/issues/4529
-// See https://bugzilla.mozilla.org/show_bug.cgi?id=1590837
-// See https://github.com/w3c/csswg-drafts/issues/4444
-QUnit[ /firefox/i.test( navigator.userAgent ) ? "skip" : "test" ](
+QUnit.test(
 	"width/height on a table row with phantom borders (gh-3698)", function( assert ) {
 	assert.expect( 4 );
 
diff --git a/a.js b/b.js
index 00845308..04c2ddcb 100644
--- a/a.js
+++ b/b.js
@@ -19,7 +19,7 @@ function getComputedSupport( support ) {
 
 if ( jQuery.css ) {
 	testIframe(
-		"body background is not lost if set prior to loading jQuery (#9239)",
+		"body background is not lost if set prior to loading jQuery (trac-9239)",
 		"support/bodyBackground.html",
 		function( assert, jQuery, window, document, color, support ) {
 			assert.expect( 2 );
@@ -58,11 +58,21 @@ function( assert, jQuery, window, document, support ) {
 	var expected,
 		userAgent = window.navigator.userAgent,
 		expectedMap = {
-			ie_11: {},
-			chrome: {},
-			safari: {},
-			firefox: {},
-			ios: {}
+			ie_11: {
+				"reliableTrDimensions": false
+			},
+			chrome: {
+				"reliableTrDimensions": true
+			},
+			safari: {
+				"reliableTrDimensions": true
+			},
+			firefox: {
+				"reliableTrDimensions": false
+			},
+			ios: {
+				"reliableTrDimensions": true
+			}
 		};
 
 	if ( document.documentMode ) {
diff --git a/a.js b/b.js
index 715f59f1..482545aa 100644
--- a/a.js
+++ b/b.js
@@ -2,7 +2,7 @@
 
 // Cross-browser xml parsing
 jQuery.parseXML = function( data ) {
-	var xml;
+	var xml, parserErrorElem;
 	if ( !data || typeof data !== "string" ) {
 		return null;
 	}
@@ -11,12 +11,17 @@ jQuery.parseXML = function( data ) {
 	// IE throws on parseFromString with invalid input.
 	try {
 		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
-	} catch ( e ) {
-		xml = undefined;
-	}
+	} catch ( e ) {}
 
-	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
-		jQuery.error( "Invalid XML: " + data );
+	parserErrorElem = xml && xml.getElementsByTagName( "parsererror" )[ 0 ];
+	if ( !xml || parserErrorElem ) {
+		jQuery.error( "Invalid XML: " + (
+			parserErrorElem ?
+				jQuery.map( parserErrorElem.childNodes, function( el ) {
+					return el.textContent;
+				} ).join( "\n" ) :
+				data
+		) );
 	}
 	return xml;
 };
diff --git a/a.js b/b.js
index 6bcea95a..d7e935a3 100644
--- a/a.js
+++ b/b.js
@@ -92,7 +92,7 @@ QUnit.test( "jQuery()", function( assert ) {
 	} catch(e){
 		pass = false;
 	}
-	assert.ok( pass, "jQuery('&lt;tag&gt;') needs optional document parameter to ease cross-frame DOM wrangling, see #968" );*/
+	assert.ok( pass, "jQuery('&lt;tag&gt;') needs optional document parameter to ease cross-frame DOM wrangling, see trac-968" );*/
 
 	assert.equal( code.length, 1, "Correct number of elements generated for code" );
 	assert.equal( code.parent().length, 0, "Make sure that the generated HTML has no parent." );
@@ -146,7 +146,7 @@ QUnit.test( "jQuery()", function( assert ) {
 	for ( i = 0; i < 3; ++i ) {
 		elem = jQuery( "<input type='text' value='TEST' />" );
 	}
-	assert.equal( elem[ 0 ].defaultValue, "TEST", "Ensure cached nodes are cloned properly (Bug #6655)" );
+	assert.equal( elem[ 0 ].defaultValue, "TEST", "Ensure cached nodes are cloned properly (Bug trac-6655)" );
 
 	elem = jQuery( "<input type='hidden'>", {} );
 	assert.strictEqual( elem[ 0 ].ownerDocument, document,
@@ -182,7 +182,7 @@ QUnit.test( "globalEval with 'use strict'", function( assert ) {
 	assert.equal( window.strictEvalTest, 1, "Test variable declarations are global (strict mode)" );
 } );
 
-QUnit.test( "globalEval execution after script injection (#7862)", function( assert ) {
+QUnit.test( "globalEval execution after script injection (trac-7862)", function( assert ) {
 	assert.expect( 1 );
 
 	var now,
@@ -475,7 +475,7 @@ QUnit.test( "jQuery('html')", function( assert ) {
 	j = jQuery( "<span>hi</span> there <!-- mon ami -->" );
 	assert.ok( j.length >= 2, "Check node,textnode,comment creation (some browsers delete comments)" );
 
-	assert.ok( !jQuery( "<option>test</option>" )[ 0 ].selected, "Make sure that options are auto-selected #2050" );
+	assert.ok( !jQuery( "<option>test</option>" )[ 0 ].selected, "Make sure that options are auto-selected trac-2050" );
 
 	assert.ok( jQuery( "<div></div>" )[ 0 ], "Create a div with closing tag." );
 	assert.ok( jQuery( "<table></table>" )[ 0 ], "Create a table with closing tag." );
@@ -516,7 +516,7 @@ QUnit.test( "jQuery(element with non-alphanumeric name)", function( assert ) {
 	} );
 } );
 
-QUnit.test( "jQuery('massive html #7990')", function( assert ) {
+QUnit.test( "jQuery('massive html trac-7990')", function( assert ) {
 	assert.expect( 3 );
 
 	var i,
@@ -538,7 +538,7 @@ QUnit.test( "jQuery('html', context)", function( assert ) {
 
 	var $div = jQuery( "<div></div>" )[ 0 ],
 		$span = jQuery( "<span></span>", $div );
-	assert.equal( $span.length, 1, "verify a span created with a div context works, #1763" );
+	assert.equal( $span.length, 1, "verify a span created with a div context works, trac-1763" );
 } );
 
 QUnit.test( "jQuery(selector, xml).text(str) - loaded via xml document", function( assert ) {
@@ -546,7 +546,7 @@ QUnit.test( "jQuery(selector, xml).text(str) - loaded via xml document", functio
 
 	var xml = createDashboardXML(),
 
-	// tests for #1419 where ie was a problem
+	// tests for trac-1419 where ie was a problem
 		tab = jQuery( "tab", xml ).eq( 0 );
 	assert.equal( tab.text(), "blabla", "verify initial text correct" );
 	tab.text( "newtext" );
@@ -803,7 +803,7 @@ 	callback = function( v, k ) {
 	result = jQuery.map( Array( 4 ), function( v, k ) {
 		return k % 2 ? k : [ k, k, k ];
 	} );
-	assert.equal( result.join( "" ), "00012223", "Array results flattened (#2616)" );
+	assert.equal( result.join( "" ), "00012223", "Array results flattened (trac-2616)" );
 
 	result = jQuery.map( [ [ [ 1, 2 ], 3 ], 4 ], function( v, k ) {
 		return v;
@@ -817,7 +817,7 @@ 	callback = function( v, k ) {
 		result = jQuery.map( Array( 300000 ), function( v, k ) {
 			return k;
 		} );
-		assert.equal( result.length, 300000, "Able to map 300000 records without any problems (#4320)" );
+		assert.equal( result.length, 300000, "Able to map 300000 records without any problems (gh-4320)" );
 	} else {
 		assert.ok( "skip", "Array#flat isn't supported in IE" );
 	}
@@ -854,14 +854,14 @@ QUnit.test( "jQuery.merge()", function( assert ) {
 		"First empty"
 	);
 
-	// Fixed at [5998], #3641
+	// Fixed at [5998], trac-3641
 	assert.deepEqual(
 		jQuery.merge( [ -2, -1 ], [ 0, 1, 2 ] ),
 		[ -2, -1, 0, 1, 2 ],
 		"Second array including a zero (falsy)"
 	);
 
-	// After fixing #5527
+	// After fixing trac-5527
 	assert.deepEqual(
 		jQuery.merge( [], [ null, undefined ] ),
 		[ null, undefined ],
@@ -1005,7 +1005,7 @@ QUnit.test( "jQuery.extend(Object, Object)", function( assert ) {
 
 	assert.ok( jQuery.extend( true, {}, nestedarray )[ "arr" ] !== arr, "Deep extend of object must clone child array" );
 
-	// #5991
+	// trac-5991
 	assert.ok( Array.isArray( jQuery.extend( true, { "arr": {} }, nestedarray )[ "arr" ] ), "Cloned array have to be an Array" );
 	assert.ok( jQuery.isPlainObject( jQuery.extend( true, { "arr": arr }, { "arr": {} } )[ "arr" ] ), "Cloned object have to be an plain object" );
 
@@ -1053,13 +1053,13 @@ QUnit.test( "jQuery.extend(Object, Object)", function( assert ) {
 	assert.deepEqual( target, { bar:5 }, "Check to make sure a recursive obj doesn't go never-ending loop by not copying it over" );
 
 	ret = jQuery.extend( true, { foo: [] }, { foo: [ 0 ] } ); // 1907
-	assert.equal( ret.foo.length, 1, "Check to make sure a value with coercion 'false' copies over when necessary to fix #1907" );
+	assert.equal( ret.foo.length, 1, "Check to make sure a value with coercion 'false' copies over when necessary to fix trac-1907" );
 
 	ret = jQuery.extend( true, { foo: "1,2,3" }, { foo: [ 1, 2, 3 ] } );
 	assert.ok( typeof ret.foo !== "string", "Check to make sure values equal with coercion (but not actually equal) overwrite correctly" );
 
 	ret = jQuery.extend( true, { foo:"bar" }, { foo:null } );
-	assert.ok( typeof ret.foo !== "undefined", "Make sure a null value doesn't crash with deep extend, for #1908" );
+	assert.ok( typeof ret.foo !== "undefined", "Make sure a null value doesn't crash with deep extend, for trac-1908" );
 
 	obj = { foo:null };
 	jQuery.extend( true, obj, { foo:"notnull" } );
@@ -1365,7 +1365,7 @@ QUnit.test( "jQuery.parseHTML", function( assert ) {
 	assert.equal( jQuery.parseHTML( "text" )[ 0 ].nodeType, 3, "Parsing text returns a text node" );
 	assert.equal( jQuery.parseHTML( "\t<div></div>" )[ 0 ].nodeValue, "\t", "Preserve leading whitespace" );
 
-	assert.equal( jQuery.parseHTML( " <div></div> " )[ 0 ].nodeType, 3, "Leading spaces are treated as text nodes (#11290)" );
+	assert.equal( jQuery.parseHTML( " <div></div> " )[ 0 ].nodeType, 3, "Leading spaces are treated as text nodes (trac-11290)" );
 
 	html = jQuery.parseHTML( "<div>test div</div>" );
 
@@ -1418,9 +1418,9 @@ QUnit.test( "jQuery.parseXML", function( assert ) {
 	}
 	try {
 		xml = jQuery.parseXML( "<p>Not a <<b>well-formed</b> xml string</p>" );
-		assert.ok( false, "invalid xml not detected" );
+		assert.ok( false, "invalid XML not detected" );
 	} catch ( e ) {
-		assert.strictEqual( e.message, "Invalid XML: <p>Not a <<b>well-formed</b> xml string</p>", "invalid xml detected" );
+		assert.ok( e.message.indexOf( "Invalid XML:" ) === 0, "invalid XML detected" );
 	}
 	try {
 		xml = jQuery.parseXML( "" );
@@ -1436,8 +1436,37 @@ QUnit.test( "jQuery.parseXML", function( assert ) {
 	}
 } );
 
+// Support: IE 11+
+// IE throws an error when parsing invalid XML instead of reporting the error
+// in a `parsererror` element, skip the test there.
+QUnit.testUnlessIE( "jQuery.parseXML - error reporting", function( assert ) {
+	assert.expect( 2 );
+
+	var errorArg, lineMatch, line, columnMatch, column;
+
+	sinon.stub( jQuery, "error" );
+
+	jQuery.parseXML( "<p>Not a <<b>well-formed</b> xml string</p>" );
+	errorArg = jQuery.error.firstCall.lastArg.toLowerCase();
+	console.log( "errorArg", errorArg );
+
+	lineMatch = errorArg.match( /line\s*(?:number)?\s*(\d+)/ );
+	line = lineMatch && lineMatch[ 1 ];
+	columnMatch = errorArg.match( /column\s*(\d+)/ );
+	column = columnMatch && columnMatch[ 1 ];
+
+	assert.strictEqual( line, "1", "reports error line" );
+
+	// Support: Firefox 96-97+
+	// Newer Firefox may report the column number smaller by 2 than it should.
+	// Accept both values until the issue is fixed.
+	// See https://bugzilla.mozilla.org/show_bug.cgi?id=1751796
+	assert.ok( [ "9", "11" ].indexOf( column ) > -1, "reports error column" );
+	// assert.strictEqual( column, "11", "reports error column" );
+} );
+
 testIframe(
-	"document ready when jQuery loaded asynchronously (#13655)",
+	"document ready when jQuery loaded asynchronously (trac-13655)",
 	"core/dynamic_ready.html",
 	function( assert, jQuery, window, document, ready ) {
 		assert.expect( 1 );
@@ -1446,7 +1475,7 @@ function( assert, jQuery, window, document, ready ) {
 );
 
 testIframe(
-	"Tolerating alias-masked DOM properties (#14074)",
+	"Tolerating alias-masked DOM properties (trac-14074)",
 	"core/aliased.html",
 	function( assert, jQuery, window, document, errors ) {
 		assert.expect( 1 );
@@ -1455,7 +1484,7 @@ function( assert, jQuery, window, document, errors ) {
 );
 
 testIframe(
-	"Don't call window.onready (#14802)",
+	"Don't call window.onready (trac-14802)",
 	"core/onready.html",
 	function( assert, jQuery, window, document, error ) {
 		assert.expect( 1 );
diff --git a/a.js b/b.js
index e122305c..4f5731ae 100644
--- a/a.js
+++ b/b.js
@@ -10,9 +10,8 @@
 import fnToString from "./var/fnToString.js";
 import ObjectFunctionString from "./var/ObjectFunctionString.js";
 import support from "./var/support.js";
-import isWindow from "./var/isWindow.js";
+import isArrayLike from "./core/isArrayLike.js";
 import DOMEval from "./core/DOMEval.js";
-import toType from "./core/toType.js";
 
 var version = "@VERSION",
 
@@ -307,8 +306,8 @@ inArray: function( elem, arr, i ) {
 	},
 
 	isXMLDoc: function( elem ) {
-		var namespace = elem.namespaceURI,
-			docElem = ( elem.ownerDocument || elem ).documentElement;
+		var namespace = elem && elem.namespaceURI,
+			docElem = elem && ( elem.ownerDocument || elem ).documentElement;
 
 		// Assume HTML when documentElement doesn't yet exist, such as inside
 		// document fragments.
@@ -398,17 +397,4 @@ function( _i, name ) {
 		class2type[ "[object " + name + "]" ] = name.toLowerCase();
 	} );
 
-function isArrayLike( obj ) {
-
-	var length = !!obj && obj.length,
-		type = toType( obj );
-
-	if ( typeof obj === "function" || isWindow( obj ) ) {
-		return false;
-	}
-
-	return type === "array" || length === 0 ||
-		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
-}
-
 export default jQuery;
diff --git a/a.js b/b.js
index e2496655..d7e935a3 100644
--- a/a.js
+++ b/b.js
@@ -92,7 +92,7 @@ QUnit.test( "jQuery()", function( assert ) {
 	} catch(e){
 		pass = false;
 	}
-	assert.ok( pass, "jQuery('&lt;tag&gt;') needs optional document parameter to ease cross-frame DOM wrangling, see #968" );*/
+	assert.ok( pass, "jQuery('&lt;tag&gt;') needs optional document parameter to ease cross-frame DOM wrangling, see trac-968" );*/
 
 	assert.equal( code.length, 1, "Correct number of elements generated for code" );
 	assert.equal( code.parent().length, 0, "Make sure that the generated HTML has no parent." );
@@ -146,7 +146,7 @@ QUnit.test( "jQuery()", function( assert ) {
 	for ( i = 0; i < 3; ++i ) {
 		elem = jQuery( "<input type='text' value='TEST' />" );
 	}
-	assert.equal( elem[ 0 ].defaultValue, "TEST", "Ensure cached nodes are cloned properly (Bug #6655)" );
+	assert.equal( elem[ 0 ].defaultValue, "TEST", "Ensure cached nodes are cloned properly (Bug trac-6655)" );
 
 	elem = jQuery( "<input type='hidden'>", {} );
 	assert.strictEqual( elem[ 0 ].ownerDocument, document,
@@ -182,7 +182,7 @@ QUnit.test( "globalEval with 'use strict'", function( assert ) {
 	assert.equal( window.strictEvalTest, 1, "Test variable declarations are global (strict mode)" );
 } );
 
-QUnit.test( "globalEval execution after script injection (#7862)", function( assert ) {
+QUnit.test( "globalEval execution after script injection (trac-7862)", function( assert ) {
 	assert.expect( 1 );
 
 	var now,
@@ -417,6 +417,16 @@ QUnit.test( "isXMLDoc - XML", function( assert ) {
 	assert.ok( jQuery.isXMLDoc( jQuery( "desc", svg )[ 0 ] ), "XML desc Element" );
 } );
 
+QUnit.test( "isXMLDoc - falsy", function( assert ) {
+	assert.expect( 5 );
+
+	assert.strictEqual( jQuery.isXMLDoc( undefined ), false, "undefined" );
+	assert.strictEqual( jQuery.isXMLDoc( null ), false, "null" );
+	assert.strictEqual( jQuery.isXMLDoc( false ), false, "false" );
+	assert.strictEqual( jQuery.isXMLDoc( 0 ), false, "0" );
+	assert.strictEqual( jQuery.isXMLDoc( "" ), false, "\"\"" );
+} );
+
 QUnit.test( "XSS via location.hash", function( assert ) {
 	var done = assert.async();
 	assert.expect( 1 );
@@ -465,7 +475,7 @@ QUnit.test( "jQuery('html')", function( assert ) {
 	j = jQuery( "<span>hi</span> there <!-- mon ami -->" );
 	assert.ok( j.length >= 2, "Check node,textnode,comment creation (some browsers delete comments)" );
 
-	assert.ok( !jQuery( "<option>test</option>" )[ 0 ].selected, "Make sure that options are auto-selected #2050" );
+	assert.ok( !jQuery( "<option>test</option>" )[ 0 ].selected, "Make sure that options are auto-selected trac-2050" );
 
 	assert.ok( jQuery( "<div></div>" )[ 0 ], "Create a div with closing tag." );
 	assert.ok( jQuery( "<table></table>" )[ 0 ], "Create a table with closing tag." );
@@ -506,7 +516,7 @@ QUnit.test( "jQuery(element with non-alphanumeric name)", function( assert ) {
 	} );
 } );
 
-QUnit.test( "jQuery('massive html #7990')", function( assert ) {
+QUnit.test( "jQuery('massive html trac-7990')", function( assert ) {
 	assert.expect( 3 );
 
 	var i,
@@ -528,7 +538,7 @@ QUnit.test( "jQuery('html', context)", function( assert ) {
 
 	var $div = jQuery( "<div></div>" )[ 0 ],
 		$span = jQuery( "<span></span>", $div );
-	assert.equal( $span.length, 1, "verify a span created with a div context works, #1763" );
+	assert.equal( $span.length, 1, "verify a span created with a div context works, trac-1763" );
 } );
 
 QUnit.test( "jQuery(selector, xml).text(str) - loaded via xml document", function( assert ) {
@@ -536,7 +546,7 @@ QUnit.test( "jQuery(selector, xml).text(str) - loaded via xml document", functio
 
 	var xml = createDashboardXML(),
 
-	// tests for #1419 where ie was a problem
+	// tests for trac-1419 where ie was a problem
 		tab = jQuery( "tab", xml ).eq( 0 );
 	assert.equal( tab.text(), "blabla", "verify initial text correct" );
 	tab.text( "newtext" );
@@ -793,7 +803,7 @@ 	callback = function( v, k ) {
 	result = jQuery.map( Array( 4 ), function( v, k ) {
 		return k % 2 ? k : [ k, k, k ];
 	} );
-	assert.equal( result.join( "" ), "00012223", "Array results flattened (#2616)" );
+	assert.equal( result.join( "" ), "00012223", "Array results flattened (trac-2616)" );
 
 	result = jQuery.map( [ [ [ 1, 2 ], 3 ], 4 ], function( v, k ) {
 		return v;
@@ -807,7 +817,7 @@ 	callback = function( v, k ) {
 		result = jQuery.map( Array( 300000 ), function( v, k ) {
 			return k;
 		} );
-		assert.equal( result.length, 300000, "Able to map 300000 records without any problems (#4320)" );
+		assert.equal( result.length, 300000, "Able to map 300000 records without any problems (gh-4320)" );
 	} else {
 		assert.ok( "skip", "Array#flat isn't supported in IE" );
 	}
@@ -844,14 +854,14 @@ QUnit.test( "jQuery.merge()", function( assert ) {
 		"First empty"
 	);
 
-	// Fixed at [5998], #3641
+	// Fixed at [5998], trac-3641
 	assert.deepEqual(
 		jQuery.merge( [ -2, -1 ], [ 0, 1, 2 ] ),
 		[ -2, -1, 0, 1, 2 ],
 		"Second array including a zero (falsy)"
 	);
 
-	// After fixing #5527
+	// After fixing trac-5527
 	assert.deepEqual(
 		jQuery.merge( [], [ null, undefined ] ),
 		[ null, undefined ],
@@ -995,7 +1005,7 @@ QUnit.test( "jQuery.extend(Object, Object)", function( assert ) {
 
 	assert.ok( jQuery.extend( true, {}, nestedarray )[ "arr" ] !== arr, "Deep extend of object must clone child array" );
 
-	// #5991
+	// trac-5991
 	assert.ok( Array.isArray( jQuery.extend( true, { "arr": {} }, nestedarray )[ "arr" ] ), "Cloned array have to be an Array" );
 	assert.ok( jQuery.isPlainObject( jQuery.extend( true, { "arr": arr }, { "arr": {} } )[ "arr" ] ), "Cloned object have to be an plain object" );
 
@@ -1043,13 +1053,13 @@ QUnit.test( "jQuery.extend(Object, Object)", function( assert ) {
 	assert.deepEqual( target, { bar:5 }, "Check to make sure a recursive obj doesn't go never-ending loop by not copying it over" );
 
 	ret = jQuery.extend( true, { foo: [] }, { foo: [ 0 ] } ); // 1907
-	assert.equal( ret.foo.length, 1, "Check to make sure a value with coercion 'false' copies over when necessary to fix #1907" );
+	assert.equal( ret.foo.length, 1, "Check to make sure a value with coercion 'false' copies over when necessary to fix trac-1907" );
 
 	ret = jQuery.extend( true, { foo: "1,2,3" }, { foo: [ 1, 2, 3 ] } );
 	assert.ok( typeof ret.foo !== "string", "Check to make sure values equal with coercion (but not actually equal) overwrite correctly" );
 
 	ret = jQuery.extend( true, { foo:"bar" }, { foo:null } );
-	assert.ok( typeof ret.foo !== "undefined", "Make sure a null value doesn't crash with deep extend, for #1908" );
+	assert.ok( typeof ret.foo !== "undefined", "Make sure a null value doesn't crash with deep extend, for trac-1908" );
 
 	obj = { foo:null };
 	jQuery.extend( true, obj, { foo:"notnull" } );
@@ -1355,7 +1365,7 @@ QUnit.test( "jQuery.parseHTML", function( assert ) {
 	assert.equal( jQuery.parseHTML( "text" )[ 0 ].nodeType, 3, "Parsing text returns a text node" );
 	assert.equal( jQuery.parseHTML( "\t<div></div>" )[ 0 ].nodeValue, "\t", "Preserve leading whitespace" );
 
-	assert.equal( jQuery.parseHTML( " <div></div> " )[ 0 ].nodeType, 3, "Leading spaces are treated as text nodes (#11290)" );
+	assert.equal( jQuery.parseHTML( " <div></div> " )[ 0 ].nodeType, 3, "Leading spaces are treated as text nodes (trac-11290)" );
 
 	html = jQuery.parseHTML( "<div>test div</div>" );
 
@@ -1408,9 +1418,9 @@ QUnit.test( "jQuery.parseXML", function( assert ) {
 	}
 	try {
 		xml = jQuery.parseXML( "<p>Not a <<b>well-formed</b> xml string</p>" );
-		assert.ok( false, "invalid xml not detected" );
+		assert.ok( false, "invalid XML not detected" );
 	} catch ( e ) {
-		assert.strictEqual( e.message, "Invalid XML: <p>Not a <<b>well-formed</b> xml string</p>", "invalid xml detected" );
+		assert.ok( e.message.indexOf( "Invalid XML:" ) === 0, "invalid XML detected" );
 	}
 	try {
 		xml = jQuery.parseXML( "" );
@@ -1426,8 +1436,37 @@ QUnit.test( "jQuery.parseXML", function( assert ) {
 	}
 } );
 
+// Support: IE 11+
+// IE throws an error when parsing invalid XML instead of reporting the error
+// in a `parsererror` element, skip the test there.
+QUnit.testUnlessIE( "jQuery.parseXML - error reporting", function( assert ) {
+	assert.expect( 2 );
+
+	var errorArg, lineMatch, line, columnMatch, column;
+
+	sinon.stub( jQuery, "error" );
+
+	jQuery.parseXML( "<p>Not a <<b>well-formed</b> xml string</p>" );
+	errorArg = jQuery.error.firstCall.lastArg.toLowerCase();
+	console.log( "errorArg", errorArg );
+
+	lineMatch = errorArg.match( /line\s*(?:number)?\s*(\d+)/ );
+	line = lineMatch && lineMatch[ 1 ];
+	columnMatch = errorArg.match( /column\s*(\d+)/ );
+	column = columnMatch && columnMatch[ 1 ];
+
+	assert.strictEqual( line, "1", "reports error line" );
+
+	// Support: Firefox 96-97+
+	// Newer Firefox may report the column number smaller by 2 than it should.
+	// Accept both values until the issue is fixed.
+	// See https://bugzilla.mozilla.org/show_bug.cgi?id=1751796
+	assert.ok( [ "9", "11" ].indexOf( column ) > -1, "reports error column" );
+	// assert.strictEqual( column, "11", "reports error column" );
+} );
+
 testIframe(
-	"document ready when jQuery loaded asynchronously (#13655)",
+	"document ready when jQuery loaded asynchronously (trac-13655)",
 	"core/dynamic_ready.html",
 	function( assert, jQuery, window, document, ready ) {
 		assert.expect( 1 );
@@ -1436,7 +1475,7 @@ function( assert, jQuery, window, document, ready ) {
 );
 
 testIframe(
-	"Tolerating alias-masked DOM properties (#14074)",
+	"Tolerating alias-masked DOM properties (trac-14074)",
 	"core/aliased.html",
 	function( assert, jQuery, window, document, errors ) {
 		assert.expect( 1 );
@@ -1445,7 +1484,7 @@ function( assert, jQuery, window, document, errors ) {
 );
 
 testIframe(
-	"Don't call window.onready (#14802)",
+	"Don't call window.onready (trac-14802)",
 	"core/onready.html",
 	function( assert, jQuery, window, document, error ) {
 		assert.expect( 1 );
diff --git a/a.js b/b.js
index 4418fbbb..0c66d385 100644
--- a/a.js
+++ b/b.js
@@ -369,15 +369,15 @@ handlers: function( event, handlers ) {
 
 			for ( ; cur !== this; cur = cur.parentNode || this ) {
 
-				// Don't check non-elements (#13208)
-				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
+				// Don't check non-elements (trac-13208)
+				// Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)
 				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
 					matchedHandlers = [];
 					matchedSelectors = {};
 					for ( i = 0; i < delegateCount; i++ ) {
 						handleObj = handlers[ i ];
 
-						// Don't conflict with Object.prototype properties (#13203)
+						// Don't conflict with Object.prototype properties (trac-13203)
 						sel = handleObj.selector + " ";
 
 						if ( matchedSelectors[ sel ] === undefined ) {
@@ -746,6 +746,12 @@ stopImmediatePropagation: function() {
 			return true;
 		},
 
+		// Suppress native focus or blur if we're currently inside
+		// a leveraged native-event stack
+		_default: function( event ) {
+			return dataPriv.get( event.target, type );
+		},
+
 		delegateType: delegateType
 	};
 } );
diff --git a/a.js b/b.js
index 90318f8f..8ca06ced 100644
--- a/a.js
+++ b/b.js
@@ -8,7 +8,7 @@ beforeEach: function() {
 QUnit.test( "null or undefined handler", function( assert ) {
 	assert.expect( 4 );
 
-	// Supports Fixes bug #7229
+	// Supports Fixes bug trac-7229
 	try {
 		jQuery( "#firstp" ).on( "click", null );
 		assert.ok( true, "Passing a null handler will not throw an exception" );
@@ -484,7 +484,7 @@ 		neverCallMe = function() {
 QUnit.test( "on(), iframes", function( assert ) {
 	assert.expect( 1 );
 
-	// events don't work with iframes, see #939 - this test fails in IE because of contentDocument
+	// events don't work with iframes, see trac-939 - this test fails in IE because of contentDocument
 	var doc = jQuery( "#loadediframe" ).contents();
 
 	jQuery( "div", doc ).on( "click", function() {
@@ -552,7 +552,7 @@ jQuery( "#nonnodes" ).contents().on( "tester", function() {
 		assert.equal( this.nodeType, 1, "Check node,textnode,comment on just does real nodes" );
 	} ).trigger( "tester" );
 
-	// Make sure events stick with appendTo'd elements (which are cloned) #2027
+	// Make sure events stick with appendTo'd elements (which are cloned) trac-2027
 	jQuery( "<a href='#fail' class='test'>test</a>" ).on( "click", function() { return false; } ).appendTo( "#qunit-fixture" );
 	assert.ok( jQuery( "a.test" ).eq( 0 ).triggerHandler( "click" ) === false, "Handler is bound to appendTo'd elements" );
 } );
@@ -589,7 +589,7 @@ jQuery( "#firstp" ).on( "click.test.abc", function() {
 		check( "click.test.abc", "Namespaced click triggered" );
 	} );
 
-	// Those would not trigger/off (#5303)
+	// Those would not trigger/off (trac-5303)
 	jQuery( "#firstp" ).trigger( "click.a.test" );
 	jQuery( "#firstp" ).off( "click.a.test" );
 
@@ -812,7 +812,7 @@ QUnit.test( "off(type)", function( assert ) {
 		.off( "error1 error2", error )
 		.trigger( "error1" ).triggerHandler( "error2" );
 
-	message = "unbind many"; // #3538
+	message = "unbind many"; // trac-3538
 	$elem.on( "error1 error2", error )
 		.off( "error1 error2" )
 		.trigger( "error1" ).triggerHandler( "error2" );
@@ -1041,7 +1041,7 @@ 	$elem[ 0 ].click = function() {
 	} catch ( e ) {
 		pass = false;
 	}
-	assert.ok( pass, "Trigger on a table with a colon in the even type, see #3533" );
+	assert.ok( pass, "Trigger on a table with a colon in the even type, see trac-3533" );
 
 	form = jQuery( "<form action=''></form>" ).appendTo( "body" );
 
@@ -1069,7 +1069,7 @@ jQuery( document ).on( "submit", function() {
 	form.remove();
 } );
 
-QUnit.test( "submit event bubbles on copied forms (#11649)", function( assert ) {
+QUnit.test( "submit event bubbles on copied forms (trac-11649)", function( assert ) {
 	assert.expect( 3 );
 
 	var $formByClone, $formByHTML,
@@ -1105,7 +1105,7 @@ QUnit.test( "submit event bubbles on copied forms (#11649)", function( assert )
 	$testForm.off( "submit", noSubmit );
 } );
 
-QUnit.test( "change event bubbles on copied forms (#11796)", function( assert ) {
+QUnit.test( "change event bubbles on copied forms (trac-11796)", function( assert ) {
 	assert.expect( 3 );
 
 	var $formByClone, $formByHTML,
@@ -1227,7 +1227,7 @@ QUnit.test( "trigger(eventObject, [data], [fn])", function( assert ) {
 	assert.equal( event.isDefaultPrevented(), false, "default not prevented" );
 } );
 
-QUnit.test( ".trigger() bubbling on disconnected elements (#10489)", function( assert ) {
+QUnit.test( ".trigger() bubbling on disconnected elements (trac-10489)", function( assert ) {
 	assert.expect( 2 );
 
 	jQuery( window ).on( "click", function() {
@@ -1251,7 +1251,7 @@ jQuery( "<div><p>hi</p></div>" )
 	jQuery( window ).off( "click" );
 } );
 
-QUnit.test( ".trigger() doesn't bubble load event (#10717)", function( assert ) {
+QUnit.test( ".trigger() doesn't bubble load event (trac-10717)", function( assert ) {
 	assert.expect( 1 );
 
 	jQuery( window ).on( "load", function() {
@@ -1269,7 +1269,7 @@ jQuery( "<img src='" + baseURL + "1x1.jpg' />" )
 	jQuery( window ).off( "load" );
 } );
 
-QUnit.test( "Delegated events in SVG (#10791; #13180)", function( assert ) {
+QUnit.test( "Delegated events in SVG (trac-10791; trac-13180)", function( assert ) {
 	assert.expect( 2 );
 
 	var useElem, e,
@@ -1295,7 +1295,7 @@ jQuery( "#qunit-fixture" )
 		.end();
 
 	// Fire a native click on an SVGElementInstance (the instance tree of an SVG <use>)
-	// to confirm that it doesn't break our event delegation handling (#13180)
+	// to confirm that it doesn't break our event delegation handling (trac-13180)
 	useElem = svg.find( "#use" )[ 0 ];
 	if ( document.createEvent && useElem && useElem.instanceRoot ) {
 		e = document.createEvent( "MouseEvents" );
@@ -1321,7 +1321,7 @@ QUnit.test( "Delegated events with malformed selectors (gh-3071)", function( ass
 	assert.ok( true, "malformed selector does not throw on event" );
 } );
 
-QUnit.test( "Delegated events in forms (#10844; #11145; #8165; #11382, #11764)", function( assert ) {
+QUnit.test( "Delegated events in forms (trac-10844; trac-11145; trac-8165; trac-11382, trac-11764)", function( assert ) {
 	assert.expect( 5 );
 
 	// Alias names like "id" cause havoc
@@ -1376,7 +1376,7 @@ jQuery( "body" )
 	form.remove();
 } );
 
-QUnit.test( "Submit event can be stopped (#11049)", function( assert ) {
+QUnit.test( "Submit event can be stopped (trac-11049)", function( assert ) {
 	assert.expect( 1 );
 
 	// Since we manually bubble in IE, make sure inner handlers get a chance to cancel
@@ -1450,7 +1450,7 @@ 			handler = function( event ) {
 	assert.equal( event.type, "keydown", "Verify type" );
 
 	// ensure "type" in props won't clobber the one set by constructor
-	assert.equal( jQuery.inArray( "type", jQuery.event.props ), -1, "'type' property not in props (#10375)" );
+	assert.equal( jQuery.inArray( "type", jQuery.event.props ), -1, "'type' property not in props (trac-10375)" );
 
 	assert.ok( "keyCode" in event, "Special 'keyCode' property exists" );
 
@@ -1844,7 +1844,7 @@ function( assert ) {
 	assert.expect( 3 );
 	var markup = jQuery( "<div><ul><li><a id=\"a0\"></a><ul id=\"ul0\"><li class=test><a id=\"a0_0\"></a></li><li><a id=\"a0_1\"></a></li></ul></li></ul></div>" ).appendTo( "#qunit-fixture" );
 
-	// Non-positional selector (#12383)
+	// Non-positional selector (trac-12383)
 	markup.find( "#ul0" )
 		.on( "click", "div li a", function() {
 			assert.ok( false, "div is ABOVE the delegation point!" );
@@ -1859,7 +1859,7 @@ function( assert ) {
 		.off( "click" );
 
 	if ( QUnit.jQuerySelectorsPos ) {
-		// Positional selector (#11315)
+		// Positional selector (trac-11315)
 		markup.find( "ul" ).eq( 0 )
 			.on( "click", ">li>a", function() {
 				assert.ok( this.id === "a0", "child li was clicked" );
@@ -1879,7 +1879,7 @@ function( assert ) {
 	markup.remove();
 } );
 
-QUnit.test( "delegated event with selector matching Object.prototype property (#13203)", function( assert ) {
+QUnit.test( "delegated event with selector matching Object.prototype property (trac-13203)", function( assert ) {
 	assert.expect( 1 );
 
 	var matched = 0;
@@ -1893,7 +1893,7 @@ jQuery( "#foo" ).on( "click", "toString", function() {
 	assert.equal( matched, 0, "Nothing matched 'toString'" );
 } );
 
-QUnit.test( "delegated event with intermediate DOM manipulation (#13208)", function( assert ) {
+QUnit.test( "delegated event with intermediate DOM manipulation (trac-13208)", function( assert ) {
 	assert.expect( 1 );
 
 	jQuery( "#foo" ).on( "click", "[id=sap]", function() {} );
@@ -2187,7 +2187,7 @@ jQuery( "body" ).on( "focusin.focusinBubblesTest", function() {
 	jQuery( "body" ).off( "focusin.focusinBubblesTest" );
 } );
 
-QUnit.test( "custom events with colons (#3533, #8272)", function( assert ) {
+QUnit.test( "custom events with colons (trac-3533, trac-8272)", function( assert ) {
 	assert.expect( 1 );
 
 	var tab = jQuery( "<table><tr><td>trigger</td></tr></table>" ).appendTo( "body" );
@@ -2370,7 +2370,7 @@ jQuery( "<p>Gut Feeling</p>" )
 	delete jQuery.event.special[ "gutfeeling" ];
 } );
 
-QUnit.test( ".on and .off, selective mixed removal (#10705)", function( assert ) {
+QUnit.test( ".on and .off, selective mixed removal (trac-10705)", function( assert ) {
 	assert.expect( 7 );
 
 	var timingx = function( e ) {
@@ -2392,7 +2392,7 @@ jQuery( "<p>Strange Pursuit</p>" )
 		.trigger( "click" );	// 0
 } );
 
-QUnit.test( ".on( event-map, null-selector, data ) #11130", function( assert ) {
+QUnit.test( ".on( event-map, null-selector, data ) trac-11130", function( assert ) {
 
 	assert.expect( 1 );
 
@@ -2408,7 +2408,7 @@ QUnit.test( ".on( event-map, null-selector, data ) #11130", function( assert ) {
 	$p.on( map, null, data ).trigger( "foo" );
 } );
 
-QUnit.test( "clone() delegated events (#11076)", function( assert ) {
+QUnit.test( "clone() delegated events (trac-11076)", function( assert ) {
 	assert.expect( 3 );
 
 	var counter = { "center": 0, "fold": 0, "centerfold": 0 },
@@ -2745,7 +2745,7 @@ QUnit.test( "trigger click on checkbox, fires change event", function( assert )
 	} ).trigger( "click" );
 } );
 
-QUnit.test( "Namespace preserved when passed an Event (#12739)", function( assert ) {
+QUnit.test( "Namespace preserved when passed an Event (trac-12739)", function( assert ) {
 	assert.expect( 4 );
 
 	var markup = jQuery(
@@ -2833,7 +2833,7 @@ QUnit.test( "make sure events cloned correctly", function( assert ) {
 	clone.find( "#check1" ).trigger( "change" ); // 0 events should fire
 } );
 
-QUnit.test( "String.prototype.namespace does not cause trigger() to throw (#13360)", function( assert ) {
+QUnit.test( "String.prototype.namespace does not cause trigger() to throw (trac-13360)", function( assert ) {
 	assert.expect( 1 );
 	var errored = false;
 
@@ -2848,7 +2848,7 @@ QUnit.test( "String.prototype.namespace does not cause trigger() to throw (#1336
 	delete String.prototype.namespace;
 } );
 
-QUnit.test( "Inline event result is returned (#13993)", function( assert ) {
+QUnit.test( "Inline event result is returned (trac-13993)", function( assert ) {
 	assert.expect( 1 );
 
 	var result = jQuery( "<p onclick='return 42'>hello</p>" ).triggerHandler( "click" );
@@ -3137,7 +3137,7 @@ setTimeout( function() {
 	}, 50 );
 } );
 
-QUnit.test( "focus-blur order (#12868)", function( assert ) {
+QUnit.test( "focus-blur order (trac-12868)", function( assert ) {
 	assert.expect( 5 );
 
 	var order,
@@ -3291,6 +3291,56 @@ setTimeout( function() {
 	}, 50 );
 } );
 
+QUnit.test( "focus change during a focus handler (gh-4382)", function( assert ) {
+	assert.expect( 2 );
+
+	var done = assert.async(),
+		select = jQuery( "<select><option selected='selected'>A</option></select>" ),
+		button = jQuery( "<button>Focus target</button>" );
+
+	jQuery( "#qunit-fixture" )
+		.append( select )
+		.append( button );
+
+	select.on( "focus", function() {
+		button.trigger( "focus" );
+	} );
+
+	jQuery( document ).on( "focusin.focusTests", function( ev ) {
+		// Support: IE 11+
+		// In IE focus is async so focusin on document is fired multiple times,
+		// for each of the elements. In other browsers it's fired just once, for
+		// the last one.
+		if ( ev.target === button[ 0 ] ) {
+			assert.ok( true, "focusin propagated to document from the button" );
+		}
+	} );
+
+	select.trigger( "focus" );
+
+	setTimeout( function() {
+		assert.strictEqual( document.activeElement, button[ 0 ], "Focus redirect worked" );
+		jQuery( document ).off( ".focusTests" );
+		done();
+	} );
+} );
+
+QUnit.test( "trigger(focus) works after .on(focus).off(focus) (gh-4867)", function( assert ) {
+	assert.expect( 1 );
+
+	var input = jQuery( "<input />" );
+
+	input.appendTo( "#qunit-fixture" );
+
+	input
+		.on( "focus", function() {} )
+		.off( "focus" );
+
+	input.trigger( "focus" );
+
+	assert.equal( document.activeElement, input[ 0 ], "input has focus" );
+} );
+
 // TODO replace with an adaptation of
 // https://github.com/jquery/jquery/pull/1367/files#diff-a215316abbaabdf71857809e8673ea28R2464
 ( function() {
diff --git a/a.js b/b.js
index b8c5e96f..0c66d385 100644
--- a/a.js
+++ b/b.js
@@ -369,15 +369,15 @@ handlers: function( event, handlers ) {
 
 			for ( ; cur !== this; cur = cur.parentNode || this ) {
 
-				// Don't check non-elements (#13208)
-				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
+				// Don't check non-elements (trac-13208)
+				// Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)
 				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
 					matchedHandlers = [];
 					matchedSelectors = {};
 					for ( i = 0; i < delegateCount; i++ ) {
 						handleObj = handlers[ i ];
 
-						// Don't conflict with Object.prototype properties (#13203)
+						// Don't conflict with Object.prototype properties (trac-13203)
 						sel = handleObj.selector + " ";
 
 						if ( matchedSelectors[ sel ] === undefined ) {
@@ -558,7 +558,13 @@ function leverageNative( el, type, expectSync ) {
 						// Cancel the outer synthetic event
 						event.stopImmediatePropagation();
 						event.preventDefault();
-						return result.value;
+
+						// Support: Chrome 86+
+						// In Chrome, if an element having a focusout handler is blurred by
+						// clicking outside of it, it invokes the handler synchronously. If
+						// that handler calls `.remove()` on the element, the data is cleared,
+						// leaving `result` undefined. We need to guard against this.
+						return result && result.value;
 					}
 
 				// If this is an inner synthetic event for an event with a bubbling surrogate
@@ -740,6 +746,12 @@ stopImmediatePropagation: function() {
 			return true;
 		},
 
+		// Suppress native focus or blur if we're currently inside
+		// a leveraged native-event stack
+		_default: function( event ) {
+			return dataPriv.get( event.target, type );
+		},
+
 		delegateType: delegateType
 	};
 } );
diff --git a/a.js b/b.js
index 771283c2..8ca06ced 100644
--- a/a.js
+++ b/b.js
@@ -8,7 +8,7 @@ beforeEach: function() {
 QUnit.test( "null or undefined handler", function( assert ) {
 	assert.expect( 4 );
 
-	// Supports Fixes bug #7229
+	// Supports Fixes bug trac-7229
 	try {
 		jQuery( "#firstp" ).on( "click", null );
 		assert.ok( true, "Passing a null handler will not throw an exception" );
@@ -484,7 +484,7 @@ 		neverCallMe = function() {
 QUnit.test( "on(), iframes", function( assert ) {
 	assert.expect( 1 );
 
-	// events don't work with iframes, see #939 - this test fails in IE because of contentDocument
+	// events don't work with iframes, see trac-939 - this test fails in IE because of contentDocument
 	var doc = jQuery( "#loadediframe" ).contents();
 
 	jQuery( "div", doc ).on( "click", function() {
@@ -552,7 +552,7 @@ jQuery( "#nonnodes" ).contents().on( "tester", function() {
 		assert.equal( this.nodeType, 1, "Check node,textnode,comment on just does real nodes" );
 	} ).trigger( "tester" );
 
-	// Make sure events stick with appendTo'd elements (which are cloned) #2027
+	// Make sure events stick with appendTo'd elements (which are cloned) trac-2027
 	jQuery( "<a href='#fail' class='test'>test</a>" ).on( "click", function() { return false; } ).appendTo( "#qunit-fixture" );
 	assert.ok( jQuery( "a.test" ).eq( 0 ).triggerHandler( "click" ) === false, "Handler is bound to appendTo'd elements" );
 } );
@@ -589,7 +589,7 @@ jQuery( "#firstp" ).on( "click.test.abc", function() {
 		check( "click.test.abc", "Namespaced click triggered" );
 	} );
 
-	// Those would not trigger/off (#5303)
+	// Those would not trigger/off (trac-5303)
 	jQuery( "#firstp" ).trigger( "click.a.test" );
 	jQuery( "#firstp" ).off( "click.a.test" );
 
@@ -812,7 +812,7 @@ QUnit.test( "off(type)", function( assert ) {
 		.off( "error1 error2", error )
 		.trigger( "error1" ).triggerHandler( "error2" );
 
-	message = "unbind many"; // #3538
+	message = "unbind many"; // trac-3538
 	$elem.on( "error1 error2", error )
 		.off( "error1 error2" )
 		.trigger( "error1" ).triggerHandler( "error2" );
@@ -1041,7 +1041,7 @@ 	$elem[ 0 ].click = function() {
 	} catch ( e ) {
 		pass = false;
 	}
-	assert.ok( pass, "Trigger on a table with a colon in the even type, see #3533" );
+	assert.ok( pass, "Trigger on a table with a colon in the even type, see trac-3533" );
 
 	form = jQuery( "<form action=''></form>" ).appendTo( "body" );
 
@@ -1069,7 +1069,7 @@ jQuery( document ).on( "submit", function() {
 	form.remove();
 } );
 
-QUnit.test( "submit event bubbles on copied forms (#11649)", function( assert ) {
+QUnit.test( "submit event bubbles on copied forms (trac-11649)", function( assert ) {
 	assert.expect( 3 );
 
 	var $formByClone, $formByHTML,
@@ -1105,7 +1105,7 @@ QUnit.test( "submit event bubbles on copied forms (#11649)", function( assert )
 	$testForm.off( "submit", noSubmit );
 } );
 
-QUnit.test( "change event bubbles on copied forms (#11796)", function( assert ) {
+QUnit.test( "change event bubbles on copied forms (trac-11796)", function( assert ) {
 	assert.expect( 3 );
 
 	var $formByClone, $formByHTML,
@@ -1227,7 +1227,7 @@ QUnit.test( "trigger(eventObject, [data], [fn])", function( assert ) {
 	assert.equal( event.isDefaultPrevented(), false, "default not prevented" );
 } );
 
-QUnit.test( ".trigger() bubbling on disconnected elements (#10489)", function( assert ) {
+QUnit.test( ".trigger() bubbling on disconnected elements (trac-10489)", function( assert ) {
 	assert.expect( 2 );
 
 	jQuery( window ).on( "click", function() {
@@ -1251,7 +1251,7 @@ jQuery( "<div><p>hi</p></div>" )
 	jQuery( window ).off( "click" );
 } );
 
-QUnit.test( ".trigger() doesn't bubble load event (#10717)", function( assert ) {
+QUnit.test( ".trigger() doesn't bubble load event (trac-10717)", function( assert ) {
 	assert.expect( 1 );
 
 	jQuery( window ).on( "load", function() {
@@ -1269,7 +1269,7 @@ jQuery( "<img src='" + baseURL + "1x1.jpg' />" )
 	jQuery( window ).off( "load" );
 } );
 
-QUnit.test( "Delegated events in SVG (#10791; #13180)", function( assert ) {
+QUnit.test( "Delegated events in SVG (trac-10791; trac-13180)", function( assert ) {
 	assert.expect( 2 );
 
 	var useElem, e,
@@ -1295,7 +1295,7 @@ jQuery( "#qunit-fixture" )
 		.end();
 
 	// Fire a native click on an SVGElementInstance (the instance tree of an SVG <use>)
-	// to confirm that it doesn't break our event delegation handling (#13180)
+	// to confirm that it doesn't break our event delegation handling (trac-13180)
 	useElem = svg.find( "#use" )[ 0 ];
 	if ( document.createEvent && useElem && useElem.instanceRoot ) {
 		e = document.createEvent( "MouseEvents" );
@@ -1321,7 +1321,7 @@ QUnit.test( "Delegated events with malformed selectors (gh-3071)", function( ass
 	assert.ok( true, "malformed selector does not throw on event" );
 } );
 
-QUnit.test( "Delegated events in forms (#10844; #11145; #8165; #11382, #11764)", function( assert ) {
+QUnit.test( "Delegated events in forms (trac-10844; trac-11145; trac-8165; trac-11382, trac-11764)", function( assert ) {
 	assert.expect( 5 );
 
 	// Alias names like "id" cause havoc
@@ -1376,7 +1376,7 @@ jQuery( "body" )
 	form.remove();
 } );
 
-QUnit.test( "Submit event can be stopped (#11049)", function( assert ) {
+QUnit.test( "Submit event can be stopped (trac-11049)", function( assert ) {
 	assert.expect( 1 );
 
 	// Since we manually bubble in IE, make sure inner handlers get a chance to cancel
@@ -1450,7 +1450,7 @@ 			handler = function( event ) {
 	assert.equal( event.type, "keydown", "Verify type" );
 
 	// ensure "type" in props won't clobber the one set by constructor
-	assert.equal( jQuery.inArray( "type", jQuery.event.props ), -1, "'type' property not in props (#10375)" );
+	assert.equal( jQuery.inArray( "type", jQuery.event.props ), -1, "'type' property not in props (trac-10375)" );
 
 	assert.ok( "keyCode" in event, "Special 'keyCode' property exists" );
 
@@ -1844,7 +1844,7 @@ function( assert ) {
 	assert.expect( 3 );
 	var markup = jQuery( "<div><ul><li><a id=\"a0\"></a><ul id=\"ul0\"><li class=test><a id=\"a0_0\"></a></li><li><a id=\"a0_1\"></a></li></ul></li></ul></div>" ).appendTo( "#qunit-fixture" );
 
-	// Non-positional selector (#12383)
+	// Non-positional selector (trac-12383)
 	markup.find( "#ul0" )
 		.on( "click", "div li a", function() {
 			assert.ok( false, "div is ABOVE the delegation point!" );
@@ -1859,7 +1859,7 @@ function( assert ) {
 		.off( "click" );
 
 	if ( QUnit.jQuerySelectorsPos ) {
-		// Positional selector (#11315)
+		// Positional selector (trac-11315)
 		markup.find( "ul" ).eq( 0 )
 			.on( "click", ">li>a", function() {
 				assert.ok( this.id === "a0", "child li was clicked" );
@@ -1879,7 +1879,7 @@ function( assert ) {
 	markup.remove();
 } );
 
-QUnit.test( "delegated event with selector matching Object.prototype property (#13203)", function( assert ) {
+QUnit.test( "delegated event with selector matching Object.prototype property (trac-13203)", function( assert ) {
 	assert.expect( 1 );
 
 	var matched = 0;
@@ -1893,7 +1893,7 @@ jQuery( "#foo" ).on( "click", "toString", function() {
 	assert.equal( matched, 0, "Nothing matched 'toString'" );
 } );
 
-QUnit.test( "delegated event with intermediate DOM manipulation (#13208)", function( assert ) {
+QUnit.test( "delegated event with intermediate DOM manipulation (trac-13208)", function( assert ) {
 	assert.expect( 1 );
 
 	jQuery( "#foo" ).on( "click", "[id=sap]", function() {} );
@@ -2187,7 +2187,7 @@ jQuery( "body" ).on( "focusin.focusinBubblesTest", function() {
 	jQuery( "body" ).off( "focusin.focusinBubblesTest" );
 } );
 
-QUnit.test( "custom events with colons (#3533, #8272)", function( assert ) {
+QUnit.test( "custom events with colons (trac-3533, trac-8272)", function( assert ) {
 	assert.expect( 1 );
 
 	var tab = jQuery( "<table><tr><td>trigger</td></tr></table>" ).appendTo( "body" );
@@ -2370,7 +2370,7 @@ jQuery( "<p>Gut Feeling</p>" )
 	delete jQuery.event.special[ "gutfeeling" ];
 } );
 
-QUnit.test( ".on and .off, selective mixed removal (#10705)", function( assert ) {
+QUnit.test( ".on and .off, selective mixed removal (trac-10705)", function( assert ) {
 	assert.expect( 7 );
 
 	var timingx = function( e ) {
@@ -2392,7 +2392,7 @@ jQuery( "<p>Strange Pursuit</p>" )
 		.trigger( "click" );	// 0
 } );
 
-QUnit.test( ".on( event-map, null-selector, data ) #11130", function( assert ) {
+QUnit.test( ".on( event-map, null-selector, data ) trac-11130", function( assert ) {
 
 	assert.expect( 1 );
 
@@ -2408,7 +2408,7 @@ QUnit.test( ".on( event-map, null-selector, data ) #11130", function( assert ) {
 	$p.on( map, null, data ).trigger( "foo" );
 } );
 
-QUnit.test( "clone() delegated events (#11076)", function( assert ) {
+QUnit.test( "clone() delegated events (trac-11076)", function( assert ) {
 	assert.expect( 3 );
 
 	var counter = { "center": 0, "fold": 0, "centerfold": 0 },
@@ -2630,6 +2630,33 @@ QUnit.test( "focusin on document & window", function( assert ) {
 	jQuery( document ).off( "focusout", increment );
 } );
 
+QUnit.test( "element removed during focusout (gh-4417)", function( assert ) {
+	assert.expect( 1 );
+
+	var button = jQuery( "<button>Click me</button>" );
+
+	button.appendTo( "#qunit-fixture" );
+
+	button.on( "click", function() {
+		button.trigger( "blur" );
+		assert.ok( true, "Removing the element didn't crash" );
+	} );
+
+	// Support: Chrome 86+
+	// In Chrome, if an element having a focusout handler is blurred by
+	// clicking outside of it, it invokes the handler synchronously. However,
+	// if the click happens programmatically, the invocation is asynchronous.
+	// As we have no way to simulate real user input in unit tests, simulate
+	// this behavior by calling `jQuery.cleanData` & removing the element using
+	// native APIs.
+	button[ 0 ].blur = function() {
+		jQuery.cleanData( [ this ] );
+		this.parentNode.removeChild( this );
+	};
+
+	button[ 0 ].click();
+} );
+
 testIframe(
 	"jQuery.ready promise",
 	"event/promiseReady.html",
@@ -2718,7 +2745,7 @@ QUnit.test( "trigger click on checkbox, fires change event", function( assert )
 	} ).trigger( "click" );
 } );
 
-QUnit.test( "Namespace preserved when passed an Event (#12739)", function( assert ) {
+QUnit.test( "Namespace preserved when passed an Event (trac-12739)", function( assert ) {
 	assert.expect( 4 );
 
 	var markup = jQuery(
@@ -2806,7 +2833,7 @@ QUnit.test( "make sure events cloned correctly", function( assert ) {
 	clone.find( "#check1" ).trigger( "change" ); // 0 events should fire
 } );
 
-QUnit.test( "String.prototype.namespace does not cause trigger() to throw (#13360)", function( assert ) {
+QUnit.test( "String.prototype.namespace does not cause trigger() to throw (trac-13360)", function( assert ) {
 	assert.expect( 1 );
 	var errored = false;
 
@@ -2821,7 +2848,7 @@ QUnit.test( "String.prototype.namespace does not cause trigger() to throw (#1336
 	delete String.prototype.namespace;
 } );
 
-QUnit.test( "Inline event result is returned (#13993)", function( assert ) {
+QUnit.test( "Inline event result is returned (trac-13993)", function( assert ) {
 	assert.expect( 1 );
 
 	var result = jQuery( "<p onclick='return 42'>hello</p>" ).triggerHandler( "click" );
@@ -3110,7 +3137,7 @@ setTimeout( function() {
 	}, 50 );
 } );
 
-QUnit.test( "focus-blur order (#12868)", function( assert ) {
+QUnit.test( "focus-blur order (trac-12868)", function( assert ) {
 	assert.expect( 5 );
 
 	var order,
@@ -3264,6 +3291,56 @@ setTimeout( function() {
 	}, 50 );
 } );
 
+QUnit.test( "focus change during a focus handler (gh-4382)", function( assert ) {
+	assert.expect( 2 );
+
+	var done = assert.async(),
+		select = jQuery( "<select><option selected='selected'>A</option></select>" ),
+		button = jQuery( "<button>Focus target</button>" );
+
+	jQuery( "#qunit-fixture" )
+		.append( select )
+		.append( button );
+
+	select.on( "focus", function() {
+		button.trigger( "focus" );
+	} );
+
+	jQuery( document ).on( "focusin.focusTests", function( ev ) {
+		// Support: IE 11+
+		// In IE focus is async so focusin on document is fired multiple times,
+		// for each of the elements. In other browsers it's fired just once, for
+		// the last one.
+		if ( ev.target === button[ 0 ] ) {
+			assert.ok( true, "focusin propagated to document from the button" );
+		}
+	} );
+
+	select.trigger( "focus" );
+
+	setTimeout( function() {
+		assert.strictEqual( document.activeElement, button[ 0 ], "Focus redirect worked" );
+		jQuery( document ).off( ".focusTests" );
+		done();
+	} );
+} );
+
+QUnit.test( "trigger(focus) works after .on(focus).off(focus) (gh-4867)", function( assert ) {
+	assert.expect( 1 );
+
+	var input = jQuery( "<input />" );
+
+	input.appendTo( "#qunit-fixture" );
+
+	input
+		.on( "focus", function() {} )
+		.off( "focus" );
+
+	input.trigger( "focus" );
+
+	assert.equal( document.activeElement, input[ 0 ], "input has focus" );
+} );
+
 // TODO replace with an adaptation of
 // https://github.com/jquery/jquery/pull/1367/files#diff-a215316abbaabdf71857809e8673ea28R2464
 ( function() {
diff --git a/a.js b/b.js
index 06a5f404..e376be6c 100644
--- a/a.js
+++ b/b.js
@@ -60,7 +60,7 @@ async function() {
 		const done = this.async();
 
 		try {
-			const slimFlags = [ "-ajax", "-callbacks", "-deferred", "-effects" ];
+			const slimFlags = [ "-ajax", "-callbacks", "-deferred", "-effects", "-queue" ];
 			const flags = this.flags;
 			const optIn = flags[ "*" ];
 			let name = grunt.option( "filename" );
